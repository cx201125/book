2020-09-15 12:25:54.460  INFO 17488 --- [restartedMain] com.chenxin.blog.BlogApplication         : Starting BlogApplication on LAPTOP-UGEIKVSJ with PID 17488 (D:\Program Files\idea-workaplace\blog\target\classes started by asus in D:\Program Files\idea-workaplace\blog)
2020-09-15 12:25:54.464 DEBUG 17488 --- [restartedMain] com.chenxin.blog.BlogApplication         : Running with Spring Boot v2.3.3.RELEASE, Spring v5.2.8.RELEASE
2020-09-15 12:25:54.464  INFO 17488 --- [restartedMain] com.chenxin.blog.BlogApplication         : The following profiles are active: dev
2020-09-15 12:25:54.764  INFO 17488 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-09-15 12:25:54.765  INFO 17488 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-09-15 12:25:56.743  INFO 17488 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-09-15 12:25:56.745  INFO 17488 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-09-15 12:25:56.845  INFO 17488 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 40ms. Found 0 Redis repository interfaces.
2020-09-15 12:25:57.963  INFO 17488 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-09-15 12:25:57.971  INFO 17488 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-09-15 12:25:57.971  INFO 17488 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.37]
2020-09-15 12:25:58.099  INFO 17488 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-09-15 12:25:58.099  INFO 17488 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 3334 ms
2020-09-15 12:25:59.812  INFO 17488 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-09-15 12:25:59.937  INFO 17488 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-09-15 12:26:00.981  INFO 17488 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-09-15 12:26:01.080  INFO 17488 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-09-15 12:26:01.088  INFO 17488 --- [restartedMain] com.chenxin.blog.BlogApplication         : Started BlogApplication in 8.015 seconds (JVM running for 9.501)
2020-09-15 12:27:14.035  INFO 17488 --- [Thread-19] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-09-15 12:27:14.317  INFO 17488 --- [restartedMain] com.chenxin.blog.BlogApplication         : Starting BlogApplication on LAPTOP-UGEIKVSJ with PID 17488 (D:\Program Files\idea-workaplace\blog\target\classes started by asus in D:\Program Files\idea-workaplace\blog)
2020-09-15 12:27:14.318 DEBUG 17488 --- [restartedMain] com.chenxin.blog.BlogApplication         : Running with Spring Boot v2.3.3.RELEASE, Spring v5.2.8.RELEASE
2020-09-15 12:27:14.318  INFO 17488 --- [restartedMain] com.chenxin.blog.BlogApplication         : The following profiles are active: dev
2020-09-15 12:27:14.780  INFO 17488 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-09-15 12:27:14.780  INFO 17488 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-09-15 12:27:14.795  INFO 17488 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 14ms. Found 0 Redis repository interfaces.
2020-09-15 12:27:15.089  INFO 17488 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-09-15 12:27:15.090  INFO 17488 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-09-15 12:27:15.090  INFO 17488 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.37]
2020-09-15 12:27:15.142  INFO 17488 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-09-15 12:27:15.142  INFO 17488 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 821 ms
2020-09-15 12:27:15.839  INFO 17488 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-09-15 12:27:15.891  INFO 17488 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-09-15 12:27:16.307  INFO 17488 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-09-15 12:27:16.323  INFO 17488 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-09-15 12:27:16.327  INFO 17488 --- [restartedMain] com.chenxin.blog.BlogApplication         : Started BlogApplication in 2.065 seconds (JVM running for 84.74)
2020-09-15 12:27:16.329  INFO 17488 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2020-09-15 12:27:16.962  INFO 8596 --- [main] com.chenxin.blog.BlogApplicationTests    : Starting BlogApplicationTests on LAPTOP-UGEIKVSJ with PID 8596 (started by asus in D:\Program Files\idea-workaplace\blog)
2020-09-15 12:27:16.962 DEBUG 8596 --- [main] com.chenxin.blog.BlogApplicationTests    : Running with Spring Boot v2.3.3.RELEASE, Spring v5.2.8.RELEASE
2020-09-15 12:27:16.963  INFO 8596 --- [main] com.chenxin.blog.BlogApplicationTests    : The following profiles are active: dev
2020-09-15 12:27:17.814  INFO 8596 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-09-15 12:27:17.823  INFO 8596 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-09-15 12:27:17.858  INFO 8596 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 23ms. Found 0 Redis repository interfaces.
2020-09-15 12:27:21.033  INFO 8596 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-09-15 12:27:21.213  INFO 8596 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-09-15 12:27:22.117  INFO 8596 --- [main] com.chenxin.blog.BlogApplicationTests    : Started BlogApplicationTests in 5.669 seconds (JVM running for 7.273)
2020-09-15 12:27:22.648  INFO 8596 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-09-15 12:32:14.953  INFO 17488 --- [Thread-26] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-09-15 12:32:15.167  INFO 17488 --- [restartedMain] com.chenxin.blog.BlogApplication         : Starting BlogApplication on LAPTOP-UGEIKVSJ with PID 17488 (D:\Program Files\idea-workaplace\blog\target\classes started by asus in D:\Program Files\idea-workaplace\blog)
2020-09-15 12:32:15.167 DEBUG 17488 --- [restartedMain] com.chenxin.blog.BlogApplication         : Running with Spring Boot v2.3.3.RELEASE, Spring v5.2.8.RELEASE
2020-09-15 12:32:15.167  INFO 17488 --- [restartedMain] com.chenxin.blog.BlogApplication         : The following profiles are active: dev
2020-09-15 12:32:15.502  INFO 17488 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-09-15 12:32:15.502  INFO 17488 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-09-15 12:32:15.516  INFO 17488 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 13ms. Found 0 Redis repository interfaces.
2020-09-15 12:32:15.695  INFO 17488 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-09-15 12:32:15.696  INFO 17488 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-09-15 12:32:15.696  INFO 17488 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.37]
2020-09-15 12:32:15.817  INFO 17488 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-09-15 12:32:15.817  INFO 17488 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 647 ms
2020-09-15 12:32:16.328  INFO 17488 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-09-15 12:32:16.423  INFO 17488 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-09-15 12:32:16.861  INFO 17488 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-09-15 12:32:16.877  INFO 17488 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-09-15 12:32:16.880  INFO 17488 --- [restartedMain] com.chenxin.blog.BlogApplication         : Started BlogApplication in 1.77 seconds (JVM running for 385.293)
2020-09-15 12:32:16.881  INFO 17488 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2020-09-15 12:32:27.112  INFO 18160 --- [main] com.chenxin.blog.BlogApplicationTests    : Starting BlogApplicationTests on LAPTOP-UGEIKVSJ with PID 18160 (started by asus in D:\Program Files\idea-workaplace\blog)
2020-09-15 12:32:27.113 DEBUG 18160 --- [main] com.chenxin.blog.BlogApplicationTests    : Running with Spring Boot v2.3.3.RELEASE, Spring v5.2.8.RELEASE
2020-09-15 12:32:27.113  INFO 18160 --- [main] com.chenxin.blog.BlogApplicationTests    : The following profiles are active: dev
2020-09-15 12:32:27.795  INFO 18160 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-09-15 12:32:27.798  INFO 18160 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-09-15 12:32:27.842  INFO 18160 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 28ms. Found 0 Redis repository interfaces.
2020-09-15 12:32:30.863  INFO 18160 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-09-15 12:32:31.026  INFO 18160 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-09-15 12:32:31.753  INFO 18160 --- [main] com.chenxin.blog.BlogApplicationTests    : Started BlogApplicationTests in 5.165 seconds (JVM running for 6.387)
2020-09-15 12:32:32.249  INFO 18160 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-09-15 12:44:26.239  INFO 4716 --- [main] com.chenxin.blog.BlogApplicationTests    : Starting BlogApplicationTests on LAPTOP-UGEIKVSJ with PID 4716 (started by asus in D:\Program Files\idea-workaplace\blog)
2020-09-15 12:44:26.240 DEBUG 4716 --- [main] com.chenxin.blog.BlogApplicationTests    : Running with Spring Boot v2.3.3.RELEASE, Spring v5.2.8.RELEASE
2020-09-15 12:44:26.241  INFO 4716 --- [main] com.chenxin.blog.BlogApplicationTests    : The following profiles are active: dev
2020-09-15 12:44:27.048  INFO 4716 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-09-15 12:44:27.051  INFO 4716 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-09-15 12:44:27.102  INFO 4716 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 37ms. Found 0 Redis repository interfaces.
2020-09-15 12:44:29.970  INFO 4716 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-09-15 12:44:30.118  INFO 4716 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-09-15 12:44:30.909  INFO 4716 --- [main] com.chenxin.blog.BlogApplicationTests    : Started BlogApplicationTests in 5.217 seconds (JVM running for 6.515)
2020-09-15 12:44:31.126  INFO 4716 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-09-15 12:44:38.109  INFO 12944 --- [restartedMain] com.chenxin.blog.BlogApplication         : Starting BlogApplication on LAPTOP-UGEIKVSJ with PID 12944 (D:\Program Files\idea-workaplace\blog\target\classes started by asus in D:\Program Files\idea-workaplace\blog)
2020-09-15 12:44:38.111 DEBUG 12944 --- [restartedMain] com.chenxin.blog.BlogApplication         : Running with Spring Boot v2.3.3.RELEASE, Spring v5.2.8.RELEASE
2020-09-15 12:44:38.111  INFO 12944 --- [restartedMain] com.chenxin.blog.BlogApplication         : The following profiles are active: dev
2020-09-15 12:44:38.163  INFO 12944 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-09-15 12:44:38.163  INFO 12944 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-09-15 12:44:38.772  INFO 12944 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-09-15 12:44:38.774  INFO 12944 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-09-15 12:44:38.804  INFO 12944 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 20ms. Found 0 Redis repository interfaces.
2020-09-15 12:44:39.543  INFO 12944 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-09-15 12:44:39.550  INFO 12944 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-09-15 12:44:39.550  INFO 12944 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.37]
2020-09-15 12:44:39.658  INFO 12944 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-09-15 12:44:39.659  INFO 12944 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1495 ms
2020-09-15 12:44:40.558  INFO 12944 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-09-15 12:44:40.636  INFO 12944 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-09-15 12:44:41.120  INFO 12944 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-09-15 12:44:41.159  INFO 12944 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-09-15 12:44:41.169  INFO 12944 --- [restartedMain] com.chenxin.blog.BlogApplication         : Started BlogApplication in 3.538 seconds (JVM running for 4.686)
2020-09-15 12:44:55.140  INFO 12944 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-09-15 12:44:55.140  INFO 12944 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-09-15 12:44:55.147  INFO 12944 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 7 ms
2020-09-15 12:44:55.224  INFO 12944 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.indexoage', args=[null, {}]}
2020-09-15 12:44:56.398  INFO 12944 --- [http-nio-8080-exec-1] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-09-15 12:44:56.514 DEBUG 12944 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByPaging_COUNT         : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0
2020-09-15 12:44:56.666 DEBUG 12944 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByPaging_COUNT         : ==> Parameters: 
2020-09-15 12:44:56.815 DEBUG 12944 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByPaging_COUNT         : <==      Total: 1
2020-09-15 12:44:56.818 DEBUG 12944 --- [http-nio-8080-exec-1] c.c.b.m.BlogMapper.findBlogByPaging      : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 LIMIT ?
2020-09-15 12:44:56.833 DEBUG 12944 --- [http-nio-8080-exec-1] c.c.b.m.BlogMapper.findBlogByPaging      : ==> Parameters: 3(Integer)
2020-09-15 12:44:56.854 DEBUG 12944 --- [http-nio-8080-exec-1] c.c.b.m.BlogMapper.findBlogByPaging      : <==      Total: 3
2020-09-15 12:44:56.887 DEBUG 12944 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC limit 0,6
2020-09-15 12:44:56.905 DEBUG 12944 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 12:44:56.909 DEBUG 12944 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 12:44:56.914 DEBUG 12944 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByExample  : ==>  Preparing: SELECT t.id, t.NAME, COUNT( bt.blog_id ) countBlog FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.isrecommend = 0 GROUP BY id ORDER BY countBlog DESC limit 0,10
2020-09-15 12:44:56.915 DEBUG 12944 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByExample  : ==> Parameters: 
2020-09-15 12:44:56.920 DEBUG 12944 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByExample  : <==      Total: 5
2020-09-15 12:44:56.925 DEBUG 12944 --- [http-nio-8080-exec-1] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,10
2020-09-15 12:44:56.926 DEBUG 12944 --- [http-nio-8080-exec-1] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 12:44:56.932 DEBUG 12944 --- [http-nio-8080-exec-1] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 5
2020-09-15 12:44:56.933  INFO 12944 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Return ------ /index
2020-09-15 12:45:03.692  INFO 12944 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/about', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.AboutController.about', args=[{}]}
2020-09-15 12:45:03.696  INFO 12944 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Return ------ about
2020-09-15 12:47:48.149  INFO 12944 --- [Thread-13] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-09-15 12:47:48.191  INFO 12944 --- [Thread-13] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-09-15 12:47:48.457  INFO 12944 --- [restartedMain] com.chenxin.blog.BlogApplication         : Starting BlogApplication on LAPTOP-UGEIKVSJ with PID 12944 (D:\Program Files\idea-workaplace\blog\target\classes started by asus in D:\Program Files\idea-workaplace\blog)
2020-09-15 12:47:48.458 DEBUG 12944 --- [restartedMain] com.chenxin.blog.BlogApplication         : Running with Spring Boot v2.3.3.RELEASE, Spring v5.2.8.RELEASE
2020-09-15 12:47:48.458  INFO 12944 --- [restartedMain] com.chenxin.blog.BlogApplication         : The following profiles are active: dev
2020-09-15 12:47:48.664  INFO 12944 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-09-15 12:47:48.664  INFO 12944 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-09-15 12:47:48.681  INFO 12944 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 17ms. Found 0 Redis repository interfaces.
2020-09-15 12:47:48.952  INFO 12944 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-09-15 12:47:48.952  INFO 12944 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-09-15 12:47:48.953  INFO 12944 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.37]
2020-09-15 12:47:48.981  INFO 12944 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-09-15 12:47:48.981  INFO 12944 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 521 ms
2020-09-15 12:47:49.405  INFO 12944 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-09-15 12:47:49.447  INFO 12944 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-09-15 12:47:49.774  INFO 12944 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-09-15 12:47:49.785  INFO 12944 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-09-15 12:47:49.788  INFO 12944 --- [restartedMain] com.chenxin.blog.BlogApplication         : Started BlogApplication in 1.375 seconds (JVM running for 193.306)
2020-09-15 12:47:49.789  INFO 12944 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2020-09-15 12:47:53.991  INFO 12944 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-09-15 12:47:53.992  INFO 12944 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-09-15 12:47:54.001  INFO 12944 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 9 ms
2020-09-15 12:47:54.004  INFO 12944 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/about', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.AboutController.about', args=[{}]}
2020-09-15 12:47:54.006  INFO 12944 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Return ------ about
2020-09-15 13:56:34.402  INFO 17344 --- [restartedMain] com.chenxin.blog.BlogApplication         : Starting BlogApplication on LAPTOP-UGEIKVSJ with PID 17344 (D:\Program Files\idea-workaplace\blog\target\classes started by asus in D:\Program Files\idea-workaplace\blog)
2020-09-15 13:56:34.410 DEBUG 17344 --- [restartedMain] com.chenxin.blog.BlogApplication         : Running with Spring Boot v2.3.3.RELEASE, Spring v5.2.8.RELEASE
2020-09-15 13:56:34.410  INFO 17344 --- [restartedMain] com.chenxin.blog.BlogApplication         : The following profiles are active: dev
2020-09-15 13:56:34.453  INFO 17344 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-09-15 13:56:34.453  INFO 17344 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-09-15 13:56:35.068  INFO 17344 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-09-15 13:56:35.071  INFO 17344 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-09-15 13:56:35.101  INFO 17344 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 19ms. Found 0 Redis repository interfaces.
2020-09-15 13:56:35.815  INFO 17344 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-09-15 13:56:35.823  INFO 17344 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-09-15 13:56:35.823  INFO 17344 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.37]
2020-09-15 13:56:36.002  INFO 17344 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-09-15 13:56:36.003  INFO 17344 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1550 ms
2020-09-15 13:56:36.830 ERROR 17344 --- [restartedMain] o.m.spring.mapper.MapperFactoryBean      : Error while adding the mapper 'interface com.chenxin.blog.mapper.LogMapper' to configuration.

java.lang.IllegalStateException: Type handler was null on parameter mapping for property 'args'. It was either not specified and/or could not be found for the javaType ([Ljava.lang.Object;) : jdbcType (null) combination.
	at org.apache.ibatis.mapping.ParameterMapping$Builder.validate(ParameterMapping.java:119)
	at org.apache.ibatis.mapping.ParameterMapping$Builder.build(ParameterMapping.java:104)
	at org.apache.ibatis.builder.SqlSourceBuilder$ParameterMappingTokenHandler.buildParameterMapping(SqlSourceBuilder.java:143)
	at org.apache.ibatis.builder.SqlSourceBuilder$ParameterMappingTokenHandler.handleToken(SqlSourceBuilder.java:87)
	at org.apache.ibatis.parsing.GenericTokenParser.parse(GenericTokenParser.java:77)
	at org.apache.ibatis.builder.SqlSourceBuilder.parse(SqlSourceBuilder.java:50)
	at org.apache.ibatis.scripting.defaults.RawSqlSource.<init>(RawSqlSource.java:46)
	at org.apache.ibatis.scripting.xmltags.XMLLanguageDriver.createSqlSource(XMLLanguageDriver.java:60)
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.buildSqlSourceFromStrings(MapperAnnotationBuilder.java:635)
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.buildSqlSource(MapperAnnotationBuilder.java:624)
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.lambda$parseStatement$2(MapperAnnotationBuilder.java:301)
	at java.util.Optional.ifPresent(Optional.java:159)
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.parseStatement(MapperAnnotationBuilder.java:300)
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.parse(MapperAnnotationBuilder.java:132)
	at org.apache.ibatis.binding.MapperRegistry.addMapper(MapperRegistry.java:72)
	at org.apache.ibatis.session.Configuration.addMapper(Configuration.java:819)
	at org.mybatis.spring.mapper.MapperFactoryBean.checkDaoConfig(MapperFactoryBean.java:80)
	at org.springframework.dao.support.DaoSupport.afterPropertiesSet(DaoSupport.java:44)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1853)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1790)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1307)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1227)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:130)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1420)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:897)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:879)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:551)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:143)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.chenxin.blog.BlogApplication.main(BlogApplication.java:17)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)

2020-09-15 13:56:36.831  WARN 17344 --- [restartedMain] ConfigServletWebServerApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'logAspect': Unsatisfied dependency expressed through field 'logMapper'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'logMapper' defined in file [D:\Program Files\idea-workaplace\blog\target\classes\com\chenxin\blog\mapper\LogMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: java.lang.IllegalStateException: Type handler was null on parameter mapping for property 'args'. It was either not specified and/or could not be found for the javaType ([Ljava.lang.Object;) : jdbcType (null) combination.
2020-09-15 13:56:36.833  INFO 17344 --- [restartedMain] o.apache.catalina.core.StandardService   : Stopping service [Tomcat]
2020-09-15 13:56:36.865  INFO 17344 --- [restartedMain] ConditionEvaluationReportLoggingListener : 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-09-15 13:56:36.889 ERROR 17344 --- [restartedMain] o.s.boot.SpringApplication               : Application run failed

org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'logAspect': Unsatisfied dependency expressed through field 'logMapper'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'logMapper' defined in file [D:\Program Files\idea-workaplace\blog\target\classes\com\chenxin\blog\mapper\LogMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: java.lang.IllegalStateException: Type handler was null on parameter mapping for property 'args'. It was either not specified and/or could not be found for the javaType ([Ljava.lang.Object;) : jdbcType (null) combination.
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:643)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:130)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1420)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:897)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:879)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:551)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:143)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.chenxin.blog.BlogApplication.main(BlogApplication.java:17)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'logMapper' defined in file [D:\Program Files\idea-workaplace\blog\target\classes\com\chenxin\blog\mapper\LogMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: java.lang.IllegalStateException: Type handler was null on parameter mapping for property 'args'. It was either not specified and/or could not be found for the javaType ([Ljava.lang.Object;) : jdbcType (null) combination.
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1794)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1307)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1227)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)
	... 25 common frames omitted
Caused by: java.lang.IllegalArgumentException: java.lang.IllegalStateException: Type handler was null on parameter mapping for property 'args'. It was either not specified and/or could not be found for the javaType ([Ljava.lang.Object;) : jdbcType (null) combination.
	at org.mybatis.spring.mapper.MapperFactoryBean.checkDaoConfig(MapperFactoryBean.java:83)
	at org.springframework.dao.support.DaoSupport.afterPropertiesSet(DaoSupport.java:44)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1853)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1790)
	... 35 common frames omitted
Caused by: java.lang.IllegalStateException: Type handler was null on parameter mapping for property 'args'. It was either not specified and/or could not be found for the javaType ([Ljava.lang.Object;) : jdbcType (null) combination.
	at org.apache.ibatis.mapping.ParameterMapping$Builder.validate(ParameterMapping.java:119)
	at org.apache.ibatis.mapping.ParameterMapping$Builder.build(ParameterMapping.java:104)
	at org.apache.ibatis.builder.SqlSourceBuilder$ParameterMappingTokenHandler.buildParameterMapping(SqlSourceBuilder.java:143)
	at org.apache.ibatis.builder.SqlSourceBuilder$ParameterMappingTokenHandler.handleToken(SqlSourceBuilder.java:87)
	at org.apache.ibatis.parsing.GenericTokenParser.parse(GenericTokenParser.java:77)
	at org.apache.ibatis.builder.SqlSourceBuilder.parse(SqlSourceBuilder.java:50)
	at org.apache.ibatis.scripting.defaults.RawSqlSource.<init>(RawSqlSource.java:46)
	at org.apache.ibatis.scripting.xmltags.XMLLanguageDriver.createSqlSource(XMLLanguageDriver.java:60)
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.buildSqlSourceFromStrings(MapperAnnotationBuilder.java:635)
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.buildSqlSource(MapperAnnotationBuilder.java:624)
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.lambda$parseStatement$2(MapperAnnotationBuilder.java:301)
	at java.util.Optional.ifPresent(Optional.java:159)
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.parseStatement(MapperAnnotationBuilder.java:300)
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.parse(MapperAnnotationBuilder.java:132)
	at org.apache.ibatis.binding.MapperRegistry.addMapper(MapperRegistry.java:72)
	at org.apache.ibatis.session.Configuration.addMapper(Configuration.java:819)
	at org.mybatis.spring.mapper.MapperFactoryBean.checkDaoConfig(MapperFactoryBean.java:80)
	... 38 common frames omitted

2020-09-15 13:58:26.381  INFO 18572 --- [restartedMain] com.chenxin.blog.BlogApplication         : Starting BlogApplication on LAPTOP-UGEIKVSJ with PID 18572 (D:\Program Files\idea-workaplace\blog\target\classes started by asus in D:\Program Files\idea-workaplace\blog)
2020-09-15 13:58:26.384 DEBUG 18572 --- [restartedMain] com.chenxin.blog.BlogApplication         : Running with Spring Boot v2.3.3.RELEASE, Spring v5.2.8.RELEASE
2020-09-15 13:58:26.385  INFO 18572 --- [restartedMain] com.chenxin.blog.BlogApplication         : The following profiles are active: dev
2020-09-15 13:58:26.446  INFO 18572 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-09-15 13:58:26.447  INFO 18572 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-09-15 13:58:27.024  INFO 18572 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-09-15 13:58:27.026  INFO 18572 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-09-15 13:58:27.053  INFO 18572 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 18ms. Found 0 Redis repository interfaces.
2020-09-15 13:58:27.630  INFO 18572 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-09-15 13:58:27.636  INFO 18572 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-09-15 13:58:27.636  INFO 18572 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.37]
2020-09-15 13:58:27.722  INFO 18572 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-09-15 13:58:27.722  INFO 18572 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1275 ms
2020-09-15 13:58:28.171 ERROR 18572 --- [restartedMain] o.m.spring.mapper.MapperFactoryBean      : Error while adding the mapper 'interface com.chenxin.blog.mapper.LogMapper' to configuration.

java.lang.IllegalStateException: Type handler was null on parameter mapping for property 'args'. It was either not specified and/or could not be found for the javaType ([Ljava.lang.Object;) : jdbcType (null) combination.
	at org.apache.ibatis.mapping.ParameterMapping$Builder.validate(ParameterMapping.java:119)
	at org.apache.ibatis.mapping.ParameterMapping$Builder.build(ParameterMapping.java:104)
	at org.apache.ibatis.builder.SqlSourceBuilder$ParameterMappingTokenHandler.buildParameterMapping(SqlSourceBuilder.java:143)
	at org.apache.ibatis.builder.SqlSourceBuilder$ParameterMappingTokenHandler.handleToken(SqlSourceBuilder.java:87)
	at org.apache.ibatis.parsing.GenericTokenParser.parse(GenericTokenParser.java:77)
	at org.apache.ibatis.builder.SqlSourceBuilder.parse(SqlSourceBuilder.java:50)
	at org.apache.ibatis.scripting.defaults.RawSqlSource.<init>(RawSqlSource.java:46)
	at org.apache.ibatis.scripting.xmltags.XMLLanguageDriver.createSqlSource(XMLLanguageDriver.java:60)
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.buildSqlSourceFromStrings(MapperAnnotationBuilder.java:635)
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.buildSqlSource(MapperAnnotationBuilder.java:624)
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.lambda$parseStatement$2(MapperAnnotationBuilder.java:301)
	at java.util.Optional.ifPresent(Optional.java:159)
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.parseStatement(MapperAnnotationBuilder.java:300)
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.parse(MapperAnnotationBuilder.java:132)
	at org.apache.ibatis.binding.MapperRegistry.addMapper(MapperRegistry.java:72)
	at org.apache.ibatis.session.Configuration.addMapper(Configuration.java:819)
	at org.mybatis.spring.mapper.MapperFactoryBean.checkDaoConfig(MapperFactoryBean.java:80)
	at org.springframework.dao.support.DaoSupport.afterPropertiesSet(DaoSupport.java:44)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1853)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1790)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1307)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1227)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:130)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1420)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:897)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:879)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:551)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:143)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.chenxin.blog.BlogApplication.main(BlogApplication.java:17)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)

2020-09-15 13:58:28.173  WARN 18572 --- [restartedMain] ConfigServletWebServerApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'logAspect': Unsatisfied dependency expressed through field 'logMapper'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'logMapper' defined in file [D:\Program Files\idea-workaplace\blog\target\classes\com\chenxin\blog\mapper\LogMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: java.lang.IllegalStateException: Type handler was null on parameter mapping for property 'args'. It was either not specified and/or could not be found for the javaType ([Ljava.lang.Object;) : jdbcType (null) combination.
2020-09-15 13:58:28.175  INFO 18572 --- [restartedMain] o.apache.catalina.core.StandardService   : Stopping service [Tomcat]
2020-09-15 13:58:28.189  INFO 18572 --- [restartedMain] ConditionEvaluationReportLoggingListener : 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-09-15 13:58:28.195 ERROR 18572 --- [restartedMain] o.s.boot.SpringApplication               : Application run failed

org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'logAspect': Unsatisfied dependency expressed through field 'logMapper'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'logMapper' defined in file [D:\Program Files\idea-workaplace\blog\target\classes\com\chenxin\blog\mapper\LogMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: java.lang.IllegalStateException: Type handler was null on parameter mapping for property 'args'. It was either not specified and/or could not be found for the javaType ([Ljava.lang.Object;) : jdbcType (null) combination.
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:643)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:130)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1420)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:897)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:879)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:551)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:143)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.chenxin.blog.BlogApplication.main(BlogApplication.java:17)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'logMapper' defined in file [D:\Program Files\idea-workaplace\blog\target\classes\com\chenxin\blog\mapper\LogMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: java.lang.IllegalStateException: Type handler was null on parameter mapping for property 'args'. It was either not specified and/or could not be found for the javaType ([Ljava.lang.Object;) : jdbcType (null) combination.
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1794)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1307)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1227)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)
	... 25 common frames omitted
Caused by: java.lang.IllegalArgumentException: java.lang.IllegalStateException: Type handler was null on parameter mapping for property 'args'. It was either not specified and/or could not be found for the javaType ([Ljava.lang.Object;) : jdbcType (null) combination.
	at org.mybatis.spring.mapper.MapperFactoryBean.checkDaoConfig(MapperFactoryBean.java:83)
	at org.springframework.dao.support.DaoSupport.afterPropertiesSet(DaoSupport.java:44)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1853)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1790)
	... 35 common frames omitted
Caused by: java.lang.IllegalStateException: Type handler was null on parameter mapping for property 'args'. It was either not specified and/or could not be found for the javaType ([Ljava.lang.Object;) : jdbcType (null) combination.
	at org.apache.ibatis.mapping.ParameterMapping$Builder.validate(ParameterMapping.java:119)
	at org.apache.ibatis.mapping.ParameterMapping$Builder.build(ParameterMapping.java:104)
	at org.apache.ibatis.builder.SqlSourceBuilder$ParameterMappingTokenHandler.buildParameterMapping(SqlSourceBuilder.java:143)
	at org.apache.ibatis.builder.SqlSourceBuilder$ParameterMappingTokenHandler.handleToken(SqlSourceBuilder.java:87)
	at org.apache.ibatis.parsing.GenericTokenParser.parse(GenericTokenParser.java:77)
	at org.apache.ibatis.builder.SqlSourceBuilder.parse(SqlSourceBuilder.java:50)
	at org.apache.ibatis.scripting.defaults.RawSqlSource.<init>(RawSqlSource.java:46)
	at org.apache.ibatis.scripting.xmltags.XMLLanguageDriver.createSqlSource(XMLLanguageDriver.java:60)
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.buildSqlSourceFromStrings(MapperAnnotationBuilder.java:635)
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.buildSqlSource(MapperAnnotationBuilder.java:624)
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.lambda$parseStatement$2(MapperAnnotationBuilder.java:301)
	at java.util.Optional.ifPresent(Optional.java:159)
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.parseStatement(MapperAnnotationBuilder.java:300)
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.parse(MapperAnnotationBuilder.java:132)
	at org.apache.ibatis.binding.MapperRegistry.addMapper(MapperRegistry.java:72)
	at org.apache.ibatis.session.Configuration.addMapper(Configuration.java:819)
	at org.mybatis.spring.mapper.MapperFactoryBean.checkDaoConfig(MapperFactoryBean.java:80)
	... 38 common frames omitted

2020-09-15 14:00:14.558  INFO 16904 --- [restartedMain] com.chenxin.blog.BlogApplication         : Starting BlogApplication on LAPTOP-UGEIKVSJ with PID 16904 (D:\Program Files\idea-workaplace\blog\target\classes started by asus in D:\Program Files\idea-workaplace\blog)
2020-09-15 14:00:14.561 DEBUG 16904 --- [restartedMain] com.chenxin.blog.BlogApplication         : Running with Spring Boot v2.3.3.RELEASE, Spring v5.2.8.RELEASE
2020-09-15 14:00:14.561  INFO 16904 --- [restartedMain] com.chenxin.blog.BlogApplication         : The following profiles are active: dev
2020-09-15 14:00:14.619  INFO 16904 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-09-15 14:00:14.619  INFO 16904 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-09-15 14:00:15.204  INFO 16904 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-09-15 14:00:15.205  INFO 16904 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-09-15 14:00:15.237  INFO 16904 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 20ms. Found 0 Redis repository interfaces.
2020-09-15 14:00:15.828  INFO 16904 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-09-15 14:00:15.834  INFO 16904 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-09-15 14:00:15.835  INFO 16904 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.37]
2020-09-15 14:00:15.930  INFO 16904 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-09-15 14:00:15.930  INFO 16904 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1310 ms
2020-09-15 14:00:16.399 ERROR 16904 --- [restartedMain] o.m.spring.mapper.MapperFactoryBean      : Error while adding the mapper 'interface com.chenxin.blog.mapper.LogMapper' to configuration.

java.lang.IllegalStateException: Type handler was null on parameter mapping for property 'args'. It was either not specified and/or could not be found for the javaType ([Ljava.lang.Object;) : jdbcType (null) combination.
	at org.apache.ibatis.mapping.ParameterMapping$Builder.validate(ParameterMapping.java:119)
	at org.apache.ibatis.mapping.ParameterMapping$Builder.build(ParameterMapping.java:104)
	at org.apache.ibatis.builder.SqlSourceBuilder$ParameterMappingTokenHandler.buildParameterMapping(SqlSourceBuilder.java:143)
	at org.apache.ibatis.builder.SqlSourceBuilder$ParameterMappingTokenHandler.handleToken(SqlSourceBuilder.java:87)
	at org.apache.ibatis.parsing.GenericTokenParser.parse(GenericTokenParser.java:77)
	at org.apache.ibatis.builder.SqlSourceBuilder.parse(SqlSourceBuilder.java:50)
	at org.apache.ibatis.scripting.defaults.RawSqlSource.<init>(RawSqlSource.java:46)
	at org.apache.ibatis.scripting.xmltags.XMLLanguageDriver.createSqlSource(XMLLanguageDriver.java:60)
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.buildSqlSourceFromStrings(MapperAnnotationBuilder.java:635)
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.buildSqlSource(MapperAnnotationBuilder.java:624)
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.lambda$parseStatement$2(MapperAnnotationBuilder.java:301)
	at java.util.Optional.ifPresent(Optional.java:159)
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.parseStatement(MapperAnnotationBuilder.java:300)
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.parse(MapperAnnotationBuilder.java:132)
	at org.apache.ibatis.binding.MapperRegistry.addMapper(MapperRegistry.java:72)
	at org.apache.ibatis.session.Configuration.addMapper(Configuration.java:819)
	at org.mybatis.spring.mapper.MapperFactoryBean.checkDaoConfig(MapperFactoryBean.java:80)
	at org.springframework.dao.support.DaoSupport.afterPropertiesSet(DaoSupport.java:44)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1853)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1790)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1307)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1227)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:130)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1420)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:897)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:879)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:551)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:143)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.chenxin.blog.BlogApplication.main(BlogApplication.java:17)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)

2020-09-15 14:00:16.400  WARN 16904 --- [restartedMain] ConfigServletWebServerApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'logAspect': Unsatisfied dependency expressed through field 'logMapper'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'logMapper' defined in file [D:\Program Files\idea-workaplace\blog\target\classes\com\chenxin\blog\mapper\LogMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: java.lang.IllegalStateException: Type handler was null on parameter mapping for property 'args'. It was either not specified and/or could not be found for the javaType ([Ljava.lang.Object;) : jdbcType (null) combination.
2020-09-15 14:00:16.402  INFO 16904 --- [restartedMain] o.apache.catalina.core.StandardService   : Stopping service [Tomcat]
2020-09-15 14:00:16.416  INFO 16904 --- [restartedMain] ConditionEvaluationReportLoggingListener : 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-09-15 14:00:16.422 ERROR 16904 --- [restartedMain] o.s.boot.SpringApplication               : Application run failed

org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'logAspect': Unsatisfied dependency expressed through field 'logMapper'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'logMapper' defined in file [D:\Program Files\idea-workaplace\blog\target\classes\com\chenxin\blog\mapper\LogMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: java.lang.IllegalStateException: Type handler was null on parameter mapping for property 'args'. It was either not specified and/or could not be found for the javaType ([Ljava.lang.Object;) : jdbcType (null) combination.
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:643)
	at org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:130)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1420)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:897)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:879)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:551)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:143)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.chenxin.blog.BlogApplication.main(BlogApplication.java:17)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'logMapper' defined in file [D:\Program Files\idea-workaplace\blog\target\classes\com\chenxin\blog\mapper\LogMapper.class]: Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: java.lang.IllegalStateException: Type handler was null on parameter mapping for property 'args'. It was either not specified and/or could not be found for the javaType ([Ljava.lang.Object;) : jdbcType (null) combination.
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1794)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:276)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1307)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1227)
	at org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:640)
	... 25 common frames omitted
Caused by: java.lang.IllegalArgumentException: java.lang.IllegalStateException: Type handler was null on parameter mapping for property 'args'. It was either not specified and/or could not be found for the javaType ([Ljava.lang.Object;) : jdbcType (null) combination.
	at org.mybatis.spring.mapper.MapperFactoryBean.checkDaoConfig(MapperFactoryBean.java:83)
	at org.springframework.dao.support.DaoSupport.afterPropertiesSet(DaoSupport.java:44)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1853)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1790)
	... 35 common frames omitted
Caused by: java.lang.IllegalStateException: Type handler was null on parameter mapping for property 'args'. It was either not specified and/or could not be found for the javaType ([Ljava.lang.Object;) : jdbcType (null) combination.
	at org.apache.ibatis.mapping.ParameterMapping$Builder.validate(ParameterMapping.java:119)
	at org.apache.ibatis.mapping.ParameterMapping$Builder.build(ParameterMapping.java:104)
	at org.apache.ibatis.builder.SqlSourceBuilder$ParameterMappingTokenHandler.buildParameterMapping(SqlSourceBuilder.java:143)
	at org.apache.ibatis.builder.SqlSourceBuilder$ParameterMappingTokenHandler.handleToken(SqlSourceBuilder.java:87)
	at org.apache.ibatis.parsing.GenericTokenParser.parse(GenericTokenParser.java:77)
	at org.apache.ibatis.builder.SqlSourceBuilder.parse(SqlSourceBuilder.java:50)
	at org.apache.ibatis.scripting.defaults.RawSqlSource.<init>(RawSqlSource.java:46)
	at org.apache.ibatis.scripting.xmltags.XMLLanguageDriver.createSqlSource(XMLLanguageDriver.java:60)
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.buildSqlSourceFromStrings(MapperAnnotationBuilder.java:635)
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.buildSqlSource(MapperAnnotationBuilder.java:624)
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.lambda$parseStatement$2(MapperAnnotationBuilder.java:301)
	at java.util.Optional.ifPresent(Optional.java:159)
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.parseStatement(MapperAnnotationBuilder.java:300)
	at org.apache.ibatis.builder.annotation.MapperAnnotationBuilder.parse(MapperAnnotationBuilder.java:132)
	at org.apache.ibatis.binding.MapperRegistry.addMapper(MapperRegistry.java:72)
	at org.apache.ibatis.session.Configuration.addMapper(Configuration.java:819)
	at org.mybatis.spring.mapper.MapperFactoryBean.checkDaoConfig(MapperFactoryBean.java:80)
	... 38 common frames omitted

2020-09-15 14:10:17.137  INFO 21252 --- [restartedMain] com.chenxin.blog.BlogApplication         : Starting BlogApplication on LAPTOP-UGEIKVSJ with PID 21252 (D:\Program Files\idea-workaplace\blog\target\classes started by asus in D:\Program Files\idea-workaplace\blog)
2020-09-15 14:10:17.141 DEBUG 21252 --- [restartedMain] com.chenxin.blog.BlogApplication         : Running with Spring Boot v2.3.3.RELEASE, Spring v5.2.8.RELEASE
2020-09-15 14:10:17.141  INFO 21252 --- [restartedMain] com.chenxin.blog.BlogApplication         : The following profiles are active: dev
2020-09-15 14:10:17.204  INFO 21252 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-09-15 14:10:17.204  INFO 21252 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-09-15 14:10:17.779  INFO 21252 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-09-15 14:10:17.780  INFO 21252 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-09-15 14:10:17.811  INFO 21252 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 20ms. Found 0 Redis repository interfaces.
2020-09-15 14:10:18.421  INFO 21252 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-09-15 14:10:18.427  INFO 21252 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-09-15 14:10:18.428  INFO 21252 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.37]
2020-09-15 14:10:18.519  INFO 21252 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-09-15 14:10:18.520  INFO 21252 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1315 ms
2020-09-15 14:10:20.075  INFO 21252 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-09-15 14:10:20.224  INFO 21252 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-09-15 14:10:21.113  INFO 21252 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-09-15 14:10:21.170  INFO 21252 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-09-15 14:10:21.180  INFO 21252 --- [restartedMain] com.chenxin.blog.BlogApplication         : Started BlogApplication in 4.522 seconds (JVM running for 5.521)
2020-09-15 14:10:42.737  INFO 21252 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-09-15 14:10:42.737  INFO 21252 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-09-15 14:10:42.755  INFO 21252 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 18 ms
2020-09-15 14:10:42.814  INFO 21252 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.indexoage', args=[null, {}]}
2020-09-15 14:10:43.708  INFO 21252 --- [http-nio-8080-exec-1] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-09-15 14:10:43.802 DEBUG 21252 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByPaging_COUNT         : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0
2020-09-15 14:10:43.928 DEBUG 21252 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByPaging_COUNT         : ==> Parameters: 
2020-09-15 14:10:43.969 DEBUG 21252 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByPaging_COUNT         : <==      Total: 1
2020-09-15 14:10:43.972 DEBUG 21252 --- [http-nio-8080-exec-1] c.c.b.m.BlogMapper.findBlogByPaging      : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 LIMIT ?
2020-09-15 14:10:43.976 DEBUG 21252 --- [http-nio-8080-exec-1] c.c.b.m.BlogMapper.findBlogByPaging      : ==> Parameters: 3(Integer)
2020-09-15 14:10:43.984 DEBUG 21252 --- [http-nio-8080-exec-1] c.c.b.m.BlogMapper.findBlogByPaging      : <==      Total: 3
2020-09-15 14:10:44.017 DEBUG 21252 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC limit 0,6
2020-09-15 14:10:44.019 DEBUG 21252 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 14:10:44.023 DEBUG 21252 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 14:10:44.027 DEBUG 21252 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByExample  : ==>  Preparing: SELECT t.id, t.NAME, COUNT( bt.blog_id ) countBlog FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.isrecommend = 0 GROUP BY id ORDER BY countBlog DESC limit 0,10
2020-09-15 14:10:44.028 DEBUG 21252 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByExample  : ==> Parameters: 
2020-09-15 14:10:44.032 DEBUG 21252 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByExample  : <==      Total: 5
2020-09-15 14:10:44.035 DEBUG 21252 --- [http-nio-8080-exec-1] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,10
2020-09-15 14:10:44.036 DEBUG 21252 --- [http-nio-8080-exec-1] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 14:10:44.040 DEBUG 21252 --- [http-nio-8080-exec-1] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 5
2020-09-15 14:10:44.041  INFO 21252 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Return ------ /index
2020-09-15 14:10:44.041 DEBUG 21252 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?)
2020-09-15 14:10:44.045 DEBUG 21252 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: http://localhost:8080/(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.indexoage(String), null,{page=Page{count=true, pageNum=1, pageSize=3, startRow=0, endRow=3, total=5, pages=2, reasonable=false, pageSizeZero=false}, toptype=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], toptag=[Tag{id=1, name='mysql', Tag{id=6, name='mybaits', Tag{id=4, name='spring', Tag{id=2, name='大数据', Tag{id=8, name='python'], topblog=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=10, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=11, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=20, title='mysql数据库的查询拉', content='**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这是一篇好博客', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:27:27 CST 2019, updatetime=Thu Sep 05 09:44:20 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=24, title='JAVA是什么', content='##java是什么&sup3; &hearts;
虹口区我说的浓氨水', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='我is单词vhuiowdecvb', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 13 11:08:48 CST 2018, updatetime=Thu Sep 13 11:08:48 CST 2018, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), /index(String)
2020-09-15 14:10:44.061 ERROR 21252 --- [http-nio-8080-exec-1] druid.sql.Statement                      : {conn-10005, pstmt-20005} execute error. insert into log values(?,?,?,?,?)

java.sql.SQLException: Column count doesn't match value count at row 1
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:129)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:953)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:370)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3051)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3049)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:619)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3049)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3049)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:498)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy111.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:47)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy109.update(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:184)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)
	at com.sun.proxy.$Proxy75.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:271)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:62)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:152)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:85)
	at com.sun.proxy.$Proxy78.insertLog(Unknown Source)
	at com.chenxin.blog.aspect.LogAspect.doAtfertRturning(LogAspect.java:73)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:626)
	at org.springframework.aop.aspectj.AspectJAfterReturningAdvice.afterReturning(AspectJAfterReturningAdvice.java:66)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.aspectj.AspectJAfterAdvice.invoke(AspectJAfterAdvice.java:47)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at com.chenxin.blog.controller.IndexController$$EnhancerBySpringCGLIB$$b2542fdb.indexoage(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1589)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-09-15 14:10:44.139 ERROR 21252 --- [http-nio-8080-exec-1] com.chenxin.blog.handler.ErrorHandler    : Request URL : http://localhost:8080/ , Exception : {}

org.springframework.jdbc.BadSqlGrammarException: 
### Error updating database.  Cause: java.sql.SQLException: Column count doesn't match value count at row 1
### The error may exist in com/chenxin/blog/mapper/LogMapper.java (best guess)
### The error may involve com.chenxin.blog.mapper.LogMapper.insertLog-Inline
### The error occurred while setting parameters
### SQL: insert into log values(?,?,?,?,?)
### Cause: java.sql.SQLException: Column count doesn't match value count at row 1
; bad SQL grammar []; nested exception is java.sql.SQLException: Column count doesn't match value count at row 1
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:101)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:88)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:440)
	at com.sun.proxy.$Proxy75.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:271)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:62)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:152)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:85)
	at com.sun.proxy.$Proxy78.insertLog(Unknown Source)
	at com.chenxin.blog.aspect.LogAspect.doAtfertRturning(LogAspect.java:73)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:626)
	at org.springframework.aop.aspectj.AspectJAfterReturningAdvice.afterReturning(AspectJAfterReturningAdvice.java:66)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.aspectj.AspectJAfterAdvice.invoke(AspectJAfterAdvice.java:47)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at com.chenxin.blog.controller.IndexController$$EnhancerBySpringCGLIB$$b2542fdb.indexoage(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1589)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.sql.SQLException: Column count doesn't match value count at row 1
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:129)
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:97)
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:953)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:370)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3051)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3049)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:619)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3049)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3049)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:498)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy111.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:47)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy109.update(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:184)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)
	... 81 common frames omitted

2020-09-15 14:10:44.142  WARN 21252 --- [http-nio-8080-exec-1] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.jdbc.BadSqlGrammarException: 
### Error updating database.  Cause: java.sql.SQLException: Column count doesn't match value count at row 1
### The error may exist in com/chenxin/blog/mapper/LogMapper.java (best guess)
### The error may involve com.chenxin.blog.mapper.LogMapper.insertLog-Inline
### The error occurred while setting parameters
### SQL: insert into log values(?,?,?,?,?)
### Cause: java.sql.SQLException: Column count doesn't match value count at row 1
; bad SQL grammar []; nested exception is java.sql.SQLException: Column count doesn't match value count at row 1]
2020-09-15 14:13:26.904  INFO 21252 --- [Thread-14] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-09-15 14:13:27.028  INFO 21252 --- [Thread-14] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-09-15 14:13:27.281  INFO 21252 --- [restartedMain] com.chenxin.blog.BlogApplication         : Starting BlogApplication on LAPTOP-UGEIKVSJ with PID 21252 (D:\Program Files\idea-workaplace\blog\target\classes started by asus in D:\Program Files\idea-workaplace\blog)
2020-09-15 14:13:27.319 DEBUG 21252 --- [restartedMain] com.chenxin.blog.BlogApplication         : Running with Spring Boot v2.3.3.RELEASE, Spring v5.2.8.RELEASE
2020-09-15 14:13:27.319  INFO 21252 --- [restartedMain] com.chenxin.blog.BlogApplication         : The following profiles are active: dev
2020-09-15 14:13:27.578  INFO 21252 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-09-15 14:13:27.579  INFO 21252 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-09-15 14:13:27.589  INFO 21252 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 10ms. Found 0 Redis repository interfaces.
2020-09-15 14:13:27.804  INFO 21252 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-09-15 14:13:27.805  INFO 21252 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-09-15 14:13:27.805  INFO 21252 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.37]
2020-09-15 14:13:27.828  INFO 21252 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-09-15 14:13:27.829  INFO 21252 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 508 ms
2020-09-15 14:13:28.222  INFO 21252 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-09-15 14:13:28.272  INFO 21252 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-09-15 14:13:28.621  INFO 21252 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-09-15 14:13:28.633  INFO 21252 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-09-15 14:13:28.636  INFO 21252 --- [restartedMain] com.chenxin.blog.BlogApplication         : Started BlogApplication in 1.391 seconds (JVM running for 192.977)
2020-09-15 14:13:28.637  INFO 21252 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2020-09-15 14:13:29.329  INFO 21252 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-09-15 14:13:29.330  INFO 21252 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-09-15 14:13:29.338  INFO 21252 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 8 ms
2020-09-15 14:13:29.341  INFO 21252 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.indexoage', args=[null, {}]}
2020-09-15 14:13:29.414  INFO 21252 --- [http-nio-8080-exec-1] com.alibaba.druid.pool.DruidDataSource   : {dataSource-2} inited
2020-09-15 14:13:29.416 DEBUG 21252 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByPaging_COUNT         : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0
2020-09-15 14:13:29.418 DEBUG 21252 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByPaging_COUNT         : ==> Parameters: 
2020-09-15 14:13:29.422 DEBUG 21252 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByPaging_COUNT         : <==      Total: 1
2020-09-15 14:13:29.423 DEBUG 21252 --- [http-nio-8080-exec-1] c.c.b.m.BlogMapper.findBlogByPaging      : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 LIMIT ?
2020-09-15 14:13:29.424 DEBUG 21252 --- [http-nio-8080-exec-1] c.c.b.m.BlogMapper.findBlogByPaging      : ==> Parameters: 3(Integer)
2020-09-15 14:13:29.428 DEBUG 21252 --- [http-nio-8080-exec-1] c.c.b.m.BlogMapper.findBlogByPaging      : <==      Total: 3
2020-09-15 14:13:29.433 DEBUG 21252 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC limit 0,6
2020-09-15 14:13:29.434 DEBUG 21252 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 14:13:29.436 DEBUG 21252 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 14:13:29.439 DEBUG 21252 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByExample  : ==>  Preparing: SELECT t.id, t.NAME, COUNT( bt.blog_id ) countBlog FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.isrecommend = 0 GROUP BY id ORDER BY countBlog DESC limit 0,10
2020-09-15 14:13:29.440 DEBUG 21252 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByExample  : ==> Parameters: 
2020-09-15 14:13:29.445 DEBUG 21252 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByExample  : <==      Total: 5
2020-09-15 14:13:29.448 DEBUG 21252 --- [http-nio-8080-exec-1] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,10
2020-09-15 14:13:29.449 DEBUG 21252 --- [http-nio-8080-exec-1] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 14:13:29.452 DEBUG 21252 --- [http-nio-8080-exec-1] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 5
2020-09-15 14:13:29.452  INFO 21252 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Return ------ /index
2020-09-15 14:13:29.453 DEBUG 21252 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 14:13:29.455 DEBUG 21252 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.indexoage(String), null,{page=Page{count=true, pageNum=1, pageSize=3, startRow=0, endRow=3, total=5, pages=2, reasonable=false, pageSizeZero=false}, toptype=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], toptag=[Tag{id=1, name='mysql', Tag{id=6, name='mybaits', Tag{id=4, name='spring', Tag{id=2, name='大数据', Tag{id=8, name='python'], topblog=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=10, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=11, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=20, title='mysql数据库的查询拉', content='**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这是一篇好博客', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:27:27 CST 2019, updatetime=Thu Sep 05 09:44:20 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=24, title='JAVA是什么', content='##java是什么&sup3; &hearts;
虹口区我说的浓氨水', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='我is单词vhuiowdecvb', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 13 11:08:48 CST 2018, updatetime=Thu Sep 13 11:08:48 CST 2018, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), /index(String)
2020-09-15 14:13:29.512 ERROR 21252 --- [http-nio-8080-exec-1] druid.sql.Statement                      : {conn-110005, pstmt-120005} execute error. insert into log values(?,?,?,?,?,?)

com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'args' at row 1
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:104)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:953)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:370)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3051)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3049)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:619)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3049)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3049)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:498)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy111.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:47)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy109.update(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:184)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)
	at com.sun.proxy.$Proxy75.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:271)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:62)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:152)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:85)
	at com.sun.proxy.$Proxy113.insertLog(Unknown Source)
	at com.chenxin.blog.aspect.LogAspect.doAtfertRturning(LogAspect.java:73)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:626)
	at org.springframework.aop.aspectj.AspectJAfterReturningAdvice.afterReturning(AspectJAfterReturningAdvice.java:66)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.aspectj.AspectJAfterAdvice.invoke(AspectJAfterAdvice.java:47)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at com.chenxin.blog.controller.IndexController$$EnhancerBySpringCGLIB$$b2542fdb.indexoage(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1589)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-09-15 14:13:29.514 ERROR 21252 --- [http-nio-8080-exec-1] com.chenxin.blog.handler.ErrorHandler    : Request URL : http://localhost:8080/ , Exception : {}

org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'args' at row 1
### The error may exist in com/chenxin/blog/mapper/LogMapper.java (best guess)
### The error may involve com.chenxin.blog.mapper.LogMapper.insertLog-Inline
### The error occurred while setting parameters
### SQL: insert into log values(?,?,?,?,?,?)
### Cause: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'args' at row 1
; Data truncation: Data too long for column 'args' at row 1; nested exception is com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'args' at row 1
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:104)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:88)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:440)
	at com.sun.proxy.$Proxy75.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:271)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:62)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:152)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:85)
	at com.sun.proxy.$Proxy113.insertLog(Unknown Source)
	at com.chenxin.blog.aspect.LogAspect.doAtfertRturning(LogAspect.java:73)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:626)
	at org.springframework.aop.aspectj.AspectJAfterReturningAdvice.afterReturning(AspectJAfterReturningAdvice.java:66)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.aspectj.AspectJAfterAdvice.invoke(AspectJAfterAdvice.java:47)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at com.chenxin.blog.controller.IndexController$$EnhancerBySpringCGLIB$$b2542fdb.indexoage(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1589)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'args' at row 1
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:104)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:953)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:370)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3051)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3049)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:619)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3049)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3049)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:498)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy111.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:47)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy109.update(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:184)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)
	... 81 common frames omitted

2020-09-15 14:13:29.515  WARN 21252 --- [http-nio-8080-exec-1] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'args' at row 1
### The error may exist in com/chenxin/blog/mapper/LogMapper.java (best guess)
### The error may involve com.chenxin.blog.mapper.LogMapper.insertLog-Inline
### The error occurred while setting parameters
### SQL: insert into log values(?,?,?,?,?,?)
### Cause: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'args' at row 1
; Data truncation: Data too long for column 'args' at row 1; nested exception is com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'args' at row 1]
2020-09-15 14:13:35.924  INFO 21252 --- [http-nio-8080-exec-8] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.indexoage', args=[null, {}]}
2020-09-15 14:13:35.929 DEBUG 21252 --- [http-nio-8080-exec-8] c.c.b.m.B.findBlogByPaging_COUNT         : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0
2020-09-15 14:13:35.930 DEBUG 21252 --- [http-nio-8080-exec-8] c.c.b.m.B.findBlogByPaging_COUNT         : ==> Parameters: 
2020-09-15 14:13:35.932 DEBUG 21252 --- [http-nio-8080-exec-8] c.c.b.m.B.findBlogByPaging_COUNT         : <==      Total: 1
2020-09-15 14:13:35.933 DEBUG 21252 --- [http-nio-8080-exec-8] c.c.b.m.BlogMapper.findBlogByPaging      : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 LIMIT ?
2020-09-15 14:13:35.933 DEBUG 21252 --- [http-nio-8080-exec-8] c.c.b.m.BlogMapper.findBlogByPaging      : ==> Parameters: 3(Integer)
2020-09-15 14:13:35.938 DEBUG 21252 --- [http-nio-8080-exec-8] c.c.b.m.BlogMapper.findBlogByPaging      : <==      Total: 3
2020-09-15 14:13:35.939 DEBUG 21252 --- [http-nio-8080-exec-8] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC limit 0,6
2020-09-15 14:13:35.939 DEBUG 21252 --- [http-nio-8080-exec-8] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 14:13:35.940 DEBUG 21252 --- [http-nio-8080-exec-8] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 14:13:35.941 DEBUG 21252 --- [http-nio-8080-exec-8] c.c.blog.mapper.TagMapper.findByExample  : ==>  Preparing: SELECT t.id, t.NAME, COUNT( bt.blog_id ) countBlog FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.isrecommend = 0 GROUP BY id ORDER BY countBlog DESC limit 0,10
2020-09-15 14:13:35.941 DEBUG 21252 --- [http-nio-8080-exec-8] c.c.blog.mapper.TagMapper.findByExample  : ==> Parameters: 
2020-09-15 14:13:35.944 DEBUG 21252 --- [http-nio-8080-exec-8] c.c.blog.mapper.TagMapper.findByExample  : <==      Total: 5
2020-09-15 14:13:35.945 DEBUG 21252 --- [http-nio-8080-exec-8] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,10
2020-09-15 14:13:35.945 DEBUG 21252 --- [http-nio-8080-exec-8] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 14:13:35.949 DEBUG 21252 --- [http-nio-8080-exec-8] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 5
2020-09-15 14:13:35.949  INFO 21252 --- [http-nio-8080-exec-8] com.chenxin.blog.aspect.LogAspect        : Return ------ /index
2020-09-15 14:13:35.950 DEBUG 21252 --- [http-nio-8080-exec-8] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 14:13:35.951 DEBUG 21252 --- [http-nio-8080-exec-8] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.indexoage(String), null,{page=Page{count=true, pageNum=1, pageSize=3, startRow=0, endRow=3, total=5, pages=2, reasonable=false, pageSizeZero=false}, toptype=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], toptag=[Tag{id=1, name='mysql', Tag{id=6, name='mybaits', Tag{id=4, name='spring', Tag{id=2, name='大数据', Tag{id=8, name='python'], topblog=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=10, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=11, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=20, title='mysql数据库的查询拉', content='**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这是一篇好博客', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:27:27 CST 2019, updatetime=Thu Sep 05 09:44:20 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=24, title='JAVA是什么', content='##java是什么&sup3; &hearts;
虹口区我说的浓氨水', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='我is单词vhuiowdecvb', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 13 11:08:48 CST 2018, updatetime=Thu Sep 13 11:08:48 CST 2018, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), /index(String)
2020-09-15 14:13:35.955 ERROR 21252 --- [http-nio-8080-exec-8] druid.sql.Statement                      : {conn-110005, pstmt-120006} execute error. insert into log values(?,?,?,?,?,?)

com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'args' at row 1
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:104)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:953)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:370)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3051)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3049)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:619)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3049)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3049)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:498)
	at sun.reflect.GeneratedMethodAccessor93.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy111.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:47)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy109.update(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:184)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)
	at com.sun.proxy.$Proxy75.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:271)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:62)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:152)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:85)
	at com.sun.proxy.$Proxy113.insertLog(Unknown Source)
	at com.chenxin.blog.aspect.LogAspect.doAtfertRturning(LogAspect.java:73)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:626)
	at org.springframework.aop.aspectj.AspectJAfterReturningAdvice.afterReturning(AspectJAfterReturningAdvice.java:66)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.aspectj.AspectJAfterAdvice.invoke(AspectJAfterAdvice.java:47)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at com.chenxin.blog.controller.IndexController$$EnhancerBySpringCGLIB$$b2542fdb.indexoage(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1589)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-09-15 14:13:35.956 ERROR 21252 --- [http-nio-8080-exec-8] com.chenxin.blog.handler.ErrorHandler    : Request URL : http://localhost:8080/ , Exception : {}

org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'args' at row 1
### The error may exist in com/chenxin/blog/mapper/LogMapper.java (best guess)
### The error may involve com.chenxin.blog.mapper.LogMapper.insertLog-Inline
### The error occurred while setting parameters
### SQL: insert into log values(?,?,?,?,?,?)
### Cause: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'args' at row 1
; Data truncation: Data too long for column 'args' at row 1; nested exception is com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'args' at row 1
	at org.springframework.jdbc.support.SQLStateSQLExceptionTranslator.doTranslate(SQLStateSQLExceptionTranslator.java:104)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:72)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:81)
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:88)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:440)
	at com.sun.proxy.$Proxy75.insert(Unknown Source)
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:271)
	at org.apache.ibatis.binding.MapperMethod.execute(MapperMethod.java:62)
	at org.apache.ibatis.binding.MapperProxy$PlainMethodInvoker.invoke(MapperProxy.java:152)
	at org.apache.ibatis.binding.MapperProxy.invoke(MapperProxy.java:85)
	at com.sun.proxy.$Proxy113.insertLog(Unknown Source)
	at com.chenxin.blog.aspect.LogAspect.doAtfertRturning(LogAspect.java:73)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethodWithGivenArgs(AbstractAspectJAdvice.java:644)
	at org.springframework.aop.aspectj.AbstractAspectJAdvice.invokeAdviceMethod(AbstractAspectJAdvice.java:626)
	at org.springframework.aop.aspectj.AspectJAfterReturningAdvice.afterReturning(AspectJAfterReturningAdvice.java:66)
	at org.springframework.aop.framework.adapter.AfterReturningAdviceInterceptor.invoke(AfterReturningAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.aspectj.AspectJAfterAdvice.invoke(AspectJAfterAdvice.java:47)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:95)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at com.chenxin.blog.controller.IndexController$$EnhancerBySpringCGLIB$$b2542fdb.indexoage(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:105)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:878)
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:792)
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1040)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1589)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'args' at row 1
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:104)
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:953)
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:370)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3051)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3049)
	at com.alibaba.druid.wall.WallFilter.preparedStatement_execute(WallFilter.java:619)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3049)
	at com.alibaba.druid.filter.FilterEventAdapter.preparedStatement_execute(FilterEventAdapter.java:440)
	at com.alibaba.druid.filter.FilterChainImpl.preparedStatement_execute(FilterChainImpl.java:3049)
	at com.alibaba.druid.proxy.jdbc.PreparedStatementProxyImpl.execute(PreparedStatementProxyImpl.java:167)
	at com.alibaba.druid.pool.DruidPooledPreparedStatement.execute(DruidPooledPreparedStatement.java:498)
	at sun.reflect.GeneratedMethodAccessor93.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:59)
	at com.sun.proxy.$Proxy111.execute(Unknown Source)
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:47)
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:74)
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50)
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117)
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:63)
	at com.sun.proxy.$Proxy109.update(Unknown Source)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197)
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:184)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:426)
	... 81 common frames omitted

2020-09-15 14:13:35.957  WARN 21252 --- [http-nio-8080-exec-8] .m.m.a.ExceptionHandlerExceptionResolver : Resolved [org.springframework.dao.DataIntegrityViolationException: 
### Error updating database.  Cause: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'args' at row 1
### The error may exist in com/chenxin/blog/mapper/LogMapper.java (best guess)
### The error may involve com.chenxin.blog.mapper.LogMapper.insertLog-Inline
### The error occurred while setting parameters
### SQL: insert into log values(?,?,?,?,?,?)
### Cause: com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'args' at row 1
; Data truncation: Data too long for column 'args' at row 1; nested exception is com.mysql.cj.jdbc.exceptions.MysqlDataTruncation: Data truncation: Data too long for column 'args' at row 1]
2020-09-15 14:16:20.041  INFO 21252 --- [http-nio-8080-exec-2] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.indexoage', args=[null, {}]}
2020-09-15 14:16:20.088 DEBUG 21252 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByPaging_COUNT         : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0
2020-09-15 14:16:20.088 DEBUG 21252 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByPaging_COUNT         : ==> Parameters: 
2020-09-15 14:16:20.090 DEBUG 21252 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByPaging_COUNT         : <==      Total: 1
2020-09-15 14:16:20.091 DEBUG 21252 --- [http-nio-8080-exec-2] c.c.b.m.BlogMapper.findBlogByPaging      : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 LIMIT ?
2020-09-15 14:16:20.091 DEBUG 21252 --- [http-nio-8080-exec-2] c.c.b.m.BlogMapper.findBlogByPaging      : ==> Parameters: 3(Integer)
2020-09-15 14:16:20.094 DEBUG 21252 --- [http-nio-8080-exec-2] c.c.b.m.BlogMapper.findBlogByPaging      : <==      Total: 3
2020-09-15 14:16:20.095 DEBUG 21252 --- [http-nio-8080-exec-2] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC limit 0,6
2020-09-15 14:16:20.095 DEBUG 21252 --- [http-nio-8080-exec-2] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 14:16:20.097 DEBUG 21252 --- [http-nio-8080-exec-2] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 14:16:20.098 DEBUG 21252 --- [http-nio-8080-exec-2] c.c.blog.mapper.TagMapper.findByExample  : ==>  Preparing: SELECT t.id, t.NAME, COUNT( bt.blog_id ) countBlog FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.isrecommend = 0 GROUP BY id ORDER BY countBlog DESC limit 0,10
2020-09-15 14:16:20.098 DEBUG 21252 --- [http-nio-8080-exec-2] c.c.blog.mapper.TagMapper.findByExample  : ==> Parameters: 
2020-09-15 14:16:20.099 DEBUG 21252 --- [http-nio-8080-exec-2] c.c.blog.mapper.TagMapper.findByExample  : <==      Total: 5
2020-09-15 14:16:20.100 DEBUG 21252 --- [http-nio-8080-exec-2] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,10
2020-09-15 14:16:20.100 DEBUG 21252 --- [http-nio-8080-exec-2] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 14:16:20.103 DEBUG 21252 --- [http-nio-8080-exec-2] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 5
2020-09-15 14:16:20.104  INFO 21252 --- [http-nio-8080-exec-2] com.chenxin.blog.aspect.LogAspect        : Return ------ /index
2020-09-15 14:16:20.104 DEBUG 21252 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 14:16:20.105 DEBUG 21252 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.indexoage(String), null,{page=Page{count=true, pageNum=1, pageSize=3, startRow=0, endRow=3, total=5, pages=2, reasonable=false, pageSizeZero=false}, toptype=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], toptag=[Tag{id=1, name='mysql', Tag{id=6, name='mybaits', Tag{id=4, name='spring', Tag{id=2, name='大数据', Tag{id=8, name='python'], topblog=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=10, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=11, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=20, title='mysql数据库的查询拉', content='**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这是一篇好博客', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:27:27 CST 2019, updatetime=Thu Sep 05 09:44:20 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=24, title='JAVA是什么', content='##java是什么&sup3; &hearts;
虹口区我说的浓氨水', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='我is单词vhuiowdecvb', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 13 11:08:48 CST 2018, updatetime=Thu Sep 13 11:08:48 CST 2018, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), /index(String)
2020-09-15 14:16:20.217 DEBUG 21252 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 14:17:14.253  INFO 21252 --- [http-nio-8080-exec-9] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/types', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.TypeController.typelist', args=[null, null, {}]}
2020-09-15 14:17:14.256 DEBUG 21252 --- [http-nio-8080-exec-9] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC
2020-09-15 14:17:14.259 DEBUG 21252 --- [http-nio-8080-exec-9] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 14:17:14.261 DEBUG 21252 --- [http-nio-8080-exec-9] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 14:17:14.557 DEBUG 21252 --- [http-nio-8080-exec-9] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0 AND b.type_id = ?
2020-09-15 14:17:14.568 DEBUG 21252 --- [http-nio-8080-exec-9] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==> Parameters: 2(Long)
2020-09-15 14:17:14.575 DEBUG 21252 --- [http-nio-8080-exec-9] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : <==      Total: 1
2020-09-15 14:17:14.576 DEBUG 21252 --- [http-nio-8080-exec-9] c.c.b.m.B.findBlogByTypeIdAndPage        : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 and b.type_id=? ORDER BY b.issue asc LIMIT ?
2020-09-15 14:17:14.577 DEBUG 21252 --- [http-nio-8080-exec-9] c.c.b.m.B.findBlogByTypeIdAndPage        : ==> Parameters: 2(Long), 3(Integer)
2020-09-15 14:17:14.580 DEBUG 21252 --- [http-nio-8080-exec-9] c.c.b.m.B.findBlogByTypeIdAndPage        : <==      Total: 3
2020-09-15 14:17:14.580  INFO 21252 --- [http-nio-8080-exec-9] com.chenxin.blog.aspect.LogAspect        : Return ------ types
2020-09-15 14:17:14.580 DEBUG 21252 --- [http-nio-8080-exec-9] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 14:17:14.581 DEBUG 21252 --- [http-nio-8080-exec-9] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/types(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.TypeController.typelist(String), null,null,{types=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], page=Page{count=true, pageNum=1, pageSize=3, startRow=0, endRow=3, total=4, pages=2, reasonable=false, pageSizeZero=false}}(String), types(String)
2020-09-15 14:17:14.643 DEBUG 21252 --- [http-nio-8080-exec-9] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 14:17:24.581  INFO 21252 --- [http-nio-8080-exec-7] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/tags', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.TagController.typelist', args=[null, {}, null]}
2020-09-15 14:17:24.583 DEBUG 21252 --- [http-nio-8080-exec-7] c.c.blog.mapper.TagMapper.findByExample  : ==>  Preparing: SELECT t.id, t.NAME, COUNT( bt.blog_id ) countBlog FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.isrecommend = 0 GROUP BY id ORDER BY countBlog DESC
2020-09-15 14:17:24.584 DEBUG 21252 --- [http-nio-8080-exec-7] c.c.blog.mapper.TagMapper.findByExample  : ==> Parameters: 
2020-09-15 14:17:24.587 DEBUG 21252 --- [http-nio-8080-exec-7] c.c.blog.mapper.TagMapper.findByExample  : <==      Total: 5
2020-09-15 14:17:24.589 DEBUG 21252 --- [http-nio-8080-exec-7] c.c.b.m.B.findBlogByTagIdAndPage_COUNT   : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_blog_tag bt ON b.id = bt.blog_id LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_tag t ON bt.tag_id = t.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE t.id = ? AND b.isrecommend = 0
2020-09-15 14:17:24.590 DEBUG 21252 --- [http-nio-8080-exec-7] c.c.b.m.B.findBlogByTagIdAndPage_COUNT   : ==> Parameters: 1(Long)
2020-09-15 14:17:24.591 DEBUG 21252 --- [http-nio-8080-exec-7] c.c.b.m.B.findBlogByTagIdAndPage_COUNT   : <==      Total: 1
2020-09-15 14:17:24.592 DEBUG 21252 --- [http-nio-8080-exec-7] c.c.b.m.B.findBlogByTagIdAndPage         : ==>  Preparing: SELECT b.id,b.title,b.content,b.firstPicture,b.flag,b.description,b.viewcount,b.isadmire,b.iscopyright,b.iscomment,b.isrecommend,b.issue, b.createtime,b.updatetime,b.user_id,b.type_id,y.id y_id,y.NAME y_name,u.id u_id,u.petname,u.username,u.PASSWORD,u.mail, u.type,u.headportrait u_headportrait,u.createtime u_createtime,u.updatetime u_updatetime FROM cx_blog b LEFT JOIN cx_blog_tag bt ON b.id = bt.blog_id LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_tag t ON bt.tag_id = t.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE t.id=? and b.isrecommend=0 ORDER BY b.issue asc LIMIT ?
2020-09-15 14:17:24.593 DEBUG 21252 --- [http-nio-8080-exec-7] c.c.b.m.B.findBlogByTagIdAndPage         : ==> Parameters: 1(Long), 3(Integer)
2020-09-15 14:17:24.596 DEBUG 21252 --- [http-nio-8080-exec-7] c.c.b.m.B.findBlogByTagIdAndPage         : <==      Total: 3
2020-09-15 14:17:24.596 DEBUG 21252 --- [http-nio-8080-exec-7] c.c.blog.mapper.TagMapper.findByBlogId   : ==>  Preparing: SELECT t.id, t.NAME FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.id=?
2020-09-15 14:17:24.597 DEBUG 21252 --- [http-nio-8080-exec-7] c.c.blog.mapper.TagMapper.findByBlogId   : ==> Parameters: 21(Long)
2020-09-15 14:17:24.598 DEBUG 21252 --- [http-nio-8080-exec-7] c.c.blog.mapper.TagMapper.findByBlogId   : <==      Total: 3
2020-09-15 14:17:24.599 DEBUG 21252 --- [http-nio-8080-exec-7] c.c.blog.mapper.TagMapper.findByBlogId   : ==>  Preparing: SELECT t.id, t.NAME FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.id=?
2020-09-15 14:17:24.599 DEBUG 21252 --- [http-nio-8080-exec-7] c.c.blog.mapper.TagMapper.findByBlogId   : ==> Parameters: 19(Long)
2020-09-15 14:17:24.600 DEBUG 21252 --- [http-nio-8080-exec-7] c.c.blog.mapper.TagMapper.findByBlogId   : <==      Total: 2
2020-09-15 14:17:24.600 DEBUG 21252 --- [http-nio-8080-exec-7] c.c.blog.mapper.TagMapper.findByBlogId   : ==>  Preparing: SELECT t.id, t.NAME FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.id=?
2020-09-15 14:17:24.601 DEBUG 21252 --- [http-nio-8080-exec-7] c.c.blog.mapper.TagMapper.findByBlogId   : ==> Parameters: 20(Long)
2020-09-15 14:17:24.602 DEBUG 21252 --- [http-nio-8080-exec-7] c.c.blog.mapper.TagMapper.findByBlogId   : <==      Total: 3
2020-09-15 14:17:24.603  INFO 21252 --- [http-nio-8080-exec-7] com.chenxin.blog.aspect.LogAspect        : Return ------ tags
2020-09-15 14:17:24.603 DEBUG 21252 --- [http-nio-8080-exec-7] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 14:17:24.603 DEBUG 21252 --- [http-nio-8080-exec-7] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/tags(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.TagController.typelist(String), null,{tags=[Tag{id=1, name='mysql', Tag{id=6, name='mybaits', Tag{id=4, name='spring', Tag{id=2, name='大数据', Tag{id=8, name='python'], page=Page{count=true, pageNum=1, pageSize=3, startRow=0, endRow=3, total=4, pages=2, reasonable=false, pageSizeZero=false}},null(String), tags(String)
2020-09-15 14:17:24.958 DEBUG 21252 --- [http-nio-8080-exec-7] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 14:17:28.820  INFO 21252 --- [http-nio-8080-exec-4] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/archives', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.ArchivesController.archives', args=[{}]}
2020-09-15 14:17:28.823 DEBUG 21252 --- [http-nio-8080-exec-4] c.c.b.mapper.BlogMapper.countByExample   : ==>  Preparing: select count(*) from cx_blog
2020-09-15 14:17:28.824 DEBUG 21252 --- [http-nio-8080-exec-4] c.c.b.mapper.BlogMapper.countByExample   : ==> Parameters: 
2020-09-15 14:17:29.146 DEBUG 21252 --- [http-nio-8080-exec-4] c.c.b.mapper.BlogMapper.countByExample   : <==      Total: 1
2020-09-15 14:17:29.147 DEBUG 21252 --- [http-nio-8080-exec-4] c.c.blog.mapper.BlogMapper.findYear      : ==>  Preparing: SELECT DATE_FORMAT( b.updatetime, '%Y' ) YEAR FROM cx_blog b GROUP BY YEAR ORDER BY YEAR DESC
2020-09-15 14:17:29.169 DEBUG 21252 --- [http-nio-8080-exec-4] c.c.blog.mapper.BlogMapper.findYear      : ==> Parameters: 
2020-09-15 14:17:29.197 DEBUG 21252 --- [http-nio-8080-exec-4] c.c.blog.mapper.BlogMapper.findYear      : <==      Total: 3
2020-09-15 14:17:29.197 DEBUG 21252 --- [http-nio-8080-exec-4] c.c.b.mapper.BlogMapper.findBlogByYear   : ==>  Preparing: SELECT b.id,b.title,b.content,b.firstPicture,b.flag,b.description,b.viewcount,b.isadmire,b.iscopyright,b.iscomment,b.isrecommend,b.issue, b.createtime,b.updatetime,b.user_id,b.type_id FROM cx_blog b WHERE DATE_FORMAT(b.updatetime,'%Y')=?
2020-09-15 14:17:29.198 DEBUG 21252 --- [http-nio-8080-exec-4] c.c.b.mapper.BlogMapper.findBlogByYear   : ==> Parameters: 2020(String)
2020-09-15 14:17:29.202 DEBUG 21252 --- [http-nio-8080-exec-4] c.c.b.mapper.BlogMapper.findBlogByYear   : <==      Total: 2
2020-09-15 14:17:29.203 DEBUG 21252 --- [http-nio-8080-exec-4] c.c.b.mapper.BlogMapper.findBlogByYear   : ==>  Preparing: SELECT b.id,b.title,b.content,b.firstPicture,b.flag,b.description,b.viewcount,b.isadmire,b.iscopyright,b.iscomment,b.isrecommend,b.issue, b.createtime,b.updatetime,b.user_id,b.type_id FROM cx_blog b WHERE DATE_FORMAT(b.updatetime,'%Y')=?
2020-09-15 14:17:29.203 DEBUG 21252 --- [http-nio-8080-exec-4] c.c.b.mapper.BlogMapper.findBlogByYear   : ==> Parameters: 2019(String)
2020-09-15 14:17:29.204 DEBUG 21252 --- [http-nio-8080-exec-4] c.c.b.mapper.BlogMapper.findBlogByYear   : <==      Total: 2
2020-09-15 14:17:29.205 DEBUG 21252 --- [http-nio-8080-exec-4] c.c.b.mapper.BlogMapper.findBlogByYear   : ==>  Preparing: SELECT b.id,b.title,b.content,b.firstPicture,b.flag,b.description,b.viewcount,b.isadmire,b.iscopyright,b.iscomment,b.isrecommend,b.issue, b.createtime,b.updatetime,b.user_id,b.type_id FROM cx_blog b WHERE DATE_FORMAT(b.updatetime,'%Y')=?
2020-09-15 14:17:29.205 DEBUG 21252 --- [http-nio-8080-exec-4] c.c.b.mapper.BlogMapper.findBlogByYear   : ==> Parameters: 2018(String)
2020-09-15 14:17:29.206 DEBUG 21252 --- [http-nio-8080-exec-4] c.c.b.mapper.BlogMapper.findBlogByYear   : <==      Total: 1
2020-09-15 14:17:29.206  INFO 21252 --- [http-nio-8080-exec-4] com.chenxin.blog.aspect.LogAspect        : Return ------ archives
2020-09-15 14:17:29.206 DEBUG 21252 --- [http-nio-8080-exec-4] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 14:17:29.207 DEBUG 21252 --- [http-nio-8080-exec-4] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/archives(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.ArchivesController.archives(String), {blogCount=5, blogs={2020=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=10, isadmire=0, iscopyright=0, isrecommend=0, iscomment=1, issue=1, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=null, typeId=null, user=null, type=null, tagsId='null', comments=[Comment{id=19, petname='null', mail='null', headportrait='null', matter='null', createtime=null, blogId=null, blog=null, topId=null, top=null, bottom=[]}], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=0, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=null, typeId=null, user=null, type=null, tagsId='null', comments=[Comment{id=22, petname='null', mail='null', headportrait='null', matter='null', createtime=null, blogId=null, blog=null, topId=null, top=null, bottom=[]}], tags=[]}], 2019=[Blog{id=20, title='mysql数据库的查询拉', content='**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这是一篇好博客', viewcount=0, isadmire=0, iscopyright=0, isrecommend=0, iscomment=0, issue=1, createtime=Thu Sep 05 09:27:27 CST 2019, updatetime=Thu Sep 05 09:44:20 CST 2019, userId=null, typeId=null, user=null, type=null, tagsId='null', comments=[Comment{id=20, petname='null', mail='null', headportrait='null', matter='null', createtime=null, blogId=null, blog=null, topId=null, top=null, bottom=[]}], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=11, isadmire=0, iscopyright=0, isrecommend=0, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=null, typeId=null, user=null, type=null, tagsId='null', comments=[Comment{id=21, petname='null', mail='null', headportrait='null', matter='null', createtime=null, blogId=null, blog=null, topId=null, top=null, bottom=[]}], tags=[]}], 2018=[Blog{id=24, title='JAVA是什么', content='##java是什么&sup3; &hearts;
虹口区我说的浓氨水', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='我is单词vhuiowdecvb', viewcount=0, isadmire=0, iscopyright=0, isrecommend=0, iscomment=0, issue=1, createtime=Thu Sep 13 11:08:48 CST 2018, updatetime=Thu Sep 13 11:08:48 CST 2018, userId=null, typeId=null, user=null, type=null, tagsId='null', comments=[Comment{id=24, petname='null', mail='null', headportrait='null', matter='null', createtime=null, blogId=null, blog=null, topId=null, top=null, bottom=[]}], tags=[]}]}}(String), archives(String)
2020-09-15 14:17:29.348 DEBUG 21252 --- [http-nio-8080-exec-4] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 14:17:31.975  INFO 21252 --- [http-nio-8080-exec-6] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/about', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.AboutController.about', args=[{}]}
2020-09-15 14:17:31.975  INFO 21252 --- [http-nio-8080-exec-6] com.chenxin.blog.aspect.LogAspect        : Return ------ about
2020-09-15 14:17:31.975 DEBUG 21252 --- [http-nio-8080-exec-6] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 14:17:31.976 DEBUG 21252 --- [http-nio-8080-exec-6] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/about(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.AboutController.about(String), {about=About{petname='程鑫', intro_1='一个独立开发者，折腾在 0 和 1 世界的大叔；一个终身学习者，誓将学习无限循环. 希望结识可以共同成长的小伙伴.', intro_2='热爱编程，喜欢折腾，正在探索高效学习编程技术的方法...', loves=[篮球, 编程, 跑步, 王者], skill=[java, javaScript, Node, mysql, spring, Redis, Linux]}}(String), about(String)
2020-09-15 14:17:32.053 DEBUG 21252 --- [http-nio-8080-exec-6] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 14:23:38.051  INFO 21252 --- [Thread-21] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-09-15 14:23:38.059  INFO 21252 --- [Thread-21] com.alibaba.druid.pool.DruidDataSource   : {dataSource-2} closed
2020-09-15 14:23:38.321  INFO 21252 --- [restartedMain] com.chenxin.blog.BlogApplication         : Starting BlogApplication on LAPTOP-UGEIKVSJ with PID 21252 (D:\Program Files\idea-workaplace\blog\target\classes started by asus in D:\Program Files\idea-workaplace\blog)
2020-09-15 14:23:38.321 DEBUG 21252 --- [restartedMain] com.chenxin.blog.BlogApplication         : Running with Spring Boot v2.3.3.RELEASE, Spring v5.2.8.RELEASE
2020-09-15 14:23:38.321  INFO 21252 --- [restartedMain] com.chenxin.blog.BlogApplication         : The following profiles are active: dev
2020-09-15 14:23:38.759  INFO 21252 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-09-15 14:23:38.759  INFO 21252 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-09-15 14:23:38.770  INFO 21252 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 10ms. Found 0 Redis repository interfaces.
2020-09-15 14:23:38.929  INFO 21252 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-09-15 14:23:38.929  INFO 21252 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-09-15 14:23:38.929  INFO 21252 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.37]
2020-09-15 14:23:38.989  INFO 21252 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-09-15 14:23:38.989  INFO 21252 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 664 ms
2020-09-15 14:23:39.603  WARN 21252 --- [restartedMain] ConfigServletWebServerApplicationContext : Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'aboutController': Unsatisfied dependency expressed through field 'aboutService'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name 'aboutService': Unsatisfied dependency expressed through field 'about'; nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type 'com.chenxin.blog.entity.About' available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}
2020-09-15 14:23:39.603  INFO 21252 --- [restartedMain] o.apache.catalina.core.StandardService   : Stopping service [Tomcat]
2020-09-15 14:23:39.608  INFO 21252 --- [restartedMain] ConditionEvaluationReportLoggingListener : 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-09-15 14:23:39.987 ERROR 21252 --- [restartedMain] o.s.b.d.LoggingFailureAnalysisReporter   : 

***************************
APPLICATION FAILED TO START
***************************

Description:

Field about in com.chenxin.blog.service.AboutService required a bean of type 'com.chenxin.blog.entity.About' that could not be found.

The injection point has the following annotations:
	- @org.springframework.beans.factory.annotation.Autowired(required=true)


Action:

Consider defining a bean of type 'com.chenxin.blog.entity.About' in your configuration.

2020-09-15 14:55:33.086  INFO 4320 --- [restartedMain] com.chenxin.blog.BlogApplication         : Starting BlogApplication on LAPTOP-UGEIKVSJ with PID 4320 (D:\Program Files\idea-workaplace\blog\target\classes started by asus in D:\Program Files\idea-workaplace\blog)
2020-09-15 14:55:33.098 DEBUG 4320 --- [restartedMain] com.chenxin.blog.BlogApplication         : Running with Spring Boot v2.3.3.RELEASE, Spring v5.2.8.RELEASE
2020-09-15 14:55:33.101  INFO 4320 --- [restartedMain] com.chenxin.blog.BlogApplication         : The following profiles are active: dev
2020-09-15 14:55:33.199  INFO 4320 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-09-15 14:55:33.200  INFO 4320 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-09-15 14:55:34.557  INFO 4320 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-09-15 14:55:34.559  INFO 4320 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-09-15 14:55:34.624  INFO 4320 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 27ms. Found 0 Redis repository interfaces.
2020-09-15 14:55:35.660  INFO 4320 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-09-15 14:55:35.667  INFO 4320 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-09-15 14:55:35.668  INFO 4320 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.37]
2020-09-15 14:55:35.756  INFO 4320 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-09-15 14:55:35.756  INFO 4320 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 2556 ms
2020-09-15 14:55:37.315  INFO 4320 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-09-15 14:55:37.429  INFO 4320 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-09-15 14:55:38.309  INFO 4320 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-09-15 14:55:38.369  INFO 4320 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-09-15 14:55:38.377  INFO 4320 --- [restartedMain] com.chenxin.blog.BlogApplication         : Started BlogApplication in 6.572 seconds (JVM running for 8.233)
2020-09-15 14:55:47.930  INFO 4320 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-09-15 14:55:47.931  INFO 4320 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-09-15 14:55:47.949  INFO 4320 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 18 ms
2020-09-15 14:55:48.007  INFO 4320 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/tags', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.TagController.typelist', args=[null, {}, null]}
2020-09-15 14:55:48.963  INFO 4320 --- [http-nio-8080-exec-1] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-09-15 14:55:48.966 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByExample  : ==>  Preparing: SELECT t.id, t.NAME, COUNT( bt.blog_id ) countBlog FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.isrecommend = 0 GROUP BY id ORDER BY countBlog DESC
2020-09-15 14:55:49.103 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByExample  : ==> Parameters: 
2020-09-15 14:55:49.174 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByExample  : <==      Total: 5
2020-09-15 14:55:49.280 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTagIdAndPage_COUNT   : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_blog_tag bt ON b.id = bt.blog_id LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_tag t ON bt.tag_id = t.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE t.id = ? AND b.isrecommend = 0
2020-09-15 14:55:49.282 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTagIdAndPage_COUNT   : ==> Parameters: 1(Long)
2020-09-15 14:55:49.307 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTagIdAndPage_COUNT   : <==      Total: 1
2020-09-15 14:55:49.310 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTagIdAndPage         : ==>  Preparing: SELECT b.id,b.title,b.content,b.firstPicture,b.flag,b.description,b.viewcount,b.isadmire,b.iscopyright,b.iscomment,b.isrecommend,b.issue, b.createtime,b.updatetime,b.user_id,b.type_id,y.id y_id,y.NAME y_name,u.id u_id,u.petname,u.username,u.PASSWORD,u.mail, u.type,u.headportrait u_headportrait,u.createtime u_createtime,u.updatetime u_updatetime FROM cx_blog b LEFT JOIN cx_blog_tag bt ON b.id = bt.blog_id LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_tag t ON bt.tag_id = t.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE t.id=? and b.isrecommend=0 ORDER BY b.issue asc LIMIT ?
2020-09-15 14:55:49.323 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTagIdAndPage         : ==> Parameters: 1(Long), 10(Integer)
2020-09-15 14:55:49.332 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTagIdAndPage         : <==      Total: 4
2020-09-15 14:55:49.333 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByBlogId   : ==>  Preparing: SELECT t.id, t.NAME FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.id=?
2020-09-15 14:55:49.334 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByBlogId   : ==> Parameters: 21(Long)
2020-09-15 14:55:49.336 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByBlogId   : <==      Total: 3
2020-09-15 14:55:49.336 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByBlogId   : ==>  Preparing: SELECT t.id, t.NAME FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.id=?
2020-09-15 14:55:49.336 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByBlogId   : ==> Parameters: 19(Long)
2020-09-15 14:55:49.337 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByBlogId   : <==      Total: 2
2020-09-15 14:55:49.338 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByBlogId   : ==>  Preparing: SELECT t.id, t.NAME FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.id=?
2020-09-15 14:55:49.338 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByBlogId   : ==> Parameters: 20(Long)
2020-09-15 14:55:49.340 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByBlogId   : <==      Total: 3
2020-09-15 14:55:49.341 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByBlogId   : ==>  Preparing: SELECT t.id, t.NAME FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.id=?
2020-09-15 14:55:49.341 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByBlogId   : ==> Parameters: 24(Long)
2020-09-15 14:55:49.343 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByBlogId   : <==      Total: 3
2020-09-15 14:55:49.343  INFO 4320 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Return ------ tags
2020-09-15 14:55:49.344 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 14:55:49.353 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/tags(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.TagController.typelist(String), null,{tags=[Tag{id=1, name='mysql', Tag{id=6, name='mybaits', Tag{id=4, name='spring', Tag{id=2, name='大数据', Tag{id=8, name='python'], page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=4, pages=1, reasonable=false, pageSizeZero=false}},null(String), tags(String)
2020-09-15 14:55:49.428 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 14:55:56.236  INFO 4320 --- [http-nio-8080-exec-5] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/types', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.TypeController.typelist', args=[null, null, {}]}
2020-09-15 14:55:56.247 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC
2020-09-15 14:55:56.249 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 14:55:56.252 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 14:55:56.257 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0 AND b.type_id = ?
2020-09-15 14:55:56.259 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==> Parameters: 2(Long)
2020-09-15 14:55:56.261 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : <==      Total: 1
2020-09-15 14:55:56.263 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.b.m.B.findBlogByTypeIdAndPage        : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 and b.type_id=? ORDER BY b.issue asc LIMIT ?
2020-09-15 14:55:56.265 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.b.m.B.findBlogByTypeIdAndPage        : ==> Parameters: 2(Long), 10(Integer)
2020-09-15 14:55:56.271 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.b.m.B.findBlogByTypeIdAndPage        : <==      Total: 4
2020-09-15 14:55:56.272  INFO 4320 --- [http-nio-8080-exec-5] com.chenxin.blog.aspect.LogAspect        : Return ------ types
2020-09-15 14:55:56.272 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 14:55:56.273 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/types(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.TypeController.typelist(String), null,null,{types=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=4, pages=1, reasonable=false, pageSizeZero=false}}(String), types(String)
2020-09-15 14:55:56.379 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 14:56:02.228  INFO 4320 --- [http-nio-8080-exec-8] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/types/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.TypeController.bloglist', args=[null, 1, {}]}
2020-09-15 14:56:02.232 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0 AND b.type_id = ?
2020-09-15 14:56:02.232 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==> Parameters: 1(Long)
2020-09-15 14:56:02.241 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : <==      Total: 1
2020-09-15 14:56:02.242 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.b.m.B.findBlogByTypeIdAndPage        : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 and b.type_id=? ORDER BY b.issue asc LIMIT ?
2020-09-15 14:56:02.242 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.b.m.B.findBlogByTypeIdAndPage        : ==> Parameters: 1(Long), 10(Integer)
2020-09-15 14:56:02.245 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.b.m.B.findBlogByTypeIdAndPage        : <==      Total: 1
2020-09-15 14:56:02.245  INFO 4320 --- [http-nio-8080-exec-8] com.chenxin.blog.aspect.LogAspect        : Return ------ /types :: bloglist
2020-09-15 14:56:02.245 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 14:56:02.246 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/types/blogs(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.TypeController.bloglist(String), null,1,{page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=1, pages=1, reasonable=false, pageSizeZero=false}}(String), /types :: bloglist(String)
2020-09-15 14:56:02.362 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 14:56:02.450 ERROR 4320 --- [http-nio-8080-exec-8] org.thymeleaf.TemplateEngine             : [THYMELEAF][http-nio-8080-exec-8] Exception processing template "/types::[bloglist]": An error happened during template parsing (template: "class path resource [templates//types.html]")

org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates//types.html]")
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:241)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1589)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.attoparser.ParseException: Exception evaluating SpringEL expression: "#arrays.length(types)" (template: "/types" - line 26, col 71)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:393)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	... 51 common frames omitted
Caused by: org.thymeleaf.exceptions.TemplateProcessingException: Exception evaluating SpringEL expression: "#arrays.length(types)" (template: "/types" - line 26, col 71)
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:290)
	at org.thymeleaf.standard.expression.VariableExpression.executeVariableExpression(VariableExpression.java:166)
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:66)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:109)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138)
	at org.thymeleaf.standard.processor.AbstractStandardExpressionAttributeTagProcessor.doProcess(AbstractStandardExpressionAttributeTagProcessor.java:144)
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74)
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95)
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633)
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleOpenElement(ProcessorTemplateHandler.java:1314)
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleOpenElementEnd(TemplateHandlerAdapterMarkupHandler.java:304)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:278)
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleOpenElementEnd(OutputExpressionInlinePreProcessorHandler.java:186)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:124)
	at org.attoparser.select.BlockSelectorMarkupHandler.handleOpenElementEnd(BlockSelectorMarkupHandler.java:996)
	at org.attoparser.HtmlElement.handleOpenElementEnd(HtmlElement.java:109)
	at org.attoparser.HtmlMarkupHandler.handleOpenElementEnd(HtmlMarkupHandler.java:297)
	at org.attoparser.MarkupEventProcessorHandler.handleOpenElementEnd(MarkupEventProcessorHandler.java:402)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:159)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	... 53 common frames omitted
Caused by: java.lang.IllegalArgumentException: Cannot get array length of null
	at org.thymeleaf.util.Validate.notNull(Validate.java:37)
	at org.thymeleaf.util.ArrayUtils.length(ArrayUtils.java:72)
	at org.thymeleaf.expression.Arrays.length(Arrays.java:74)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.expression.spel.support.ReflectiveMethodExecutor.execute(ReflectiveMethodExecutor.java:129)
	at org.springframework.expression.spel.ast.MethodReference.getValueInternal(MethodReference.java:139)
	at org.springframework.expression.spel.ast.MethodReference.access$000(MethodReference.java:55)
	at org.springframework.expression.spel.ast.MethodReference$MethodValueRef.getValue(MethodReference.java:386)
	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:92)
	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:112)
	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:337)
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:263)
	... 73 common frames omitted

2020-09-15 14:56:02.452 ERROR 4320 --- [http-nio-8080-exec-8] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates//types.html]")] with root cause

java.lang.IllegalArgumentException: Cannot get array length of null
	at org.thymeleaf.util.Validate.notNull(Validate.java:37)
	at org.thymeleaf.util.ArrayUtils.length(ArrayUtils.java:72)
	at org.thymeleaf.expression.Arrays.length(Arrays.java:74)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.expression.spel.support.ReflectiveMethodExecutor.execute(ReflectiveMethodExecutor.java:129)
	at org.springframework.expression.spel.ast.MethodReference.getValueInternal(MethodReference.java:139)
	at org.springframework.expression.spel.ast.MethodReference.access$000(MethodReference.java:55)
	at org.springframework.expression.spel.ast.MethodReference$MethodValueRef.getValue(MethodReference.java:386)
	at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:92)
	at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:112)
	at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:337)
	at org.thymeleaf.spring5.expression.SPELVariableExpressionEvaluator.evaluate(SPELVariableExpressionEvaluator.java:263)
	at org.thymeleaf.standard.expression.VariableExpression.executeVariableExpression(VariableExpression.java:166)
	at org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:66)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:109)
	at org.thymeleaf.standard.expression.Expression.execute(Expression.java:138)
	at org.thymeleaf.standard.processor.AbstractStandardExpressionAttributeTagProcessor.doProcess(AbstractStandardExpressionAttributeTagProcessor.java:144)
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74)
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95)
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633)
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleOpenElement(ProcessorTemplateHandler.java:1314)
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleOpenElementEnd(TemplateHandlerAdapterMarkupHandler.java:304)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:278)
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleOpenElementEnd(OutputExpressionInlinePreProcessorHandler.java:186)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleOpenElementEnd(InlinedOutputExpressionMarkupHandler.java:124)
	at org.attoparser.select.BlockSelectorMarkupHandler.handleOpenElementEnd(BlockSelectorMarkupHandler.java:996)
	at org.attoparser.HtmlElement.handleOpenElementEnd(HtmlElement.java:109)
	at org.attoparser.HtmlMarkupHandler.handleOpenElementEnd(HtmlMarkupHandler.java:297)
	at org.attoparser.MarkupEventProcessorHandler.handleOpenElementEnd(MarkupEventProcessorHandler.java:402)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:159)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:909)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:652)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1589)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-09-15 14:58:26.106  INFO 4320 --- [Thread-17] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-09-15 14:58:26.162  INFO 4320 --- [Thread-17] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-09-15 14:58:26.567  INFO 4320 --- [restartedMain] com.chenxin.blog.BlogApplication         : Starting BlogApplication on LAPTOP-UGEIKVSJ with PID 4320 (D:\Program Files\idea-workaplace\blog\target\classes started by asus in D:\Program Files\idea-workaplace\blog)
2020-09-15 14:58:26.568 DEBUG 4320 --- [restartedMain] com.chenxin.blog.BlogApplication         : Running with Spring Boot v2.3.3.RELEASE, Spring v5.2.8.RELEASE
2020-09-15 14:58:26.568  INFO 4320 --- [restartedMain] com.chenxin.blog.BlogApplication         : The following profiles are active: dev
2020-09-15 14:58:26.878  INFO 4320 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-09-15 14:58:26.878  INFO 4320 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-09-15 14:58:26.890  INFO 4320 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 11ms. Found 0 Redis repository interfaces.
2020-09-15 14:58:27.094  INFO 4320 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-09-15 14:58:27.094  INFO 4320 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-09-15 14:58:27.095  INFO 4320 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.37]
2020-09-15 14:58:27.122  INFO 4320 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-09-15 14:58:27.122  INFO 4320 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 552 ms
2020-09-15 14:58:27.571  INFO 4320 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-09-15 14:58:27.616  INFO 4320 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-09-15 14:58:27.993  INFO 4320 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-09-15 14:58:28.011  INFO 4320 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-09-15 14:58:28.015  INFO 4320 --- [restartedMain] com.chenxin.blog.BlogApplication         : Started BlogApplication in 1.544 seconds (JVM running for 177.871)
2020-09-15 14:58:28.017  INFO 4320 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2020-09-15 14:58:34.178  INFO 4320 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-09-15 14:58:34.179  INFO 4320 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-09-15 14:58:34.207  INFO 4320 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 28 ms
2020-09-15 14:58:34.210  INFO 4320 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/types', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.TypeController.typelist', args=[null, null, {}]}
2020-09-15 14:58:34.336  INFO 4320 --- [http-nio-8080-exec-1] com.alibaba.druid.pool.DruidDataSource   : {dataSource-2} inited
2020-09-15 14:58:34.337 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC
2020-09-15 14:58:34.338 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 14:58:34.347 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 14:58:34.352 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0 AND b.type_id = ?
2020-09-15 14:58:34.353 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==> Parameters: 2(Long)
2020-09-15 14:58:34.355 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : <==      Total: 1
2020-09-15 14:58:34.356 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage        : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 and b.type_id=? ORDER BY b.issue asc LIMIT ?
2020-09-15 14:58:34.357 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage        : ==> Parameters: 2(Long), 10(Integer)
2020-09-15 14:58:34.361 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage        : <==      Total: 4
2020-09-15 14:58:34.362  INFO 4320 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Return ------ types
2020-09-15 14:58:34.362 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 14:58:34.363 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/types(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.TypeController.typelist(String), null,null,{types=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=4, pages=1, reasonable=false, pageSizeZero=false}}(String), types(String)
2020-09-15 14:58:34.437 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 14:58:42.499  INFO 4320 --- [http-nio-8080-exec-3] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/types/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.TypeController.bloglist', args=[null, 1, {}]}
2020-09-15 14:58:42.500 DEBUG 4320 --- [http-nio-8080-exec-3] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC
2020-09-15 14:58:42.501 DEBUG 4320 --- [http-nio-8080-exec-3] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 14:58:42.504 DEBUG 4320 --- [http-nio-8080-exec-3] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 14:58:42.506 DEBUG 4320 --- [http-nio-8080-exec-3] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0 AND b.type_id = ?
2020-09-15 14:58:42.507 DEBUG 4320 --- [http-nio-8080-exec-3] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==> Parameters: 1(Long)
2020-09-15 14:58:42.508 DEBUG 4320 --- [http-nio-8080-exec-3] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : <==      Total: 1
2020-09-15 14:58:42.509 DEBUG 4320 --- [http-nio-8080-exec-3] c.c.b.m.B.findBlogByTypeIdAndPage        : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 and b.type_id=? ORDER BY b.issue asc LIMIT ?
2020-09-15 14:58:42.509 DEBUG 4320 --- [http-nio-8080-exec-3] c.c.b.m.B.findBlogByTypeIdAndPage        : ==> Parameters: 1(Long), 10(Integer)
2020-09-15 14:58:42.519 DEBUG 4320 --- [http-nio-8080-exec-3] c.c.b.m.B.findBlogByTypeIdAndPage        : <==      Total: 1
2020-09-15 14:58:42.519  INFO 4320 --- [http-nio-8080-exec-3] com.chenxin.blog.aspect.LogAspect        : Return ------ /types :: bloglist
2020-09-15 14:58:42.520 DEBUG 4320 --- [http-nio-8080-exec-3] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 14:58:42.520 DEBUG 4320 --- [http-nio-8080-exec-3] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/types/blogs(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.TypeController.bloglist(String), null,1,{types=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=1, pages=1, reasonable=false, pageSizeZero=false}}(String), /types :: bloglist(String)
2020-09-15 14:58:42.623 DEBUG 4320 --- [http-nio-8080-exec-3] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 14:59:13.824  INFO 4320 --- [Thread-24] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-09-15 14:59:13.832  INFO 4320 --- [Thread-24] com.alibaba.druid.pool.DruidDataSource   : {dataSource-2} closed
2020-09-15 14:59:14.065  INFO 4320 --- [restartedMain] com.chenxin.blog.BlogApplication         : Starting BlogApplication on LAPTOP-UGEIKVSJ with PID 4320 (D:\Program Files\idea-workaplace\blog\target\classes started by asus in D:\Program Files\idea-workaplace\blog)
2020-09-15 14:59:14.066 DEBUG 4320 --- [restartedMain] com.chenxin.blog.BlogApplication         : Running with Spring Boot v2.3.3.RELEASE, Spring v5.2.8.RELEASE
2020-09-15 14:59:14.066  INFO 4320 --- [restartedMain] com.chenxin.blog.BlogApplication         : The following profiles are active: dev
2020-09-15 14:59:14.274  INFO 4320 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-09-15 14:59:14.275  INFO 4320 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-09-15 14:59:14.292  INFO 4320 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 16ms. Found 0 Redis repository interfaces.
2020-09-15 14:59:14.562  INFO 4320 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-09-15 14:59:14.562  INFO 4320 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-09-15 14:59:14.563  INFO 4320 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.37]
2020-09-15 14:59:14.630  INFO 4320 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-09-15 14:59:14.630  INFO 4320 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 561 ms
2020-09-15 14:59:15.223  INFO 4320 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-09-15 14:59:15.287  INFO 4320 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-09-15 14:59:15.691  INFO 4320 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-09-15 14:59:15.705  INFO 4320 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-09-15 14:59:15.709  INFO 4320 --- [restartedMain] com.chenxin.blog.BlogApplication         : Started BlogApplication in 1.684 seconds (JVM running for 225.566)
2020-09-15 14:59:15.710  INFO 4320 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2020-09-15 14:59:18.688  INFO 4320 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-09-15 14:59:18.689  INFO 4320 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-09-15 14:59:18.698  INFO 4320 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 9 ms
2020-09-15 14:59:18.701  INFO 4320 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/types', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.TypeController.typelist', args=[null, null, {}]}
2020-09-15 14:59:18.773  INFO 4320 --- [http-nio-8080-exec-1] com.alibaba.druid.pool.DruidDataSource   : {dataSource-3} inited
2020-09-15 14:59:18.774 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC
2020-09-15 14:59:18.775 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 14:59:18.781 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 14:59:18.786 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0 AND b.type_id = ?
2020-09-15 14:59:18.787 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==> Parameters: 2(Long)
2020-09-15 14:59:18.789 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : <==      Total: 1
2020-09-15 14:59:18.790 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage        : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 and b.type_id=? ORDER BY b.issue asc LIMIT ?
2020-09-15 14:59:18.791 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage        : ==> Parameters: 2(Long), 10(Integer)
2020-09-15 14:59:18.795 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage        : <==      Total: 4
2020-09-15 14:59:18.795  INFO 4320 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Return ------ types
2020-09-15 14:59:18.795 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 14:59:18.796 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/types(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.TypeController.typelist(String), null,null,{types=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=4, pages=1, reasonable=false, pageSizeZero=false}}(String), types(String)
2020-09-15 14:59:18.902 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 14:59:20.523  INFO 4320 --- [http-nio-8080-exec-10] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/types/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.TypeController.bloglist', args=[null, 1, {}]}
2020-09-15 14:59:20.524 DEBUG 4320 --- [http-nio-8080-exec-10] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC
2020-09-15 14:59:20.524 DEBUG 4320 --- [http-nio-8080-exec-10] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 14:59:20.534 DEBUG 4320 --- [http-nio-8080-exec-10] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 14:59:20.536 DEBUG 4320 --- [http-nio-8080-exec-10] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0 AND b.type_id = ?
2020-09-15 14:59:20.536 DEBUG 4320 --- [http-nio-8080-exec-10] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==> Parameters: 1(Long)
2020-09-15 14:59:20.537 DEBUG 4320 --- [http-nio-8080-exec-10] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : <==      Total: 1
2020-09-15 14:59:20.538 DEBUG 4320 --- [http-nio-8080-exec-10] c.c.b.m.B.findBlogByTypeIdAndPage        : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 and b.type_id=? ORDER BY b.issue asc LIMIT ?
2020-09-15 14:59:20.539 DEBUG 4320 --- [http-nio-8080-exec-10] c.c.b.m.B.findBlogByTypeIdAndPage        : ==> Parameters: 1(Long), 10(Integer)
2020-09-15 14:59:20.540 DEBUG 4320 --- [http-nio-8080-exec-10] c.c.b.m.B.findBlogByTypeIdAndPage        : <==      Total: 1
2020-09-15 14:59:20.540  INFO 4320 --- [http-nio-8080-exec-10] com.chenxin.blog.aspect.LogAspect        : Return ------ types
2020-09-15 14:59:20.541 DEBUG 4320 --- [http-nio-8080-exec-10] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 14:59:20.541 DEBUG 4320 --- [http-nio-8080-exec-10] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/types/blogs(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.TypeController.bloglist(String), null,1,{types=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=1, pages=1, reasonable=false, pageSizeZero=false}}(String), types(String)
2020-09-15 14:59:20.652 DEBUG 4320 --- [http-nio-8080-exec-10] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 15:01:31.563  INFO 4320 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/types', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.TypeController.typelist', args=[null, null, {}]}
2020-09-15 15:01:31.614 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC
2020-09-15 15:01:31.615 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 15:01:31.617 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 15:01:31.618 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0 AND b.type_id = ?
2020-09-15 15:01:31.618 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==> Parameters: 2(Long)
2020-09-15 15:01:31.619 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : <==      Total: 1
2020-09-15 15:01:31.620 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage        : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 and b.type_id=? ORDER BY b.issue asc LIMIT ?
2020-09-15 15:01:31.620 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage        : ==> Parameters: 2(Long), 10(Integer)
2020-09-15 15:01:31.623 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage        : <==      Total: 4
2020-09-15 15:01:31.624  INFO 4320 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Return ------ types
2020-09-15 15:01:31.625 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 15:01:31.625 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/types(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.TypeController.typelist(String), null,null,{types=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=4, pages=1, reasonable=false, pageSizeZero=false}}(String), types(String)
2020-09-15 15:01:31.677 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 15:01:33.976  INFO 4320 --- [http-nio-8080-exec-9] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/types/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.TypeController.bloglist', args=[null, 1, {}]}
2020-09-15 15:01:33.976 DEBUG 4320 --- [http-nio-8080-exec-9] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC
2020-09-15 15:01:33.976 DEBUG 4320 --- [http-nio-8080-exec-9] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 15:01:33.978 DEBUG 4320 --- [http-nio-8080-exec-9] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 15:01:33.980 DEBUG 4320 --- [http-nio-8080-exec-9] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0 AND b.type_id = ?
2020-09-15 15:01:33.980 DEBUG 4320 --- [http-nio-8080-exec-9] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==> Parameters: 1(Long)
2020-09-15 15:01:33.981 DEBUG 4320 --- [http-nio-8080-exec-9] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : <==      Total: 1
2020-09-15 15:01:33.982 DEBUG 4320 --- [http-nio-8080-exec-9] c.c.b.m.B.findBlogByTypeIdAndPage        : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 and b.type_id=? ORDER BY b.issue asc LIMIT ?
2020-09-15 15:01:33.982 DEBUG 4320 --- [http-nio-8080-exec-9] c.c.b.m.B.findBlogByTypeIdAndPage        : ==> Parameters: 1(Long), 10(Integer)
2020-09-15 15:01:33.983 DEBUG 4320 --- [http-nio-8080-exec-9] c.c.b.m.B.findBlogByTypeIdAndPage        : <==      Total: 1
2020-09-15 15:01:33.984  INFO 4320 --- [http-nio-8080-exec-9] com.chenxin.blog.aspect.LogAspect        : Return ------ types
2020-09-15 15:01:33.984 DEBUG 4320 --- [http-nio-8080-exec-9] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 15:01:33.984 DEBUG 4320 --- [http-nio-8080-exec-9] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/types/blogs(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.TypeController.bloglist(String), null,1,{types=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=1, pages=1, reasonable=false, pageSizeZero=false}}(String), types(String)
2020-09-15 15:01:34.135 DEBUG 4320 --- [http-nio-8080-exec-9] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 15:01:37.322  INFO 4320 --- [http-nio-8080-exec-4] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/types/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.TypeController.bloglist', args=[null, 1, {}]}
2020-09-15 15:01:37.323 DEBUG 4320 --- [http-nio-8080-exec-4] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC
2020-09-15 15:01:37.323 DEBUG 4320 --- [http-nio-8080-exec-4] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 15:01:37.325 DEBUG 4320 --- [http-nio-8080-exec-4] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 15:01:37.328 DEBUG 4320 --- [http-nio-8080-exec-4] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0 AND b.type_id = ?
2020-09-15 15:01:37.328 DEBUG 4320 --- [http-nio-8080-exec-4] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==> Parameters: 1(Long)
2020-09-15 15:01:37.329 DEBUG 4320 --- [http-nio-8080-exec-4] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : <==      Total: 1
2020-09-15 15:01:37.330 DEBUG 4320 --- [http-nio-8080-exec-4] c.c.b.m.B.findBlogByTypeIdAndPage        : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 and b.type_id=? ORDER BY b.issue asc LIMIT ?
2020-09-15 15:01:37.330 DEBUG 4320 --- [http-nio-8080-exec-4] c.c.b.m.B.findBlogByTypeIdAndPage        : ==> Parameters: 1(Long), 10(Integer)
2020-09-15 15:01:37.332 DEBUG 4320 --- [http-nio-8080-exec-4] c.c.b.m.B.findBlogByTypeIdAndPage        : <==      Total: 1
2020-09-15 15:01:37.332  INFO 4320 --- [http-nio-8080-exec-4] com.chenxin.blog.aspect.LogAspect        : Return ------ types
2020-09-15 15:01:37.332 DEBUG 4320 --- [http-nio-8080-exec-4] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 15:01:37.333 DEBUG 4320 --- [http-nio-8080-exec-4] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/types/blogs(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.TypeController.bloglist(String), null,1,{types=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=1, pages=1, reasonable=false, pageSizeZero=false}}(String), types(String)
2020-09-15 15:01:37.427 DEBUG 4320 --- [http-nio-8080-exec-4] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 15:05:29.640  INFO 4320 --- [http-nio-8080-exec-2] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/types', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.TypeController.typelist', args=[null, null, {}]}
2020-09-15 15:05:29.704 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC
2020-09-15 15:05:29.705 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 15:05:29.715 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 15:05:29.717 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0 AND b.type_id = ?
2020-09-15 15:05:29.717 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==> Parameters: 2(Long)
2020-09-15 15:05:29.718 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : <==      Total: 1
2020-09-15 15:05:29.720 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTypeIdAndPage        : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 and b.type_id=? ORDER BY b.issue asc LIMIT ?
2020-09-15 15:05:29.721 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTypeIdAndPage        : ==> Parameters: 2(Long), 10(Integer)
2020-09-15 15:05:29.731 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTypeIdAndPage        : <==      Total: 4
2020-09-15 15:05:29.732  INFO 4320 --- [http-nio-8080-exec-2] com.chenxin.blog.aspect.LogAspect        : Return ------ types
2020-09-15 15:05:29.732 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 15:05:29.732 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/types(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.TypeController.typelist(String), null,null,{types=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=4, pages=1, reasonable=false, pageSizeZero=false}}(String), types(String)
2020-09-15 15:05:29.791 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 15:05:33.121  INFO 4320 --- [http-nio-8080-exec-3] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/types/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.TypeController.bloglist', args=[null, 1, {}]}
2020-09-15 15:05:33.122 DEBUG 4320 --- [http-nio-8080-exec-3] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC
2020-09-15 15:05:33.122 DEBUG 4320 --- [http-nio-8080-exec-3] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 15:05:33.123 DEBUG 4320 --- [http-nio-8080-exec-3] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 15:05:33.125 DEBUG 4320 --- [http-nio-8080-exec-3] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0 AND b.type_id = ?
2020-09-15 15:05:33.125 DEBUG 4320 --- [http-nio-8080-exec-3] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==> Parameters: 1(Long)
2020-09-15 15:05:33.126 DEBUG 4320 --- [http-nio-8080-exec-3] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : <==      Total: 1
2020-09-15 15:05:33.127 DEBUG 4320 --- [http-nio-8080-exec-3] c.c.b.m.B.findBlogByTypeIdAndPage        : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 and b.type_id=? ORDER BY b.issue asc LIMIT ?
2020-09-15 15:05:33.127 DEBUG 4320 --- [http-nio-8080-exec-3] c.c.b.m.B.findBlogByTypeIdAndPage        : ==> Parameters: 1(Long), 10(Integer)
2020-09-15 15:05:33.131 DEBUG 4320 --- [http-nio-8080-exec-3] c.c.b.m.B.findBlogByTypeIdAndPage        : <==      Total: 1
2020-09-15 15:05:33.132  INFO 4320 --- [http-nio-8080-exec-3] com.chenxin.blog.aspect.LogAspect        : Return ------ types
2020-09-15 15:05:33.132 DEBUG 4320 --- [http-nio-8080-exec-3] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 15:05:33.132 DEBUG 4320 --- [http-nio-8080-exec-3] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/types/blogs(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.TypeController.bloglist(String), null,1,{types=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=1, pages=1, reasonable=false, pageSizeZero=false}}(String), types(String)
2020-09-15 15:05:33.291 DEBUG 4320 --- [http-nio-8080-exec-3] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 15:05:43.375  INFO 4320 --- [http-nio-8080-exec-2] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/types/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.TypeController.bloglist', args=[null, 1, {}]}
2020-09-15 15:05:43.376 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC
2020-09-15 15:05:43.376 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 15:05:43.377 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 15:05:43.378 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0 AND b.type_id = ?
2020-09-15 15:05:43.379 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==> Parameters: 1(Long)
2020-09-15 15:05:43.387 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : <==      Total: 1
2020-09-15 15:05:43.387 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTypeIdAndPage        : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 and b.type_id=? ORDER BY b.issue asc LIMIT ?
2020-09-15 15:05:43.388 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTypeIdAndPage        : ==> Parameters: 1(Long), 10(Integer)
2020-09-15 15:05:43.389 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTypeIdAndPage        : <==      Total: 1
2020-09-15 15:05:43.389  INFO 4320 --- [http-nio-8080-exec-2] com.chenxin.blog.aspect.LogAspect        : Return ------ types
2020-09-15 15:05:43.390 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 15:05:43.390 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/types/blogs(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.TypeController.bloglist(String), null,1,{types=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=1, pages=1, reasonable=false, pageSizeZero=false}}(String), types(String)
2020-09-15 15:05:43.501 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 15:09:00.635  INFO 4320 --- [Thread-29] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-09-15 15:09:00.642  INFO 4320 --- [Thread-29] com.alibaba.druid.pool.DruidDataSource   : {dataSource-3} closed
2020-09-15 15:09:01.002  INFO 4320 --- [restartedMain] com.chenxin.blog.BlogApplication         : Starting BlogApplication on LAPTOP-UGEIKVSJ with PID 4320 (D:\Program Files\idea-workaplace\blog\target\classes started by asus in D:\Program Files\idea-workaplace\blog)
2020-09-15 15:09:01.002 DEBUG 4320 --- [restartedMain] com.chenxin.blog.BlogApplication         : Running with Spring Boot v2.3.3.RELEASE, Spring v5.2.8.RELEASE
2020-09-15 15:09:01.002  INFO 4320 --- [restartedMain] com.chenxin.blog.BlogApplication         : The following profiles are active: dev
2020-09-15 15:09:02.045  INFO 4320 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-09-15 15:09:02.045  INFO 4320 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-09-15 15:09:02.056  INFO 4320 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 11ms. Found 0 Redis repository interfaces.
2020-09-15 15:09:02.256  INFO 4320 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-09-15 15:09:02.257  INFO 4320 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-09-15 15:09:02.257  INFO 4320 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.37]
2020-09-15 15:09:02.277  INFO 4320 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-09-15 15:09:02.277  INFO 4320 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1268 ms
2020-09-15 15:09:02.914  INFO 4320 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-09-15 15:09:02.956  INFO 4320 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-09-15 15:09:03.344  INFO 4320 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-09-15 15:09:03.362  INFO 4320 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-09-15 15:09:03.367  INFO 4320 --- [restartedMain] com.chenxin.blog.BlogApplication         : Started BlogApplication in 2.483 seconds (JVM running for 813.224)
2020-09-15 15:09:03.368  INFO 4320 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2020-09-15 15:09:08.075  INFO 4320 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-09-15 15:09:08.076  INFO 4320 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-09-15 15:09:08.085  INFO 4320 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 9 ms
2020-09-15 15:09:08.087  INFO 4320 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/types', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.TypeController.typelist', args=[null, null, {}]}
2020-09-15 15:09:08.225  INFO 4320 --- [http-nio-8080-exec-1] com.alibaba.druid.pool.DruidDataSource   : {dataSource-4} inited
2020-09-15 15:09:08.226 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC
2020-09-15 15:09:08.226 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 15:09:08.228 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 15:09:08.232 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0 AND b.type_id = ?
2020-09-15 15:09:08.233 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==> Parameters: 2(Long)
2020-09-15 15:09:08.234 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : <==      Total: 1
2020-09-15 15:09:08.235 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage        : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 and b.type_id=? ORDER BY b.issue asc LIMIT ?
2020-09-15 15:09:08.236 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage        : ==> Parameters: 2(Long), 10(Integer)
2020-09-15 15:09:08.241 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage        : <==      Total: 4
2020-09-15 15:09:08.242  INFO 4320 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Return ------ types
2020-09-15 15:09:08.242 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 15:09:08.243 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/types(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.TypeController.typelist(String), null,null,{types=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=4, pages=1, reasonable=false, pageSizeZero=false}}(String), types(String)
2020-09-15 15:09:08.306 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 15:09:13.018  INFO 4320 --- [http-nio-8080-exec-7] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/types/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.TypeController.bloglist', args=[null, 1, {}]}
2020-09-15 15:09:13.018 DEBUG 4320 --- [http-nio-8080-exec-7] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC
2020-09-15 15:09:13.019 DEBUG 4320 --- [http-nio-8080-exec-7] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 15:09:13.021 DEBUG 4320 --- [http-nio-8080-exec-7] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 15:09:13.023 DEBUG 4320 --- [http-nio-8080-exec-7] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0 AND b.type_id = ?
2020-09-15 15:09:13.024 DEBUG 4320 --- [http-nio-8080-exec-7] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==> Parameters: 1(Long)
2020-09-15 15:09:13.025 DEBUG 4320 --- [http-nio-8080-exec-7] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : <==      Total: 1
2020-09-15 15:09:13.025 DEBUG 4320 --- [http-nio-8080-exec-7] c.c.b.m.B.findBlogByTypeIdAndPage        : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 and b.type_id=? ORDER BY b.issue asc LIMIT ?
2020-09-15 15:09:13.026 DEBUG 4320 --- [http-nio-8080-exec-7] c.c.b.m.B.findBlogByTypeIdAndPage        : ==> Parameters: 1(Long), 10(Integer)
2020-09-15 15:09:13.027 DEBUG 4320 --- [http-nio-8080-exec-7] c.c.b.m.B.findBlogByTypeIdAndPage        : <==      Total: 1
2020-09-15 15:09:13.028  INFO 4320 --- [http-nio-8080-exec-7] com.chenxin.blog.aspect.LogAspect        : Return ------ types :: bloglist
2020-09-15 15:09:13.028 DEBUG 4320 --- [http-nio-8080-exec-7] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 15:09:13.028 DEBUG 4320 --- [http-nio-8080-exec-7] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/types/blogs(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.TypeController.bloglist(String), null,1,{types=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=1, pages=1, reasonable=false, pageSizeZero=false}}(String), types :: bloglist(String)
2020-09-15 15:09:13.148 DEBUG 4320 --- [http-nio-8080-exec-7] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 15:09:18.432  INFO 4320 --- [http-nio-8080-exec-10] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/types/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.TypeController.bloglist', args=[null, 2, {}]}
2020-09-15 15:09:18.432 DEBUG 4320 --- [http-nio-8080-exec-10] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC
2020-09-15 15:09:18.433 DEBUG 4320 --- [http-nio-8080-exec-10] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 15:09:18.434 DEBUG 4320 --- [http-nio-8080-exec-10] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 15:09:18.436 DEBUG 4320 --- [http-nio-8080-exec-10] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0 AND b.type_id = ?
2020-09-15 15:09:18.436 DEBUG 4320 --- [http-nio-8080-exec-10] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==> Parameters: 2(Long)
2020-09-15 15:09:18.437 DEBUG 4320 --- [http-nio-8080-exec-10] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : <==      Total: 1
2020-09-15 15:09:18.437 DEBUG 4320 --- [http-nio-8080-exec-10] c.c.b.m.B.findBlogByTypeIdAndPage        : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 and b.type_id=? ORDER BY b.issue asc LIMIT ?
2020-09-15 15:09:18.438 DEBUG 4320 --- [http-nio-8080-exec-10] c.c.b.m.B.findBlogByTypeIdAndPage        : ==> Parameters: 2(Long), 10(Integer)
2020-09-15 15:09:18.441 DEBUG 4320 --- [http-nio-8080-exec-10] c.c.b.m.B.findBlogByTypeIdAndPage        : <==      Total: 4
2020-09-15 15:09:18.441  INFO 4320 --- [http-nio-8080-exec-10] com.chenxin.blog.aspect.LogAspect        : Return ------ types :: bloglist
2020-09-15 15:09:18.442 DEBUG 4320 --- [http-nio-8080-exec-10] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 15:09:18.442 DEBUG 4320 --- [http-nio-8080-exec-10] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/types/blogs(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.TypeController.bloglist(String), null,2,{types=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=4, pages=1, reasonable=false, pageSizeZero=false}}(String), types :: bloglist(String)
2020-09-15 15:09:18.540 DEBUG 4320 --- [http-nio-8080-exec-10] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 15:12:37.323  INFO 4320 --- [http-nio-8080-exec-2] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/types', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.TypeController.typelist', args=[null, null, {}]}
2020-09-15 15:12:37.328 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC
2020-09-15 15:12:37.329 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 15:12:37.333 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 15:12:37.334 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0 AND b.type_id = ?
2020-09-15 15:12:37.334 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==> Parameters: 2(Long)
2020-09-15 15:12:37.335 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : <==      Total: 1
2020-09-15 15:12:37.336 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTypeIdAndPage        : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 and b.type_id=? ORDER BY b.issue asc LIMIT ?
2020-09-15 15:12:37.336 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTypeIdAndPage        : ==> Parameters: 2(Long), 10(Integer)
2020-09-15 15:12:37.338 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTypeIdAndPage        : <==      Total: 4
2020-09-15 15:12:37.339  INFO 4320 --- [http-nio-8080-exec-2] com.chenxin.blog.aspect.LogAspect        : Return ------ types
2020-09-15 15:12:37.339 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 15:12:37.339 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/types(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.TypeController.typelist(String), null,null,{types=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=4, pages=1, reasonable=false, pageSizeZero=false}}(String), types(String)
2020-09-15 15:12:37.428 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 15:12:44.355  INFO 4320 --- [http-nio-8080-exec-7] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/types/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.TypeController.bloglist', args=[null, 1, {}]}
2020-09-15 15:12:44.356 DEBUG 4320 --- [http-nio-8080-exec-7] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC
2020-09-15 15:12:44.356 DEBUG 4320 --- [http-nio-8080-exec-7] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 15:12:44.357 DEBUG 4320 --- [http-nio-8080-exec-7] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 15:12:44.358 DEBUG 4320 --- [http-nio-8080-exec-7] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0 AND b.type_id = ?
2020-09-15 15:12:44.358 DEBUG 4320 --- [http-nio-8080-exec-7] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==> Parameters: 1(Long)
2020-09-15 15:12:44.360 DEBUG 4320 --- [http-nio-8080-exec-7] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : <==      Total: 1
2020-09-15 15:12:44.361 DEBUG 4320 --- [http-nio-8080-exec-7] c.c.b.m.B.findBlogByTypeIdAndPage        : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 and b.type_id=? ORDER BY b.issue asc LIMIT ?
2020-09-15 15:12:44.361 DEBUG 4320 --- [http-nio-8080-exec-7] c.c.b.m.B.findBlogByTypeIdAndPage        : ==> Parameters: 1(Long), 10(Integer)
2020-09-15 15:12:44.363 DEBUG 4320 --- [http-nio-8080-exec-7] c.c.b.m.B.findBlogByTypeIdAndPage        : <==      Total: 1
2020-09-15 15:12:44.364  INFO 4320 --- [http-nio-8080-exec-7] com.chenxin.blog.aspect.LogAspect        : Return ------ types :: bloglist
2020-09-15 15:12:44.364 DEBUG 4320 --- [http-nio-8080-exec-7] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 15:12:44.364 DEBUG 4320 --- [http-nio-8080-exec-7] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/types/blogs(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.TypeController.bloglist(String), null,1,{types=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=1, pages=1, reasonable=false, pageSizeZero=false}}(String), types :: bloglist(String)
2020-09-15 15:12:44.470 DEBUG 4320 --- [http-nio-8080-exec-7] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 15:12:45.919  INFO 4320 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/types/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.TypeController.bloglist', args=[null, 2, {}]}
2020-09-15 15:12:45.920 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC
2020-09-15 15:12:45.920 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 15:12:45.921 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 15:12:45.923 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0 AND b.type_id = ?
2020-09-15 15:12:45.923 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==> Parameters: 2(Long)
2020-09-15 15:12:45.924 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : <==      Total: 1
2020-09-15 15:12:45.925 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage        : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 and b.type_id=? ORDER BY b.issue asc LIMIT ?
2020-09-15 15:12:45.925 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage        : ==> Parameters: 2(Long), 10(Integer)
2020-09-15 15:12:45.932 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage        : <==      Total: 4
2020-09-15 15:12:45.932  INFO 4320 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Return ------ types :: bloglist
2020-09-15 15:12:45.932 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 15:12:45.932 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/types/blogs(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.TypeController.bloglist(String), null,2,{types=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=4, pages=1, reasonable=false, pageSizeZero=false}}(String), types :: bloglist(String)
2020-09-15 15:12:46.020 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 15:28:37.777  INFO 4320 --- [Thread-34] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-09-15 15:28:37.795  INFO 4320 --- [Thread-34] com.alibaba.druid.pool.DruidDataSource   : {dataSource-4} closed
2020-09-15 15:28:38.664  INFO 4320 --- [restartedMain] com.chenxin.blog.BlogApplication         : Starting BlogApplication on LAPTOP-UGEIKVSJ with PID 4320 (D:\Program Files\idea-workaplace\blog\target\classes started by asus in D:\Program Files\idea-workaplace\blog)
2020-09-15 15:28:38.665 DEBUG 4320 --- [restartedMain] com.chenxin.blog.BlogApplication         : Running with Spring Boot v2.3.3.RELEASE, Spring v5.2.8.RELEASE
2020-09-15 15:28:38.665  INFO 4320 --- [restartedMain] com.chenxin.blog.BlogApplication         : The following profiles are active: dev
2020-09-15 15:28:38.988  INFO 4320 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-09-15 15:28:38.989  INFO 4320 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-09-15 15:28:39.008  INFO 4320 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 19ms. Found 0 Redis repository interfaces.
2020-09-15 15:28:39.199  INFO 4320 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-09-15 15:28:39.199  INFO 4320 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-09-15 15:28:39.199  INFO 4320 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.37]
2020-09-15 15:28:39.222  INFO 4320 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-09-15 15:28:39.222  INFO 4320 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 555 ms
2020-09-15 15:28:39.799  INFO 4320 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-09-15 15:28:39.851  INFO 4320 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-09-15 15:28:40.281  INFO 4320 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-09-15 15:28:40.296  INFO 4320 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-09-15 15:28:40.299  INFO 4320 --- [restartedMain] com.chenxin.blog.BlogApplication         : Started BlogApplication in 1.706 seconds (JVM running for 1990.156)
2020-09-15 15:28:40.300  INFO 4320 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2020-09-15 15:28:47.993  INFO 4320 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-09-15 15:28:47.994  INFO 4320 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-09-15 15:28:48.001  INFO 4320 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 7 ms
2020-09-15 15:28:48.004  INFO 4320 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/tags', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.TagController.typelist', args=[null, {}, null]}
2020-09-15 15:28:48.114  INFO 4320 --- [http-nio-8080-exec-1] com.alibaba.druid.pool.DruidDataSource   : {dataSource-5} inited
2020-09-15 15:28:48.114 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByExample  : ==>  Preparing: SELECT t.id, t.NAME, COUNT( bt.blog_id ) countBlog FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.isrecommend = 0 GROUP BY id ORDER BY countBlog DESC
2020-09-15 15:28:48.115 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByExample  : ==> Parameters: 
2020-09-15 15:28:48.120 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByExample  : <==      Total: 5
2020-09-15 15:28:48.124 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTagIdAndPage_COUNT   : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_blog_tag bt ON b.id = bt.blog_id LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_tag t ON bt.tag_id = t.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE t.id = ? AND b.isrecommend = 0
2020-09-15 15:28:48.125 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTagIdAndPage_COUNT   : ==> Parameters: 1(Long)
2020-09-15 15:28:48.127 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTagIdAndPage_COUNT   : <==      Total: 1
2020-09-15 15:28:48.128 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTagIdAndPage         : ==>  Preparing: SELECT b.id,b.title,b.content,b.firstPicture,b.flag,b.description,b.viewcount,b.isadmire,b.iscopyright,b.iscomment,b.isrecommend,b.issue, b.createtime,b.updatetime,b.user_id,b.type_id,y.id y_id,y.NAME y_name,u.id u_id,u.petname,u.username,u.PASSWORD,u.mail, u.type,u.headportrait u_headportrait,u.createtime u_createtime,u.updatetime u_updatetime FROM cx_blog b LEFT JOIN cx_blog_tag bt ON b.id = bt.blog_id LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_tag t ON bt.tag_id = t.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE t.id=? and b.isrecommend=0 ORDER BY b.issue asc LIMIT ?
2020-09-15 15:28:48.128 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTagIdAndPage         : ==> Parameters: 1(Long), 10(Integer)
2020-09-15 15:28:48.131 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTagIdAndPage         : <==      Total: 4
2020-09-15 15:28:48.132 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByBlogId   : ==>  Preparing: SELECT t.id, t.NAME FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.id=?
2020-09-15 15:28:48.133 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByBlogId   : ==> Parameters: 21(Long)
2020-09-15 15:28:48.134 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByBlogId   : <==      Total: 3
2020-09-15 15:28:48.135 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByBlogId   : ==>  Preparing: SELECT t.id, t.NAME FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.id=?
2020-09-15 15:28:48.135 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByBlogId   : ==> Parameters: 19(Long)
2020-09-15 15:28:48.135 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByBlogId   : <==      Total: 2
2020-09-15 15:28:48.136 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByBlogId   : ==>  Preparing: SELECT t.id, t.NAME FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.id=?
2020-09-15 15:28:48.136 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByBlogId   : ==> Parameters: 20(Long)
2020-09-15 15:28:48.137 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByBlogId   : <==      Total: 3
2020-09-15 15:28:48.137 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByBlogId   : ==>  Preparing: SELECT t.id, t.NAME FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.id=?
2020-09-15 15:28:48.137 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByBlogId   : ==> Parameters: 24(Long)
2020-09-15 15:28:48.139 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByBlogId   : <==      Total: 3
2020-09-15 15:28:48.139  INFO 4320 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Return ------ tags
2020-09-15 15:28:48.139 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 15:28:48.140 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/tags(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.TagController.typelist(String), null,{tags=[Tag{id=1, name='mysql', Tag{id=6, name='mybaits', Tag{id=4, name='spring', Tag{id=2, name='大数据', Tag{id=8, name='python'], tagId=1, page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=4, pages=1, reasonable=false, pageSizeZero=false}},null(String), tags(String)
2020-09-15 15:28:48.201 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 15:28:54.018  INFO 4320 --- [http-nio-8080-exec-8] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/tags/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.TagController.bloglist', args=[null, 6, {}]}
2020-09-15 15:28:54.018 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.blog.mapper.TagMapper.findByExample  : ==>  Preparing: SELECT t.id, t.NAME, COUNT( bt.blog_id ) countBlog FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.isrecommend = 0 GROUP BY id ORDER BY countBlog DESC
2020-09-15 15:28:54.018 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.blog.mapper.TagMapper.findByExample  : ==> Parameters: 
2020-09-15 15:28:54.020 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.blog.mapper.TagMapper.findByExample  : <==      Total: 5
2020-09-15 15:28:54.021 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.b.m.B.findBlogByTagIdAndPage_COUNT   : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_blog_tag bt ON b.id = bt.blog_id LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_tag t ON bt.tag_id = t.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE t.id = ? AND b.isrecommend = 0
2020-09-15 15:28:54.022 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.b.m.B.findBlogByTagIdAndPage_COUNT   : ==> Parameters: 6(Long)
2020-09-15 15:28:54.023 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.b.m.B.findBlogByTagIdAndPage_COUNT   : <==      Total: 1
2020-09-15 15:28:54.023 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.b.m.B.findBlogByTagIdAndPage         : ==>  Preparing: SELECT b.id,b.title,b.content,b.firstPicture,b.flag,b.description,b.viewcount,b.isadmire,b.iscopyright,b.iscomment,b.isrecommend,b.issue, b.createtime,b.updatetime,b.user_id,b.type_id,y.id y_id,y.NAME y_name,u.id u_id,u.petname,u.username,u.PASSWORD,u.mail, u.type,u.headportrait u_headportrait,u.createtime u_createtime,u.updatetime u_updatetime FROM cx_blog b LEFT JOIN cx_blog_tag bt ON b.id = bt.blog_id LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_tag t ON bt.tag_id = t.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE t.id=? and b.isrecommend=0 ORDER BY b.issue asc LIMIT ?
2020-09-15 15:28:54.023 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.b.m.B.findBlogByTagIdAndPage         : ==> Parameters: 6(Long), 10(Integer)
2020-09-15 15:28:54.036 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.b.m.B.findBlogByTagIdAndPage         : <==      Total: 3
2020-09-15 15:28:54.037 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.blog.mapper.TagMapper.findByBlogId   : ==>  Preparing: SELECT t.id, t.NAME FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.id=?
2020-09-15 15:28:54.037 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.blog.mapper.TagMapper.findByBlogId   : ==> Parameters: 21(Long)
2020-09-15 15:28:54.038 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.blog.mapper.TagMapper.findByBlogId   : <==      Total: 3
2020-09-15 15:28:54.039 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.blog.mapper.TagMapper.findByBlogId   : ==>  Preparing: SELECT t.id, t.NAME FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.id=?
2020-09-15 15:28:54.039 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.blog.mapper.TagMapper.findByBlogId   : ==> Parameters: 24(Long)
2020-09-15 15:28:54.039 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.blog.mapper.TagMapper.findByBlogId   : <==      Total: 3
2020-09-15 15:28:54.040 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.blog.mapper.TagMapper.findByBlogId   : ==>  Preparing: SELECT t.id, t.NAME FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.id=?
2020-09-15 15:28:54.040 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.blog.mapper.TagMapper.findByBlogId   : ==> Parameters: 20(Long)
2020-09-15 15:28:54.041 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.blog.mapper.TagMapper.findByBlogId   : <==      Total: 3
2020-09-15 15:28:54.041  INFO 4320 --- [http-nio-8080-exec-8] com.chenxin.blog.aspect.LogAspect        : Return ------ /tags :: bloglist
2020-09-15 15:28:54.041 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 15:28:54.041 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/tags/blogs(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.TagController.bloglist(String), null,6,{tags=[Tag{id=1, name='mysql', Tag{id=6, name='mybaits', Tag{id=4, name='spring', Tag{id=2, name='大数据', Tag{id=8, name='python'], tagId=6, page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=3, pages=1, reasonable=false, pageSizeZero=false}}(String), /tags :: bloglist(String)
2020-09-15 15:28:54.194 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 15:31:39.969  INFO 4320 --- [http-nio-8080-exec-6] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/tags', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.TagController.typelist', args=[null, {}, null]}
2020-09-15 15:31:39.974 DEBUG 4320 --- [http-nio-8080-exec-6] c.c.blog.mapper.TagMapper.findByExample  : ==>  Preparing: SELECT t.id, t.NAME, COUNT( bt.blog_id ) countBlog FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.isrecommend = 0 GROUP BY id ORDER BY countBlog DESC
2020-09-15 15:31:39.974 DEBUG 4320 --- [http-nio-8080-exec-6] c.c.blog.mapper.TagMapper.findByExample  : ==> Parameters: 
2020-09-15 15:31:39.977 DEBUG 4320 --- [http-nio-8080-exec-6] c.c.blog.mapper.TagMapper.findByExample  : <==      Total: 5
2020-09-15 15:31:39.979 DEBUG 4320 --- [http-nio-8080-exec-6] c.c.b.m.B.findBlogByTagIdAndPage_COUNT   : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_blog_tag bt ON b.id = bt.blog_id LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_tag t ON bt.tag_id = t.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE t.id = ? AND b.isrecommend = 0
2020-09-15 15:31:39.979 DEBUG 4320 --- [http-nio-8080-exec-6] c.c.b.m.B.findBlogByTagIdAndPage_COUNT   : ==> Parameters: 1(Long)
2020-09-15 15:31:39.980 DEBUG 4320 --- [http-nio-8080-exec-6] c.c.b.m.B.findBlogByTagIdAndPage_COUNT   : <==      Total: 1
2020-09-15 15:31:39.980 DEBUG 4320 --- [http-nio-8080-exec-6] c.c.b.m.B.findBlogByTagIdAndPage         : ==>  Preparing: SELECT b.id,b.title,b.content,b.firstPicture,b.flag,b.description,b.viewcount,b.isadmire,b.iscopyright,b.iscomment,b.isrecommend,b.issue, b.createtime,b.updatetime,b.user_id,b.type_id,y.id y_id,y.NAME y_name,u.id u_id,u.petname,u.username,u.PASSWORD,u.mail, u.type,u.headportrait u_headportrait,u.createtime u_createtime,u.updatetime u_updatetime FROM cx_blog b LEFT JOIN cx_blog_tag bt ON b.id = bt.blog_id LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_tag t ON bt.tag_id = t.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE t.id=? and b.isrecommend=0 ORDER BY b.issue asc LIMIT ?
2020-09-15 15:31:39.980 DEBUG 4320 --- [http-nio-8080-exec-6] c.c.b.m.B.findBlogByTagIdAndPage         : ==> Parameters: 1(Long), 10(Integer)
2020-09-15 15:31:39.983 DEBUG 4320 --- [http-nio-8080-exec-6] c.c.b.m.B.findBlogByTagIdAndPage         : <==      Total: 4
2020-09-15 15:31:39.983 DEBUG 4320 --- [http-nio-8080-exec-6] c.c.blog.mapper.TagMapper.findByBlogId   : ==>  Preparing: SELECT t.id, t.NAME FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.id=?
2020-09-15 15:31:39.984 DEBUG 4320 --- [http-nio-8080-exec-6] c.c.blog.mapper.TagMapper.findByBlogId   : ==> Parameters: 21(Long)
2020-09-15 15:31:39.985 DEBUG 4320 --- [http-nio-8080-exec-6] c.c.blog.mapper.TagMapper.findByBlogId   : <==      Total: 3
2020-09-15 15:31:39.985 DEBUG 4320 --- [http-nio-8080-exec-6] c.c.blog.mapper.TagMapper.findByBlogId   : ==>  Preparing: SELECT t.id, t.NAME FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.id=?
2020-09-15 15:31:39.985 DEBUG 4320 --- [http-nio-8080-exec-6] c.c.blog.mapper.TagMapper.findByBlogId   : ==> Parameters: 19(Long)
2020-09-15 15:31:39.986 DEBUG 4320 --- [http-nio-8080-exec-6] c.c.blog.mapper.TagMapper.findByBlogId   : <==      Total: 2
2020-09-15 15:31:39.986 DEBUG 4320 --- [http-nio-8080-exec-6] c.c.blog.mapper.TagMapper.findByBlogId   : ==>  Preparing: SELECT t.id, t.NAME FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.id=?
2020-09-15 15:31:39.986 DEBUG 4320 --- [http-nio-8080-exec-6] c.c.blog.mapper.TagMapper.findByBlogId   : ==> Parameters: 20(Long)
2020-09-15 15:31:39.987 DEBUG 4320 --- [http-nio-8080-exec-6] c.c.blog.mapper.TagMapper.findByBlogId   : <==      Total: 3
2020-09-15 15:31:39.987 DEBUG 4320 --- [http-nio-8080-exec-6] c.c.blog.mapper.TagMapper.findByBlogId   : ==>  Preparing: SELECT t.id, t.NAME FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.id=?
2020-09-15 15:31:39.987 DEBUG 4320 --- [http-nio-8080-exec-6] c.c.blog.mapper.TagMapper.findByBlogId   : ==> Parameters: 24(Long)
2020-09-15 15:31:40.031 DEBUG 4320 --- [http-nio-8080-exec-6] c.c.blog.mapper.TagMapper.findByBlogId   : <==      Total: 3
2020-09-15 15:31:40.031  INFO 4320 --- [http-nio-8080-exec-6] com.chenxin.blog.aspect.LogAspect        : Return ------ tags
2020-09-15 15:31:40.031 DEBUG 4320 --- [http-nio-8080-exec-6] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 15:31:40.032 DEBUG 4320 --- [http-nio-8080-exec-6] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/tags(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.TagController.typelist(String), null,{tags=[Tag{id=1, name='mysql', Tag{id=6, name='mybaits', Tag{id=4, name='spring', Tag{id=2, name='大数据', Tag{id=8, name='python'], tagId=1, page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=4, pages=1, reasonable=false, pageSizeZero=false}},null(String), tags(String)
2020-09-15 15:31:40.093 DEBUG 4320 --- [http-nio-8080-exec-6] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 15:31:42.502  INFO 4320 --- [http-nio-8080-exec-2] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/tags/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.TagController.bloglist', args=[null, 6, {}]}
2020-09-15 15:31:42.503 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.blog.mapper.TagMapper.findByExample  : ==>  Preparing: SELECT t.id, t.NAME, COUNT( bt.blog_id ) countBlog FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.isrecommend = 0 GROUP BY id ORDER BY countBlog DESC
2020-09-15 15:31:42.503 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.blog.mapper.TagMapper.findByExample  : ==> Parameters: 
2020-09-15 15:31:42.504 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.blog.mapper.TagMapper.findByExample  : <==      Total: 5
2020-09-15 15:31:42.505 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTagIdAndPage_COUNT   : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_blog_tag bt ON b.id = bt.blog_id LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_tag t ON bt.tag_id = t.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE t.id = ? AND b.isrecommend = 0
2020-09-15 15:31:42.505 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTagIdAndPage_COUNT   : ==> Parameters: 6(Long)
2020-09-15 15:31:42.506 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTagIdAndPage_COUNT   : <==      Total: 1
2020-09-15 15:31:42.507 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTagIdAndPage         : ==>  Preparing: SELECT b.id,b.title,b.content,b.firstPicture,b.flag,b.description,b.viewcount,b.isadmire,b.iscopyright,b.iscomment,b.isrecommend,b.issue, b.createtime,b.updatetime,b.user_id,b.type_id,y.id y_id,y.NAME y_name,u.id u_id,u.petname,u.username,u.PASSWORD,u.mail, u.type,u.headportrait u_headportrait,u.createtime u_createtime,u.updatetime u_updatetime FROM cx_blog b LEFT JOIN cx_blog_tag bt ON b.id = bt.blog_id LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_tag t ON bt.tag_id = t.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE t.id=? and b.isrecommend=0 ORDER BY b.issue asc LIMIT ?
2020-09-15 15:31:42.507 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTagIdAndPage         : ==> Parameters: 6(Long), 10(Integer)
2020-09-15 15:31:42.509 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTagIdAndPage         : <==      Total: 3
2020-09-15 15:31:42.509 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.blog.mapper.TagMapper.findByBlogId   : ==>  Preparing: SELECT t.id, t.NAME FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.id=?
2020-09-15 15:31:42.509 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.blog.mapper.TagMapper.findByBlogId   : ==> Parameters: 21(Long)
2020-09-15 15:31:42.510 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.blog.mapper.TagMapper.findByBlogId   : <==      Total: 3
2020-09-15 15:31:42.510 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.blog.mapper.TagMapper.findByBlogId   : ==>  Preparing: SELECT t.id, t.NAME FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.id=?
2020-09-15 15:31:42.510 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.blog.mapper.TagMapper.findByBlogId   : ==> Parameters: 24(Long)
2020-09-15 15:31:42.511 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.blog.mapper.TagMapper.findByBlogId   : <==      Total: 3
2020-09-15 15:31:42.511 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.blog.mapper.TagMapper.findByBlogId   : ==>  Preparing: SELECT t.id, t.NAME FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.id=?
2020-09-15 15:31:42.511 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.blog.mapper.TagMapper.findByBlogId   : ==> Parameters: 20(Long)
2020-09-15 15:31:42.512 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.blog.mapper.TagMapper.findByBlogId   : <==      Total: 3
2020-09-15 15:31:42.512  INFO 4320 --- [http-nio-8080-exec-2] com.chenxin.blog.aspect.LogAspect        : Return ------ /tags :: bloglist
2020-09-15 15:31:42.513 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 15:31:42.513 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/tags/blogs(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.TagController.bloglist(String), null,6,{tags=[Tag{id=1, name='mysql', Tag{id=6, name='mybaits', Tag{id=4, name='spring', Tag{id=2, name='大数据', Tag{id=8, name='python'], tagId=6, page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=3, pages=1, reasonable=false, pageSizeZero=false}}(String), /tags :: bloglist(String)
2020-09-15 15:31:42.585 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 15:31:46.367  INFO 4320 --- [http-nio-8080-exec-9] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/tags/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.TagController.bloglist', args=[null, 4, {}]}
2020-09-15 15:31:46.368 DEBUG 4320 --- [http-nio-8080-exec-9] c.c.blog.mapper.TagMapper.findByExample  : ==>  Preparing: SELECT t.id, t.NAME, COUNT( bt.blog_id ) countBlog FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.isrecommend = 0 GROUP BY id ORDER BY countBlog DESC
2020-09-15 15:31:46.368 DEBUG 4320 --- [http-nio-8080-exec-9] c.c.blog.mapper.TagMapper.findByExample  : ==> Parameters: 
2020-09-15 15:31:46.370 DEBUG 4320 --- [http-nio-8080-exec-9] c.c.blog.mapper.TagMapper.findByExample  : <==      Total: 5
2020-09-15 15:31:46.372 DEBUG 4320 --- [http-nio-8080-exec-9] c.c.b.m.B.findBlogByTagIdAndPage_COUNT   : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_blog_tag bt ON b.id = bt.blog_id LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_tag t ON bt.tag_id = t.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE t.id = ? AND b.isrecommend = 0
2020-09-15 15:31:46.372 DEBUG 4320 --- [http-nio-8080-exec-9] c.c.b.m.B.findBlogByTagIdAndPage_COUNT   : ==> Parameters: 4(Long)
2020-09-15 15:31:46.374 DEBUG 4320 --- [http-nio-8080-exec-9] c.c.b.m.B.findBlogByTagIdAndPage_COUNT   : <==      Total: 1
2020-09-15 15:31:46.375 DEBUG 4320 --- [http-nio-8080-exec-9] c.c.b.m.B.findBlogByTagIdAndPage         : ==>  Preparing: SELECT b.id,b.title,b.content,b.firstPicture,b.flag,b.description,b.viewcount,b.isadmire,b.iscopyright,b.iscomment,b.isrecommend,b.issue, b.createtime,b.updatetime,b.user_id,b.type_id,y.id y_id,y.NAME y_name,u.id u_id,u.petname,u.username,u.PASSWORD,u.mail, u.type,u.headportrait u_headportrait,u.createtime u_createtime,u.updatetime u_updatetime FROM cx_blog b LEFT JOIN cx_blog_tag bt ON b.id = bt.blog_id LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_tag t ON bt.tag_id = t.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE t.id=? and b.isrecommend=0 ORDER BY b.issue asc LIMIT ?
2020-09-15 15:31:46.375 DEBUG 4320 --- [http-nio-8080-exec-9] c.c.b.m.B.findBlogByTagIdAndPage         : ==> Parameters: 4(Long), 10(Integer)
2020-09-15 15:31:46.381 DEBUG 4320 --- [http-nio-8080-exec-9] c.c.b.m.B.findBlogByTagIdAndPage         : <==      Total: 2
2020-09-15 15:31:46.382 DEBUG 4320 --- [http-nio-8080-exec-9] c.c.blog.mapper.TagMapper.findByBlogId   : ==>  Preparing: SELECT t.id, t.NAME FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.id=?
2020-09-15 15:31:46.382 DEBUG 4320 --- [http-nio-8080-exec-9] c.c.blog.mapper.TagMapper.findByBlogId   : ==> Parameters: 19(Long)
2020-09-15 15:31:46.382 DEBUG 4320 --- [http-nio-8080-exec-9] c.c.blog.mapper.TagMapper.findByBlogId   : <==      Total: 2
2020-09-15 15:31:46.383 DEBUG 4320 --- [http-nio-8080-exec-9] c.c.blog.mapper.TagMapper.findByBlogId   : ==>  Preparing: SELECT t.id, t.NAME FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.id=?
2020-09-15 15:31:46.383 DEBUG 4320 --- [http-nio-8080-exec-9] c.c.blog.mapper.TagMapper.findByBlogId   : ==> Parameters: 24(Long)
2020-09-15 15:31:46.383 DEBUG 4320 --- [http-nio-8080-exec-9] c.c.blog.mapper.TagMapper.findByBlogId   : <==      Total: 3
2020-09-15 15:31:46.384  INFO 4320 --- [http-nio-8080-exec-9] com.chenxin.blog.aspect.LogAspect        : Return ------ /tags :: bloglist
2020-09-15 15:31:46.384 DEBUG 4320 --- [http-nio-8080-exec-9] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 15:31:46.384 DEBUG 4320 --- [http-nio-8080-exec-9] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/tags/blogs(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.TagController.bloglist(String), null,4,{tags=[Tag{id=1, name='mysql', Tag{id=6, name='mybaits', Tag{id=4, name='spring', Tag{id=2, name='大数据', Tag{id=8, name='python'], tagId=4, page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=2, pages=1, reasonable=false, pageSizeZero=false}}(String), /tags :: bloglist(String)
2020-09-15 15:31:46.501 DEBUG 4320 --- [http-nio-8080-exec-9] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 15:31:48.798  INFO 4320 --- [http-nio-8080-exec-2] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/tags/blogs', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.TagController.bloglist', args=[null, 1, {}]}
2020-09-15 15:31:48.799 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.blog.mapper.TagMapper.findByExample  : ==>  Preparing: SELECT t.id, t.NAME, COUNT( bt.blog_id ) countBlog FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.isrecommend = 0 GROUP BY id ORDER BY countBlog DESC
2020-09-15 15:31:48.799 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.blog.mapper.TagMapper.findByExample  : ==> Parameters: 
2020-09-15 15:31:48.800 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.blog.mapper.TagMapper.findByExample  : <==      Total: 5
2020-09-15 15:31:48.801 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTagIdAndPage_COUNT   : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_blog_tag bt ON b.id = bt.blog_id LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_tag t ON bt.tag_id = t.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE t.id = ? AND b.isrecommend = 0
2020-09-15 15:31:48.802 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTagIdAndPage_COUNT   : ==> Parameters: 1(Long)
2020-09-15 15:31:48.802 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTagIdAndPage_COUNT   : <==      Total: 1
2020-09-15 15:31:48.804 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTagIdAndPage         : ==>  Preparing: SELECT b.id,b.title,b.content,b.firstPicture,b.flag,b.description,b.viewcount,b.isadmire,b.iscopyright,b.iscomment,b.isrecommend,b.issue, b.createtime,b.updatetime,b.user_id,b.type_id,y.id y_id,y.NAME y_name,u.id u_id,u.petname,u.username,u.PASSWORD,u.mail, u.type,u.headportrait u_headportrait,u.createtime u_createtime,u.updatetime u_updatetime FROM cx_blog b LEFT JOIN cx_blog_tag bt ON b.id = bt.blog_id LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_tag t ON bt.tag_id = t.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE t.id=? and b.isrecommend=0 ORDER BY b.issue asc LIMIT ?
2020-09-15 15:31:48.804 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTagIdAndPage         : ==> Parameters: 1(Long), 10(Integer)
2020-09-15 15:31:48.806 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTagIdAndPage         : <==      Total: 4
2020-09-15 15:31:48.806 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.blog.mapper.TagMapper.findByBlogId   : ==>  Preparing: SELECT t.id, t.NAME FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.id=?
2020-09-15 15:31:48.806 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.blog.mapper.TagMapper.findByBlogId   : ==> Parameters: 21(Long)
2020-09-15 15:31:48.807 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.blog.mapper.TagMapper.findByBlogId   : <==      Total: 3
2020-09-15 15:31:48.808 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.blog.mapper.TagMapper.findByBlogId   : ==>  Preparing: SELECT t.id, t.NAME FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.id=?
2020-09-15 15:31:48.808 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.blog.mapper.TagMapper.findByBlogId   : ==> Parameters: 19(Long)
2020-09-15 15:31:48.808 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.blog.mapper.TagMapper.findByBlogId   : <==      Total: 2
2020-09-15 15:31:48.809 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.blog.mapper.TagMapper.findByBlogId   : ==>  Preparing: SELECT t.id, t.NAME FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.id=?
2020-09-15 15:31:48.809 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.blog.mapper.TagMapper.findByBlogId   : ==> Parameters: 20(Long)
2020-09-15 15:31:48.822 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.blog.mapper.TagMapper.findByBlogId   : <==      Total: 3
2020-09-15 15:31:48.823 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.blog.mapper.TagMapper.findByBlogId   : ==>  Preparing: SELECT t.id, t.NAME FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.id=?
2020-09-15 15:31:48.823 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.blog.mapper.TagMapper.findByBlogId   : ==> Parameters: 24(Long)
2020-09-15 15:31:48.824 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.blog.mapper.TagMapper.findByBlogId   : <==      Total: 3
2020-09-15 15:31:48.824  INFO 4320 --- [http-nio-8080-exec-2] com.chenxin.blog.aspect.LogAspect        : Return ------ /tags :: bloglist
2020-09-15 15:31:48.824 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 15:31:48.824 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/tags/blogs(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.TagController.bloglist(String), null,1,{tags=[Tag{id=1, name='mysql', Tag{id=6, name='mybaits', Tag{id=4, name='spring', Tag{id=2, name='大数据', Tag{id=8, name='python'], tagId=1, page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=4, pages=1, reasonable=false, pageSizeZero=false}}(String), /tags :: bloglist(String)
2020-09-15 15:31:48.943 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 15:31:50.231  INFO 4320 --- [http-nio-8080-exec-5] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.indexoage', args=[null, {}]}
2020-09-15 15:31:50.235 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.b.m.B.findBlogByPaging_COUNT         : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0
2020-09-15 15:31:50.236 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.b.m.B.findBlogByPaging_COUNT         : ==> Parameters: 
2020-09-15 15:31:50.237 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.b.m.B.findBlogByPaging_COUNT         : <==      Total: 1
2020-09-15 15:31:50.238 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.b.m.BlogMapper.findBlogByPaging      : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 LIMIT ?
2020-09-15 15:31:50.238 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.b.m.BlogMapper.findBlogByPaging      : ==> Parameters: 10(Integer)
2020-09-15 15:31:50.240 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.b.m.BlogMapper.findBlogByPaging      : <==      Total: 5
2020-09-15 15:31:50.245 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC limit 0,6
2020-09-15 15:31:50.246 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 15:31:50.247 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 15:31:50.247 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.blog.mapper.TagMapper.findByExample  : ==>  Preparing: SELECT t.id, t.NAME, COUNT( bt.blog_id ) countBlog FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.isrecommend = 0 GROUP BY id ORDER BY countBlog DESC limit 0,10
2020-09-15 15:31:50.248 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.blog.mapper.TagMapper.findByExample  : ==> Parameters: 
2020-09-15 15:31:50.249 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.blog.mapper.TagMapper.findByExample  : <==      Total: 5
2020-09-15 15:31:50.254 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,10
2020-09-15 15:31:50.254 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 15:31:50.256 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 5
2020-09-15 15:31:50.256  INFO 4320 --- [http-nio-8080-exec-5] com.chenxin.blog.aspect.LogAspect        : Return ------ /index
2020-09-15 15:31:50.257 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 15:31:50.257 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.indexoage(String), null,{page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=5, pages=1, reasonable=false, pageSizeZero=false}, toptype=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], toptag=[Tag{id=1, name='mysql', Tag{id=6, name='mybaits', Tag{id=4, name='spring', Tag{id=2, name='大数据', Tag{id=8, name='python'], topblog=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=10, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=11, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=20, title='mysql数据库的查询拉', content='**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这是一篇好博客', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:27:27 CST 2019, updatetime=Thu Sep 05 09:44:20 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=24, title='JAVA是什么', content='##java是什么&sup3; &hearts;
虹口区我说的浓氨水', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='我is单词vhuiowdecvb', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 13 11:08:48 CST 2018, updatetime=Thu Sep 13 11:08:48 CST 2018, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), /index(String)
2020-09-15 15:31:50.410 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 15:31:52.448  INFO 4320 --- [http-nio-8080-exec-2] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/types', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.TypeController.typelist', args=[null, 2, {}]}
2020-09-15 15:31:52.451 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC
2020-09-15 15:31:52.451 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 15:31:52.454 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 15:31:52.455 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0 AND b.type_id = ?
2020-09-15 15:31:52.456 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==> Parameters: 2(Long)
2020-09-15 15:31:52.457 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : <==      Total: 1
2020-09-15 15:31:52.457 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTypeIdAndPage        : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 and b.type_id=? ORDER BY b.issue asc LIMIT ?
2020-09-15 15:31:52.458 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTypeIdAndPage        : ==> Parameters: 2(Long), 10(Integer)
2020-09-15 15:31:52.461 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTypeIdAndPage        : <==      Total: 4
2020-09-15 15:31:52.461  INFO 4320 --- [http-nio-8080-exec-2] com.chenxin.blog.aspect.LogAspect        : Return ------ types
2020-09-15 15:31:52.461 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 15:31:52.462 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/types(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.TypeController.typelist(String), null,2,{types=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=4, pages=1, reasonable=false, pageSizeZero=false}}(String), types(String)
2020-09-15 15:31:52.527 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 15:31:55.591  INFO 4320 --- [http-nio-8080-exec-7] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.indexoage', args=[null, {}]}
2020-09-15 15:31:55.592 DEBUG 4320 --- [http-nio-8080-exec-7] c.c.b.m.B.findBlogByPaging_COUNT         : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0
2020-09-15 15:31:55.592 DEBUG 4320 --- [http-nio-8080-exec-7] c.c.b.m.B.findBlogByPaging_COUNT         : ==> Parameters: 
2020-09-15 15:31:55.593 DEBUG 4320 --- [http-nio-8080-exec-7] c.c.b.m.B.findBlogByPaging_COUNT         : <==      Total: 1
2020-09-15 15:31:55.594 DEBUG 4320 --- [http-nio-8080-exec-7] c.c.b.m.BlogMapper.findBlogByPaging      : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 LIMIT ?
2020-09-15 15:31:55.594 DEBUG 4320 --- [http-nio-8080-exec-7] c.c.b.m.BlogMapper.findBlogByPaging      : ==> Parameters: 10(Integer)
2020-09-15 15:31:55.603 DEBUG 4320 --- [http-nio-8080-exec-7] c.c.b.m.BlogMapper.findBlogByPaging      : <==      Total: 5
2020-09-15 15:31:55.604 DEBUG 4320 --- [http-nio-8080-exec-7] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC limit 0,6
2020-09-15 15:31:55.604 DEBUG 4320 --- [http-nio-8080-exec-7] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 15:31:55.605 DEBUG 4320 --- [http-nio-8080-exec-7] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 15:31:55.605 DEBUG 4320 --- [http-nio-8080-exec-7] c.c.blog.mapper.TagMapper.findByExample  : ==>  Preparing: SELECT t.id, t.NAME, COUNT( bt.blog_id ) countBlog FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.isrecommend = 0 GROUP BY id ORDER BY countBlog DESC limit 0,10
2020-09-15 15:31:55.605 DEBUG 4320 --- [http-nio-8080-exec-7] c.c.blog.mapper.TagMapper.findByExample  : ==> Parameters: 
2020-09-15 15:31:55.606 DEBUG 4320 --- [http-nio-8080-exec-7] c.c.blog.mapper.TagMapper.findByExample  : <==      Total: 5
2020-09-15 15:31:55.606 DEBUG 4320 --- [http-nio-8080-exec-7] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,10
2020-09-15 15:31:55.607 DEBUG 4320 --- [http-nio-8080-exec-7] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 15:31:55.608 DEBUG 4320 --- [http-nio-8080-exec-7] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 5
2020-09-15 15:31:55.608  INFO 4320 --- [http-nio-8080-exec-7] com.chenxin.blog.aspect.LogAspect        : Return ------ /index
2020-09-15 15:31:55.609 DEBUG 4320 --- [http-nio-8080-exec-7] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 15:31:55.609 DEBUG 4320 --- [http-nio-8080-exec-7] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.indexoage(String), null,{page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=5, pages=1, reasonable=false, pageSizeZero=false}, toptype=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], toptag=[Tag{id=1, name='mysql', Tag{id=6, name='mybaits', Tag{id=4, name='spring', Tag{id=2, name='大数据', Tag{id=8, name='python'], topblog=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=10, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=11, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=20, title='mysql数据库的查询拉', content='**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这是一篇好博客', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:27:27 CST 2019, updatetime=Thu Sep 05 09:44:20 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=24, title='JAVA是什么', content='##java是什么&sup3; &hearts;
虹口区我说的浓氨水', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='我is单词vhuiowdecvb', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 13 11:08:48 CST 2018, updatetime=Thu Sep 13 11:08:48 CST 2018, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), /index(String)
2020-09-15 15:31:55.785 DEBUG 4320 --- [http-nio-8080-exec-7] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 15:31:57.280  INFO 4320 --- [http-nio-8080-exec-9] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/types', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.TypeController.typelist', args=[null, 1, {}]}
2020-09-15 15:31:57.281 DEBUG 4320 --- [http-nio-8080-exec-9] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC
2020-09-15 15:31:57.281 DEBUG 4320 --- [http-nio-8080-exec-9] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 15:31:57.282 DEBUG 4320 --- [http-nio-8080-exec-9] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 15:31:57.284 DEBUG 4320 --- [http-nio-8080-exec-9] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0 AND b.type_id = ?
2020-09-15 15:31:57.284 DEBUG 4320 --- [http-nio-8080-exec-9] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==> Parameters: 1(Long)
2020-09-15 15:31:57.286 DEBUG 4320 --- [http-nio-8080-exec-9] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : <==      Total: 1
2020-09-15 15:31:57.287 DEBUG 4320 --- [http-nio-8080-exec-9] c.c.b.m.B.findBlogByTypeIdAndPage        : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 and b.type_id=? ORDER BY b.issue asc LIMIT ?
2020-09-15 15:31:57.288 DEBUG 4320 --- [http-nio-8080-exec-9] c.c.b.m.B.findBlogByTypeIdAndPage        : ==> Parameters: 1(Long), 10(Integer)
2020-09-15 15:31:57.289 DEBUG 4320 --- [http-nio-8080-exec-9] c.c.b.m.B.findBlogByTypeIdAndPage        : <==      Total: 1
2020-09-15 15:31:57.289  INFO 4320 --- [http-nio-8080-exec-9] com.chenxin.blog.aspect.LogAspect        : Return ------ types
2020-09-15 15:31:57.289 DEBUG 4320 --- [http-nio-8080-exec-9] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 15:31:57.290 DEBUG 4320 --- [http-nio-8080-exec-9] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/types(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.TypeController.typelist(String), null,1,{types=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=1, pages=1, reasonable=false, pageSizeZero=false}}(String), types(String)
2020-09-15 15:31:57.406 DEBUG 4320 --- [http-nio-8080-exec-9] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 15:32:02.159  INFO 4320 --- [http-nio-8080-exec-5] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.indexoage', args=[null, {}]}
2020-09-15 15:32:02.161 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.b.m.B.findBlogByPaging_COUNT         : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0
2020-09-15 15:32:02.162 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.b.m.B.findBlogByPaging_COUNT         : ==> Parameters: 
2020-09-15 15:32:02.163 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.b.m.B.findBlogByPaging_COUNT         : <==      Total: 1
2020-09-15 15:32:02.164 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.b.m.BlogMapper.findBlogByPaging      : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 LIMIT ?
2020-09-15 15:32:02.164 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.b.m.BlogMapper.findBlogByPaging      : ==> Parameters: 10(Integer)
2020-09-15 15:32:02.166 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.b.m.BlogMapper.findBlogByPaging      : <==      Total: 5
2020-09-15 15:32:02.167 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC limit 0,6
2020-09-15 15:32:02.167 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 15:32:02.169 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 15:32:02.170 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.blog.mapper.TagMapper.findByExample  : ==>  Preparing: SELECT t.id, t.NAME, COUNT( bt.blog_id ) countBlog FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.isrecommend = 0 GROUP BY id ORDER BY countBlog DESC limit 0,10
2020-09-15 15:32:02.170 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.blog.mapper.TagMapper.findByExample  : ==> Parameters: 
2020-09-15 15:32:02.171 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.blog.mapper.TagMapper.findByExample  : <==      Total: 5
2020-09-15 15:32:02.172 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,10
2020-09-15 15:32:02.172 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 15:32:02.173 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 5
2020-09-15 15:32:02.173  INFO 4320 --- [http-nio-8080-exec-5] com.chenxin.blog.aspect.LogAspect        : Return ------ /index
2020-09-15 15:32:02.174 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 15:32:02.174 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.indexoage(String), null,{page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=5, pages=1, reasonable=false, pageSizeZero=false}, toptype=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], toptag=[Tag{id=1, name='mysql', Tag{id=6, name='mybaits', Tag{id=4, name='spring', Tag{id=2, name='大数据', Tag{id=8, name='python'], topblog=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=10, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=11, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=20, title='mysql数据库的查询拉', content='**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这是一篇好博客', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:27:27 CST 2019, updatetime=Thu Sep 05 09:44:20 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=24, title='JAVA是什么', content='##java是什么&sup3; &hearts;
虹口区我说的浓氨水', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='我is单词vhuiowdecvb', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 13 11:08:48 CST 2018, updatetime=Thu Sep 13 11:08:48 CST 2018, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), /index(String)
2020-09-15 15:32:02.391 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 15:32:04.086  INFO 4320 --- [http-nio-8080-exec-8] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/tags', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.TagController.typelist', args=[null, {}, 1]}
2020-09-15 15:32:04.087 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.blog.mapper.TagMapper.findByExample  : ==>  Preparing: SELECT t.id, t.NAME, COUNT( bt.blog_id ) countBlog FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.isrecommend = 0 GROUP BY id ORDER BY countBlog DESC
2020-09-15 15:32:04.087 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.blog.mapper.TagMapper.findByExample  : ==> Parameters: 
2020-09-15 15:32:04.088 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.blog.mapper.TagMapper.findByExample  : <==      Total: 5
2020-09-15 15:32:04.089 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.b.m.B.findBlogByTagIdAndPage_COUNT   : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_blog_tag bt ON b.id = bt.blog_id LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_tag t ON bt.tag_id = t.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE t.id = ? AND b.isrecommend = 0
2020-09-15 15:32:04.089 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.b.m.B.findBlogByTagIdAndPage_COUNT   : ==> Parameters: 1(Long)
2020-09-15 15:32:04.090 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.b.m.B.findBlogByTagIdAndPage_COUNT   : <==      Total: 1
2020-09-15 15:32:04.090 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.b.m.B.findBlogByTagIdAndPage         : ==>  Preparing: SELECT b.id,b.title,b.content,b.firstPicture,b.flag,b.description,b.viewcount,b.isadmire,b.iscopyright,b.iscomment,b.isrecommend,b.issue, b.createtime,b.updatetime,b.user_id,b.type_id,y.id y_id,y.NAME y_name,u.id u_id,u.petname,u.username,u.PASSWORD,u.mail, u.type,u.headportrait u_headportrait,u.createtime u_createtime,u.updatetime u_updatetime FROM cx_blog b LEFT JOIN cx_blog_tag bt ON b.id = bt.blog_id LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_tag t ON bt.tag_id = t.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE t.id=? and b.isrecommend=0 ORDER BY b.issue asc LIMIT ?
2020-09-15 15:32:04.091 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.b.m.B.findBlogByTagIdAndPage         : ==> Parameters: 1(Long), 10(Integer)
2020-09-15 15:32:04.093 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.b.m.B.findBlogByTagIdAndPage         : <==      Total: 4
2020-09-15 15:32:04.094 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.blog.mapper.TagMapper.findByBlogId   : ==>  Preparing: SELECT t.id, t.NAME FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.id=?
2020-09-15 15:32:04.094 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.blog.mapper.TagMapper.findByBlogId   : ==> Parameters: 21(Long)
2020-09-15 15:32:04.096 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.blog.mapper.TagMapper.findByBlogId   : <==      Total: 3
2020-09-15 15:32:04.097 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.blog.mapper.TagMapper.findByBlogId   : ==>  Preparing: SELECT t.id, t.NAME FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.id=?
2020-09-15 15:32:04.097 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.blog.mapper.TagMapper.findByBlogId   : ==> Parameters: 19(Long)
2020-09-15 15:32:04.098 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.blog.mapper.TagMapper.findByBlogId   : <==      Total: 2
2020-09-15 15:32:04.099 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.blog.mapper.TagMapper.findByBlogId   : ==>  Preparing: SELECT t.id, t.NAME FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.id=?
2020-09-15 15:32:04.099 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.blog.mapper.TagMapper.findByBlogId   : ==> Parameters: 20(Long)
2020-09-15 15:32:04.101 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.blog.mapper.TagMapper.findByBlogId   : <==      Total: 3
2020-09-15 15:32:04.101 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.blog.mapper.TagMapper.findByBlogId   : ==>  Preparing: SELECT t.id, t.NAME FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.id=?
2020-09-15 15:32:04.101 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.blog.mapper.TagMapper.findByBlogId   : ==> Parameters: 24(Long)
2020-09-15 15:32:04.103 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.blog.mapper.TagMapper.findByBlogId   : <==      Total: 3
2020-09-15 15:32:04.103  INFO 4320 --- [http-nio-8080-exec-8] com.chenxin.blog.aspect.LogAspect        : Return ------ tags
2020-09-15 15:32:04.104 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 15:32:04.104 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/tags(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.TagController.typelist(String), null,{tags=[Tag{id=1, name='mysql', Tag{id=6, name='mybaits', Tag{id=4, name='spring', Tag{id=2, name='大数据', Tag{id=8, name='python'], tagId=1, page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=4, pages=1, reasonable=false, pageSizeZero=false}},1(String), tags(String)
2020-09-15 15:32:04.176 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 15:32:06.127  INFO 4320 --- [http-nio-8080-exec-8] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.indexoage', args=[null, {}]}
2020-09-15 15:32:06.128 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.b.m.B.findBlogByPaging_COUNT         : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0
2020-09-15 15:32:06.128 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.b.m.B.findBlogByPaging_COUNT         : ==> Parameters: 
2020-09-15 15:32:06.129 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.b.m.B.findBlogByPaging_COUNT         : <==      Total: 1
2020-09-15 15:32:06.129 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.b.m.BlogMapper.findBlogByPaging      : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 LIMIT ?
2020-09-15 15:32:06.129 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.b.m.BlogMapper.findBlogByPaging      : ==> Parameters: 10(Integer)
2020-09-15 15:32:06.132 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.b.m.BlogMapper.findBlogByPaging      : <==      Total: 5
2020-09-15 15:32:06.133 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC limit 0,6
2020-09-15 15:32:06.133 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 15:32:06.135 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 15:32:06.136 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.blog.mapper.TagMapper.findByExample  : ==>  Preparing: SELECT t.id, t.NAME, COUNT( bt.blog_id ) countBlog FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.isrecommend = 0 GROUP BY id ORDER BY countBlog DESC limit 0,10
2020-09-15 15:32:06.136 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.blog.mapper.TagMapper.findByExample  : ==> Parameters: 
2020-09-15 15:32:06.137 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.blog.mapper.TagMapper.findByExample  : <==      Total: 5
2020-09-15 15:32:06.138 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,10
2020-09-15 15:32:06.138 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 15:32:06.140 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 5
2020-09-15 15:32:06.140  INFO 4320 --- [http-nio-8080-exec-8] com.chenxin.blog.aspect.LogAspect        : Return ------ /index
2020-09-15 15:32:06.140 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 15:32:06.141 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.indexoage(String), null,{page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=5, pages=1, reasonable=false, pageSizeZero=false}, toptype=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], toptag=[Tag{id=1, name='mysql', Tag{id=6, name='mybaits', Tag{id=4, name='spring', Tag{id=2, name='大数据', Tag{id=8, name='python'], topblog=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=10, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=11, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=20, title='mysql数据库的查询拉', content='**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这是一篇好博客', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:27:27 CST 2019, updatetime=Thu Sep 05 09:44:20 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=24, title='JAVA是什么', content='##java是什么&sup3; &hearts;
虹口区我说的浓氨水', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='我is单词vhuiowdecvb', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 13 11:08:48 CST 2018, updatetime=Thu Sep 13 11:08:48 CST 2018, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), /index(String)
2020-09-15 15:32:06.376 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 15:32:08.166  INFO 4320 --- [http-nio-8080-exec-3] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/tags', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.TagController.typelist', args=[null, {}, 2]}
2020-09-15 15:32:08.167 DEBUG 4320 --- [http-nio-8080-exec-3] c.c.blog.mapper.TagMapper.findByExample  : ==>  Preparing: SELECT t.id, t.NAME, COUNT( bt.blog_id ) countBlog FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.isrecommend = 0 GROUP BY id ORDER BY countBlog DESC
2020-09-15 15:32:08.167 DEBUG 4320 --- [http-nio-8080-exec-3] c.c.blog.mapper.TagMapper.findByExample  : ==> Parameters: 
2020-09-15 15:32:08.168 DEBUG 4320 --- [http-nio-8080-exec-3] c.c.blog.mapper.TagMapper.findByExample  : <==      Total: 5
2020-09-15 15:32:08.169 DEBUG 4320 --- [http-nio-8080-exec-3] c.c.b.m.B.findBlogByTagIdAndPage_COUNT   : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_blog_tag bt ON b.id = bt.blog_id LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_tag t ON bt.tag_id = t.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE t.id = ? AND b.isrecommend = 0
2020-09-15 15:32:08.169 DEBUG 4320 --- [http-nio-8080-exec-3] c.c.b.m.B.findBlogByTagIdAndPage_COUNT   : ==> Parameters: 2(Long)
2020-09-15 15:32:08.170 DEBUG 4320 --- [http-nio-8080-exec-3] c.c.b.m.B.findBlogByTagIdAndPage_COUNT   : <==      Total: 1
2020-09-15 15:32:08.171 DEBUG 4320 --- [http-nio-8080-exec-3] c.c.b.m.B.findBlogByTagIdAndPage         : ==>  Preparing: SELECT b.id,b.title,b.content,b.firstPicture,b.flag,b.description,b.viewcount,b.isadmire,b.iscopyright,b.iscomment,b.isrecommend,b.issue, b.createtime,b.updatetime,b.user_id,b.type_id,y.id y_id,y.NAME y_name,u.id u_id,u.petname,u.username,u.PASSWORD,u.mail, u.type,u.headportrait u_headportrait,u.createtime u_createtime,u.updatetime u_updatetime FROM cx_blog b LEFT JOIN cx_blog_tag bt ON b.id = bt.blog_id LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_tag t ON bt.tag_id = t.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE t.id=? and b.isrecommend=0 ORDER BY b.issue asc LIMIT ?
2020-09-15 15:32:08.171 DEBUG 4320 --- [http-nio-8080-exec-3] c.c.b.m.B.findBlogByTagIdAndPage         : ==> Parameters: 2(Long), 10(Integer)
2020-09-15 15:32:08.173 DEBUG 4320 --- [http-nio-8080-exec-3] c.c.b.m.B.findBlogByTagIdAndPage         : <==      Total: 2
2020-09-15 15:32:08.173 DEBUG 4320 --- [http-nio-8080-exec-3] c.c.blog.mapper.TagMapper.findByBlogId   : ==>  Preparing: SELECT t.id, t.NAME FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.id=?
2020-09-15 15:32:08.173 DEBUG 4320 --- [http-nio-8080-exec-3] c.c.blog.mapper.TagMapper.findByBlogId   : ==> Parameters: 22(Long)
2020-09-15 15:32:08.174 DEBUG 4320 --- [http-nio-8080-exec-3] c.c.blog.mapper.TagMapper.findByBlogId   : <==      Total: 1
2020-09-15 15:32:08.174 DEBUG 4320 --- [http-nio-8080-exec-3] c.c.blog.mapper.TagMapper.findByBlogId   : ==>  Preparing: SELECT t.id, t.NAME FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.id=?
2020-09-15 15:32:08.174 DEBUG 4320 --- [http-nio-8080-exec-3] c.c.blog.mapper.TagMapper.findByBlogId   : ==> Parameters: 20(Long)
2020-09-15 15:32:08.176 DEBUG 4320 --- [http-nio-8080-exec-3] c.c.blog.mapper.TagMapper.findByBlogId   : <==      Total: 3
2020-09-15 15:32:08.176  INFO 4320 --- [http-nio-8080-exec-3] com.chenxin.blog.aspect.LogAspect        : Return ------ tags
2020-09-15 15:32:08.177 DEBUG 4320 --- [http-nio-8080-exec-3] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 15:32:08.177 DEBUG 4320 --- [http-nio-8080-exec-3] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/tags(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.TagController.typelist(String), null,{tags=[Tag{id=1, name='mysql', Tag{id=6, name='mybaits', Tag{id=4, name='spring', Tag{id=2, name='大数据', Tag{id=8, name='python'], tagId=2, page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=2, pages=1, reasonable=false, pageSizeZero=false}},2(String), tags(String)
2020-09-15 15:32:08.285 DEBUG 4320 --- [http-nio-8080-exec-3] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 15:59:12.027  INFO 4320 --- [Thread-39] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-09-15 15:59:12.052  INFO 4320 --- [Thread-39] com.alibaba.druid.pool.DruidDataSource   : {dataSource-5} closed
2020-09-15 15:59:12.598  INFO 4320 --- [restartedMain] com.chenxin.blog.BlogApplication         : Starting BlogApplication on LAPTOP-UGEIKVSJ with PID 4320 (D:\Program Files\idea-workaplace\blog\target\classes started by asus in D:\Program Files\idea-workaplace\blog)
2020-09-15 15:59:12.598 DEBUG 4320 --- [restartedMain] com.chenxin.blog.BlogApplication         : Running with Spring Boot v2.3.3.RELEASE, Spring v5.2.8.RELEASE
2020-09-15 15:59:12.598  INFO 4320 --- [restartedMain] com.chenxin.blog.BlogApplication         : The following profiles are active: dev
2020-09-15 15:59:13.467  INFO 4320 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-09-15 15:59:13.467  INFO 4320 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-09-15 15:59:13.480  INFO 4320 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 13ms. Found 0 Redis repository interfaces.
2020-09-15 15:59:13.691  INFO 4320 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-09-15 15:59:13.692  INFO 4320 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-09-15 15:59:13.692  INFO 4320 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.37]
2020-09-15 15:59:13.713  INFO 4320 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-09-15 15:59:13.713  INFO 4320 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1112 ms
2020-09-15 15:59:14.324  INFO 4320 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-09-15 15:59:14.379  INFO 4320 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-09-15 15:59:14.813  INFO 4320 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-09-15 15:59:14.825  INFO 4320 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-09-15 15:59:14.828  INFO 4320 --- [restartedMain] com.chenxin.blog.BlogApplication         : Started BlogApplication in 2.373 seconds (JVM running for 3824.685)
2020-09-15 15:59:14.829  INFO 4320 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2020-09-15 15:59:19.713  INFO 4320 --- [http-nio-8080-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-09-15 15:59:19.714  INFO 4320 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-09-15 15:59:19.729  INFO 4320 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 15 ms
2020-09-15 15:59:19.731  INFO 4320 --- [http-nio-8080-exec-2] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.indexoage', args=[null, {}]}
2020-09-15 15:59:19.844  INFO 4320 --- [http-nio-8080-exec-2] com.alibaba.druid.pool.DruidDataSource   : {dataSource-6} inited
2020-09-15 15:59:19.844 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByPaging_COUNT         : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0
2020-09-15 15:59:19.845 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByPaging_COUNT         : ==> Parameters: 
2020-09-15 15:59:19.861 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByPaging_COUNT         : <==      Total: 1
2020-09-15 15:59:19.861 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.m.BlogMapper.findBlogByPaging      : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 LIMIT ?
2020-09-15 15:59:19.861 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.m.BlogMapper.findBlogByPaging      : ==> Parameters: 10(Integer)
2020-09-15 15:59:19.868 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.m.BlogMapper.findBlogByPaging      : <==      Total: 5
2020-09-15 15:59:19.873 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC limit 0,6
2020-09-15 15:59:19.873 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 15:59:19.874 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 15:59:19.878 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.blog.mapper.TagMapper.findByExample  : ==>  Preparing: SELECT t.id, t.NAME, COUNT( bt.blog_id ) countBlog FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.isrecommend = 0 GROUP BY id ORDER BY countBlog DESC limit 0,10
2020-09-15 15:59:19.878 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.blog.mapper.TagMapper.findByExample  : ==> Parameters: 
2020-09-15 15:59:19.882 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.blog.mapper.TagMapper.findByExample  : <==      Total: 5
2020-09-15 15:59:19.886 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,10
2020-09-15 15:59:19.886 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 15:59:19.888 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 5
2020-09-15 15:59:19.888  INFO 4320 --- [http-nio-8080-exec-2] com.chenxin.blog.aspect.LogAspect        : Return ------ /index
2020-09-15 15:59:19.889 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 15:59:19.890 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.indexoage(String), null,{page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=5, pages=1, reasonable=false, pageSizeZero=false}, toptype=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], toptag=[Tag{id=1, name='mysql', Tag{id=6, name='mybaits', Tag{id=4, name='spring', Tag{id=2, name='大数据', Tag{id=8, name='python'], topblog=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=10, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=11, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=20, title='mysql数据库的查询拉', content='**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这是一篇好博客', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:27:27 CST 2019, updatetime=Thu Sep 05 09:44:20 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=24, title='JAVA是什么', content='##java是什么&sup3; &hearts;
虹口区我说的浓氨水', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='我is单词vhuiowdecvb', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 13 11:08:48 CST 2018, updatetime=Thu Sep 13 11:08:48 CST 2018, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), /index(String)
2020-09-15 15:59:20.130 DEBUG 4320 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 15:59:20.716  INFO 4320 --- [http-nio-8080-exec-8] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/fragments/newblog', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.newblogs', args=[{}]}
2020-09-15 15:59:20.717 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,3
2020-09-15 15:59:20.718 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 15:59:20.722 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 3
2020-09-15 15:59:20.722  INFO 4320 --- [http-nio-8080-exec-8] com.chenxin.blog.aspect.LogAspect        : Return ------ fragments :: newbloglist
2020-09-15 15:59:20.723 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 15:59:20.724 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/fragments/newblog(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.newblogs(String), {newblogs=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=10, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=11, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), fragments :: newbloglist(String)
2020-09-15 15:59:20.896 DEBUG 4320 --- [http-nio-8080-exec-8] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 15:59:20.897 ERROR 4320 --- [http-nio-8080-exec-8] org.thymeleaf.TemplateEngine             : [THYMELEAF][http-nio-8080-exec-8] Exception processing template "fragments::[newbloglist]": Error resolving template [fragments], template might not exist or might not be accessible by any of the configured Template Resolvers

org.thymeleaf.exceptions.TemplateInputException: Error resolving template [fragments], template might not exist or might not be accessible by any of the configured Template Resolvers
	at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:869)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:607)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1589)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-09-15 15:59:20.898 ERROR 4320 --- [http-nio-8080-exec-8] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: Error resolving template [fragments], template might not exist or might not be accessible by any of the configured Template Resolvers] with root cause

org.thymeleaf.exceptions.TemplateInputException: Error resolving template [fragments], template might not exist or might not be accessible by any of the configured Template Resolvers
	at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:869)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:607)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1589)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-09-15 16:01:06.248  INFO 4320 --- [Thread-44] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-09-15 16:01:06.256  INFO 4320 --- [Thread-44] com.alibaba.druid.pool.DruidDataSource   : {dataSource-6} closed
2020-09-15 16:01:06.484  INFO 4320 --- [restartedMain] com.chenxin.blog.BlogApplication         : Starting BlogApplication on LAPTOP-UGEIKVSJ with PID 4320 (D:\Program Files\idea-workaplace\blog\target\classes started by asus in D:\Program Files\idea-workaplace\blog)
2020-09-15 16:01:06.484 DEBUG 4320 --- [restartedMain] com.chenxin.blog.BlogApplication         : Running with Spring Boot v2.3.3.RELEASE, Spring v5.2.8.RELEASE
2020-09-15 16:01:06.484  INFO 4320 --- [restartedMain] com.chenxin.blog.BlogApplication         : The following profiles are active: dev
2020-09-15 16:01:06.715  INFO 4320 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-09-15 16:01:06.715  INFO 4320 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-09-15 16:01:06.726  INFO 4320 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 10ms. Found 0 Redis repository interfaces.
2020-09-15 16:01:06.923  INFO 4320 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-09-15 16:01:06.924  INFO 4320 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-09-15 16:01:06.924  INFO 4320 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.37]
2020-09-15 16:01:06.942  INFO 4320 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-09-15 16:01:06.942  INFO 4320 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 455 ms
2020-09-15 16:01:07.327  INFO 4320 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-09-15 16:01:07.366  INFO 4320 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-09-15 16:01:07.790  INFO 4320 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-09-15 16:01:07.802  INFO 4320 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-09-15 16:01:07.806  INFO 4320 --- [restartedMain] com.chenxin.blog.BlogApplication         : Started BlogApplication in 1.369 seconds (JVM running for 3937.663)
2020-09-15 16:01:07.807  INFO 4320 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2020-09-15 16:01:16.157  INFO 4320 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-09-15 16:01:16.157  INFO 4320 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-09-15 16:01:16.168  INFO 4320 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 11 ms
2020-09-15 16:01:16.170  INFO 4320 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.indexoage', args=[null, {}]}
2020-09-15 16:01:16.227  INFO 4320 --- [http-nio-8080-exec-1] com.alibaba.druid.pool.DruidDataSource   : {dataSource-7} inited
2020-09-15 16:01:16.227 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByPaging_COUNT         : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0
2020-09-15 16:01:16.228 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByPaging_COUNT         : ==> Parameters: 
2020-09-15 16:01:16.235 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByPaging_COUNT         : <==      Total: 1
2020-09-15 16:01:16.236 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.m.BlogMapper.findBlogByPaging      : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 LIMIT ?
2020-09-15 16:01:16.236 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.m.BlogMapper.findBlogByPaging      : ==> Parameters: 10(Integer)
2020-09-15 16:01:16.238 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.m.BlogMapper.findBlogByPaging      : <==      Total: 5
2020-09-15 16:01:16.242 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC limit 0,6
2020-09-15 16:01:16.242 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 16:01:16.243 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 16:01:16.247 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByExample  : ==>  Preparing: SELECT t.id, t.NAME, COUNT( bt.blog_id ) countBlog FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.isrecommend = 0 GROUP BY id ORDER BY countBlog DESC limit 0,10
2020-09-15 16:01:16.248 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByExample  : ==> Parameters: 
2020-09-15 16:01:16.250 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByExample  : <==      Total: 5
2020-09-15 16:01:16.253 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,10
2020-09-15 16:01:16.254 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 16:01:16.256 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 5
2020-09-15 16:01:16.256  INFO 4320 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Return ------ /index
2020-09-15 16:01:16.257 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 16:01:16.258 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.indexoage(String), null,{page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=5, pages=1, reasonable=false, pageSizeZero=false}, toptype=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], toptag=[Tag{id=1, name='mysql', Tag{id=6, name='mybaits', Tag{id=4, name='spring', Tag{id=2, name='大数据', Tag{id=8, name='python'], topblog=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=10, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=11, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=20, title='mysql数据库的查询拉', content='**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这是一篇好博客', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:27:27 CST 2019, updatetime=Thu Sep 05 09:44:20 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=24, title='JAVA是什么', content='##java是什么&sup3; &hearts;
虹口区我说的浓氨水', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='我is单词vhuiowdecvb', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 13 11:08:48 CST 2018, updatetime=Thu Sep 13 11:08:48 CST 2018, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), /index(String)
2020-09-15 16:01:16.444 DEBUG 4320 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 16:01:16.869  INFO 4320 --- [http-nio-8080-exec-10] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/fragments/newblog', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.newblogs', args=[{}]}
2020-09-15 16:01:16.870 DEBUG 4320 --- [http-nio-8080-exec-10] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,3
2020-09-15 16:01:16.871 DEBUG 4320 --- [http-nio-8080-exec-10] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 16:01:16.873 DEBUG 4320 --- [http-nio-8080-exec-10] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 3
2020-09-15 16:01:16.874  INFO 4320 --- [http-nio-8080-exec-10] com.chenxin.blog.aspect.LogAspect        : Return ------ fragments :: newbloglist
2020-09-15 16:01:16.874 DEBUG 4320 --- [http-nio-8080-exec-10] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 16:01:16.875 DEBUG 4320 --- [http-nio-8080-exec-10] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/fragments/newblog(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.newblogs(String), {newblogs=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=10, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=11, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), fragments :: newbloglist(String)
2020-09-15 16:01:17.162 DEBUG 4320 --- [http-nio-8080-exec-10] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 16:01:17.168 ERROR 4320 --- [http-nio-8080-exec-10] org.thymeleaf.TemplateEngine             : [THYMELEAF][http-nio-8080-exec-10] Exception processing template "fragments::[newbloglist]": Error resolving template [fragments], template might not exist or might not be accessible by any of the configured Template Resolvers

org.thymeleaf.exceptions.TemplateInputException: Error resolving template [fragments], template might not exist or might not be accessible by any of the configured Template Resolvers
	at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:869)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:607)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1589)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-09-15 16:01:17.169 ERROR 4320 --- [http-nio-8080-exec-10] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: Error resolving template [fragments], template might not exist or might not be accessible by any of the configured Template Resolvers] with root cause

org.thymeleaf.exceptions.TemplateInputException: Error resolving template [fragments], template might not exist or might not be accessible by any of the configured Template Resolvers
	at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:869)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:607)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1589)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-09-15 16:03:35.033  INFO 4320 --- [http-nio-8080-exec-4] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.indexoage', args=[null, {}]}
2020-09-15 16:03:35.039 DEBUG 4320 --- [http-nio-8080-exec-4] c.c.b.m.B.findBlogByPaging_COUNT         : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0
2020-09-15 16:03:35.039 DEBUG 4320 --- [http-nio-8080-exec-4] c.c.b.m.B.findBlogByPaging_COUNT         : ==> Parameters: 
2020-09-15 16:03:35.042 DEBUG 4320 --- [http-nio-8080-exec-4] c.c.b.m.B.findBlogByPaging_COUNT         : <==      Total: 1
2020-09-15 16:03:35.042 DEBUG 4320 --- [http-nio-8080-exec-4] c.c.b.m.BlogMapper.findBlogByPaging      : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 LIMIT ?
2020-09-15 16:03:35.043 DEBUG 4320 --- [http-nio-8080-exec-4] c.c.b.m.BlogMapper.findBlogByPaging      : ==> Parameters: 10(Integer)
2020-09-15 16:03:35.047 DEBUG 4320 --- [http-nio-8080-exec-4] c.c.b.m.BlogMapper.findBlogByPaging      : <==      Total: 5
2020-09-15 16:03:35.047 DEBUG 4320 --- [http-nio-8080-exec-4] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC limit 0,6
2020-09-15 16:03:35.047 DEBUG 4320 --- [http-nio-8080-exec-4] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 16:03:35.048 DEBUG 4320 --- [http-nio-8080-exec-4] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 16:03:35.049 DEBUG 4320 --- [http-nio-8080-exec-4] c.c.blog.mapper.TagMapper.findByExample  : ==>  Preparing: SELECT t.id, t.NAME, COUNT( bt.blog_id ) countBlog FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.isrecommend = 0 GROUP BY id ORDER BY countBlog DESC limit 0,10
2020-09-15 16:03:35.049 DEBUG 4320 --- [http-nio-8080-exec-4] c.c.blog.mapper.TagMapper.findByExample  : ==> Parameters: 
2020-09-15 16:03:35.050 DEBUG 4320 --- [http-nio-8080-exec-4] c.c.blog.mapper.TagMapper.findByExample  : <==      Total: 5
2020-09-15 16:03:35.050 DEBUG 4320 --- [http-nio-8080-exec-4] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,10
2020-09-15 16:03:35.050 DEBUG 4320 --- [http-nio-8080-exec-4] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 16:03:35.052 DEBUG 4320 --- [http-nio-8080-exec-4] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 5
2020-09-15 16:03:35.052  INFO 4320 --- [http-nio-8080-exec-4] com.chenxin.blog.aspect.LogAspect        : Return ------ /index
2020-09-15 16:03:35.052 DEBUG 4320 --- [http-nio-8080-exec-4] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 16:03:35.053 DEBUG 4320 --- [http-nio-8080-exec-4] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.indexoage(String), null,{page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=5, pages=1, reasonable=false, pageSizeZero=false}, toptype=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], toptag=[Tag{id=1, name='mysql', Tag{id=6, name='mybaits', Tag{id=4, name='spring', Tag{id=2, name='大数据', Tag{id=8, name='python'], topblog=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=10, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=11, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=20, title='mysql数据库的查询拉', content='**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这是一篇好博客', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:27:27 CST 2019, updatetime=Thu Sep 05 09:44:20 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=24, title='JAVA是什么', content='##java是什么&sup3; &hearts;
虹口区我说的浓氨水', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='我is单词vhuiowdecvb', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 13 11:08:48 CST 2018, updatetime=Thu Sep 13 11:08:48 CST 2018, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), /index(String)
2020-09-15 16:03:35.211 DEBUG 4320 --- [http-nio-8080-exec-4] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 16:03:38.968  INFO 4320 --- [http-nio-8080-exec-5] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/fragments/newblog', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.newblogs', args=[{}]}
2020-09-15 16:03:38.970 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,3
2020-09-15 16:03:38.970 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 16:03:38.975 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 3
2020-09-15 16:03:38.975  INFO 4320 --- [http-nio-8080-exec-5] com.chenxin.blog.aspect.LogAspect        : Return ------ fragments :: newbloglist
2020-09-15 16:03:38.977 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 16:03:38.977 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/fragments/newblog(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.newblogs(String), {newblogs=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=10, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=11, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), fragments :: newbloglist(String)
2020-09-15 16:03:39.242 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 16:03:39.244 ERROR 4320 --- [http-nio-8080-exec-5] org.thymeleaf.TemplateEngine             : [THYMELEAF][http-nio-8080-exec-5] Exception processing template "fragments::[newbloglist]": Error resolving template [fragments], template might not exist or might not be accessible by any of the configured Template Resolvers

org.thymeleaf.exceptions.TemplateInputException: Error resolving template [fragments], template might not exist or might not be accessible by any of the configured Template Resolvers
	at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:869)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:607)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1589)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-09-15 16:03:39.244 ERROR 4320 --- [http-nio-8080-exec-5] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: Error resolving template [fragments], template might not exist or might not be accessible by any of the configured Template Resolvers] with root cause

org.thymeleaf.exceptions.TemplateInputException: Error resolving template [fragments], template might not exist or might not be accessible by any of the configured Template Resolvers
	at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:869)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:607)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1589)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-09-15 16:04:15.762  INFO 4320 --- [http-nio-8080-exec-4] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.indexoage', args=[null, {}]}
2020-09-15 16:04:15.763 DEBUG 4320 --- [http-nio-8080-exec-4] c.c.b.m.B.findBlogByPaging_COUNT         : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0
2020-09-15 16:04:15.763 DEBUG 4320 --- [http-nio-8080-exec-4] c.c.b.m.B.findBlogByPaging_COUNT         : ==> Parameters: 
2020-09-15 16:04:15.764 DEBUG 4320 --- [http-nio-8080-exec-4] c.c.b.m.B.findBlogByPaging_COUNT         : <==      Total: 1
2020-09-15 16:04:15.764 DEBUG 4320 --- [http-nio-8080-exec-4] c.c.b.m.BlogMapper.findBlogByPaging      : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 LIMIT ?
2020-09-15 16:04:15.765 DEBUG 4320 --- [http-nio-8080-exec-4] c.c.b.m.BlogMapper.findBlogByPaging      : ==> Parameters: 10(Integer)
2020-09-15 16:04:15.768 DEBUG 4320 --- [http-nio-8080-exec-4] c.c.b.m.BlogMapper.findBlogByPaging      : <==      Total: 5
2020-09-15 16:04:15.769 DEBUG 4320 --- [http-nio-8080-exec-4] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC limit 0,6
2020-09-15 16:04:15.770 DEBUG 4320 --- [http-nio-8080-exec-4] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 16:04:15.771 DEBUG 4320 --- [http-nio-8080-exec-4] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 16:04:15.771 DEBUG 4320 --- [http-nio-8080-exec-4] c.c.blog.mapper.TagMapper.findByExample  : ==>  Preparing: SELECT t.id, t.NAME, COUNT( bt.blog_id ) countBlog FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.isrecommend = 0 GROUP BY id ORDER BY countBlog DESC limit 0,10
2020-09-15 16:04:15.771 DEBUG 4320 --- [http-nio-8080-exec-4] c.c.blog.mapper.TagMapper.findByExample  : ==> Parameters: 
2020-09-15 16:04:15.772 DEBUG 4320 --- [http-nio-8080-exec-4] c.c.blog.mapper.TagMapper.findByExample  : <==      Total: 5
2020-09-15 16:04:15.772 DEBUG 4320 --- [http-nio-8080-exec-4] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,10
2020-09-15 16:04:15.772 DEBUG 4320 --- [http-nio-8080-exec-4] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 16:04:15.774 DEBUG 4320 --- [http-nio-8080-exec-4] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 5
2020-09-15 16:04:15.774  INFO 4320 --- [http-nio-8080-exec-4] com.chenxin.blog.aspect.LogAspect        : Return ------ /index
2020-09-15 16:04:15.774 DEBUG 4320 --- [http-nio-8080-exec-4] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 16:04:15.774 DEBUG 4320 --- [http-nio-8080-exec-4] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.indexoage(String), null,{page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=5, pages=1, reasonable=false, pageSizeZero=false}, toptype=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], toptag=[Tag{id=1, name='mysql', Tag{id=6, name='mybaits', Tag{id=4, name='spring', Tag{id=2, name='大数据', Tag{id=8, name='python'], topblog=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=10, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=11, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=20, title='mysql数据库的查询拉', content='**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这是一篇好博客', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:27:27 CST 2019, updatetime=Thu Sep 05 09:44:20 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=24, title='JAVA是什么', content='##java是什么&sup3; &hearts;
虹口区我说的浓氨水', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='我is单词vhuiowdecvb', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 13 11:08:48 CST 2018, updatetime=Thu Sep 13 11:08:48 CST 2018, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), /index(String)
2020-09-15 16:04:15.965 DEBUG 4320 --- [http-nio-8080-exec-4] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 16:04:18.263  INFO 4320 --- [http-nio-8080-exec-7] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/fragments/newblog', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.newblogs', args=[{}]}
2020-09-15 16:04:18.264 DEBUG 4320 --- [http-nio-8080-exec-7] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,3
2020-09-15 16:04:18.264 DEBUG 4320 --- [http-nio-8080-exec-7] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 16:04:18.266 DEBUG 4320 --- [http-nio-8080-exec-7] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 3
2020-09-15 16:04:18.266  INFO 4320 --- [http-nio-8080-exec-7] com.chenxin.blog.aspect.LogAspect        : Return ------ fragments :: newbloglist
2020-09-15 16:04:18.266 DEBUG 4320 --- [http-nio-8080-exec-7] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 16:04:18.267 DEBUG 4320 --- [http-nio-8080-exec-7] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/fragments/newblog(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.newblogs(String), {newblogs=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=10, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=11, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), fragments :: newbloglist(String)
2020-09-15 16:04:18.442 DEBUG 4320 --- [http-nio-8080-exec-7] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 16:04:18.445 ERROR 4320 --- [http-nio-8080-exec-7] org.thymeleaf.TemplateEngine             : [THYMELEAF][http-nio-8080-exec-7] Exception processing template "fragments::[newbloglist]": Error resolving template [fragments], template might not exist or might not be accessible by any of the configured Template Resolvers

org.thymeleaf.exceptions.TemplateInputException: Error resolving template [fragments], template might not exist or might not be accessible by any of the configured Template Resolvers
	at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:869)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:607)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1589)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-09-15 16:04:18.446 ERROR 4320 --- [http-nio-8080-exec-7] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: Error resolving template [fragments], template might not exist or might not be accessible by any of the configured Template Resolvers] with root cause

org.thymeleaf.exceptions.TemplateInputException: Error resolving template [fragments], template might not exist or might not be accessible by any of the configured Template Resolvers
	at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:869)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:607)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1589)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-09-15 16:07:01.459  INFO 4320 --- [http-nio-8080-exec-5] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.indexoage', args=[null, {}]}
2020-09-15 16:07:01.464 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.b.m.B.findBlogByPaging_COUNT         : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0
2020-09-15 16:07:01.464 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.b.m.B.findBlogByPaging_COUNT         : ==> Parameters: 
2020-09-15 16:07:01.467 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.b.m.B.findBlogByPaging_COUNT         : <==      Total: 1
2020-09-15 16:07:01.467 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.b.m.BlogMapper.findBlogByPaging      : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 LIMIT ?
2020-09-15 16:07:01.467 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.b.m.BlogMapper.findBlogByPaging      : ==> Parameters: 10(Integer)
2020-09-15 16:07:01.471 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.b.m.BlogMapper.findBlogByPaging      : <==      Total: 5
2020-09-15 16:07:01.472 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC limit 0,6
2020-09-15 16:07:01.472 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 16:07:01.472 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 16:07:01.473 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.blog.mapper.TagMapper.findByExample  : ==>  Preparing: SELECT t.id, t.NAME, COUNT( bt.blog_id ) countBlog FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.isrecommend = 0 GROUP BY id ORDER BY countBlog DESC limit 0,10
2020-09-15 16:07:01.473 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.blog.mapper.TagMapper.findByExample  : ==> Parameters: 
2020-09-15 16:07:01.474 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.blog.mapper.TagMapper.findByExample  : <==      Total: 5
2020-09-15 16:07:01.474 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,10
2020-09-15 16:07:01.474 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 16:07:01.476 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 5
2020-09-15 16:07:01.476  INFO 4320 --- [http-nio-8080-exec-5] com.chenxin.blog.aspect.LogAspect        : Return ------ /index
2020-09-15 16:07:01.477 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 16:07:01.477 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.indexoage(String), null,{page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=5, pages=1, reasonable=false, pageSizeZero=false}, toptype=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], toptag=[Tag{id=1, name='mysql', Tag{id=6, name='mybaits', Tag{id=4, name='spring', Tag{id=2, name='大数据', Tag{id=8, name='python'], topblog=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=10, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=11, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=20, title='mysql数据库的查询拉', content='**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这是一篇好博客', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:27:27 CST 2019, updatetime=Thu Sep 05 09:44:20 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=24, title='JAVA是什么', content='##java是什么&sup3; &hearts;
虹口区我说的浓氨水', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='我is单词vhuiowdecvb', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 13 11:08:48 CST 2018, updatetime=Thu Sep 13 11:08:48 CST 2018, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), /index(String)
2020-09-15 16:07:01.616 DEBUG 4320 --- [http-nio-8080-exec-5] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 16:07:02.007  INFO 4320 --- [http-nio-8080-exec-4] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/fragments/newblog', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.newblogs', args=[{}]}
2020-09-15 16:07:02.008 DEBUG 4320 --- [http-nio-8080-exec-4] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,3
2020-09-15 16:07:02.008 DEBUG 4320 --- [http-nio-8080-exec-4] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 16:07:02.010 DEBUG 4320 --- [http-nio-8080-exec-4] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 3
2020-09-15 16:07:02.011  INFO 4320 --- [http-nio-8080-exec-4] com.chenxin.blog.aspect.LogAspect        : Return ------ fragments :: newbloglist
2020-09-15 16:07:02.011 DEBUG 4320 --- [http-nio-8080-exec-4] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 16:07:02.011 DEBUG 4320 --- [http-nio-8080-exec-4] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/fragments/newblog(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.newblogs(String), {newblogs=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=10, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=11, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), fragments :: newbloglist(String)
2020-09-15 16:07:02.308 DEBUG 4320 --- [http-nio-8080-exec-4] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 16:07:02.309 ERROR 4320 --- [http-nio-8080-exec-4] org.thymeleaf.TemplateEngine             : [THYMELEAF][http-nio-8080-exec-4] Exception processing template "fragments::[newbloglist]": Error resolving template [fragments], template might not exist or might not be accessible by any of the configured Template Resolvers

org.thymeleaf.exceptions.TemplateInputException: Error resolving template [fragments], template might not exist or might not be accessible by any of the configured Template Resolvers
	at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:869)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:607)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1589)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-09-15 16:07:02.309 ERROR 4320 --- [http-nio-8080-exec-4] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: Error resolving template [fragments], template might not exist or might not be accessible by any of the configured Template Resolvers] with root cause

org.thymeleaf.exceptions.TemplateInputException: Error resolving template [fragments], template might not exist or might not be accessible by any of the configured Template Resolvers
	at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:869)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:607)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1589)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-09-15 16:09:12.617  INFO 1484 --- [restartedMain] com.chenxin.blog.BlogApplication         : Starting BlogApplication on LAPTOP-UGEIKVSJ with PID 1484 (D:\Program Files\idea-workaplace\blog\target\classes started by asus in D:\Program Files\idea-workaplace\blog)
2020-09-15 16:09:12.620 DEBUG 1484 --- [restartedMain] com.chenxin.blog.BlogApplication         : Running with Spring Boot v2.3.3.RELEASE, Spring v5.2.8.RELEASE
2020-09-15 16:09:12.620  INFO 1484 --- [restartedMain] com.chenxin.blog.BlogApplication         : The following profiles are active: dev
2020-09-15 16:09:12.763  INFO 1484 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-09-15 16:09:12.763  INFO 1484 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-09-15 16:09:14.426  INFO 1484 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-09-15 16:09:14.429  INFO 1484 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-09-15 16:09:14.544  INFO 1484 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 34ms. Found 0 Redis repository interfaces.
2020-09-15 16:09:15.755  INFO 1484 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-09-15 16:09:15.766  INFO 1484 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-09-15 16:09:15.766  INFO 1484 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.37]
2020-09-15 16:09:15.896  INFO 1484 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-09-15 16:09:15.897  INFO 1484 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 3134 ms
2020-09-15 16:09:17.674  INFO 1484 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-09-15 16:09:17.846  INFO 1484 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-09-15 16:09:19.000  INFO 1484 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-09-15 16:09:19.064  INFO 1484 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-09-15 16:09:19.075  INFO 1484 --- [restartedMain] com.chenxin.blog.BlogApplication         : Started BlogApplication in 7.292 seconds (JVM running for 9.08)
2020-09-15 16:09:24.243  INFO 1484 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-09-15 16:09:24.244  INFO 1484 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-09-15 16:09:24.254  INFO 1484 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 10 ms
2020-09-15 16:09:24.310  INFO 1484 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.indexoage', args=[null, {}]}
2020-09-15 16:09:25.133  INFO 1484 --- [http-nio-8080-exec-1] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-09-15 16:09:25.232 DEBUG 1484 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByPaging_COUNT         : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0
2020-09-15 16:09:25.417 DEBUG 1484 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByPaging_COUNT         : ==> Parameters: 
2020-09-15 16:09:25.443 DEBUG 1484 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByPaging_COUNT         : <==      Total: 1
2020-09-15 16:09:25.447 DEBUG 1484 --- [http-nio-8080-exec-1] c.c.b.m.BlogMapper.findBlogByPaging      : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 LIMIT ?
2020-09-15 16:09:25.451 DEBUG 1484 --- [http-nio-8080-exec-1] c.c.b.m.BlogMapper.findBlogByPaging      : ==> Parameters: 10(Integer)
2020-09-15 16:09:25.460 DEBUG 1484 --- [http-nio-8080-exec-1] c.c.b.m.BlogMapper.findBlogByPaging      : <==      Total: 5
2020-09-15 16:09:25.497 DEBUG 1484 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC limit 0,6
2020-09-15 16:09:25.502 DEBUG 1484 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 16:09:25.504 DEBUG 1484 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 16:09:25.508 DEBUG 1484 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByExample  : ==>  Preparing: SELECT t.id, t.NAME, COUNT( bt.blog_id ) countBlog FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.isrecommend = 0 GROUP BY id ORDER BY countBlog DESC limit 0,10
2020-09-15 16:09:25.509 DEBUG 1484 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByExample  : ==> Parameters: 
2020-09-15 16:09:25.513 DEBUG 1484 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByExample  : <==      Total: 5
2020-09-15 16:09:25.519 DEBUG 1484 --- [http-nio-8080-exec-1] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,10
2020-09-15 16:09:25.520 DEBUG 1484 --- [http-nio-8080-exec-1] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 16:09:25.524 DEBUG 1484 --- [http-nio-8080-exec-1] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 5
2020-09-15 16:09:25.525  INFO 1484 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Return ------ /index
2020-09-15 16:09:25.526 DEBUG 1484 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 16:09:25.530 DEBUG 1484 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.indexoage(String), null,{page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=5, pages=1, reasonable=false, pageSizeZero=false}, toptype=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], toptag=[Tag{id=1, name='mysql', Tag{id=6, name='mybaits', Tag{id=4, name='spring', Tag{id=2, name='大数据', Tag{id=8, name='python'], topblog=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=10, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=11, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=20, title='mysql数据库的查询拉', content='**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这是一篇好博客', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:27:27 CST 2019, updatetime=Thu Sep 05 09:44:20 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=24, title='JAVA是什么', content='##java是什么&sup3; &hearts;
虹口区我说的浓氨水', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='我is单词vhuiowdecvb', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 13 11:08:48 CST 2018, updatetime=Thu Sep 13 11:08:48 CST 2018, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), /index(String)
2020-09-15 16:09:25.748 DEBUG 1484 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 16:09:26.762  INFO 1484 --- [http-nio-8080-exec-4] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/fragments/newblog', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.newblogs', args=[{}]}
2020-09-15 16:09:26.763 DEBUG 1484 --- [http-nio-8080-exec-4] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,3
2020-09-15 16:09:26.764 DEBUG 1484 --- [http-nio-8080-exec-4] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 16:09:26.768 DEBUG 1484 --- [http-nio-8080-exec-4] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 3
2020-09-15 16:09:26.769  INFO 1484 --- [http-nio-8080-exec-4] com.chenxin.blog.aspect.LogAspect        : Return ------ fragments :: newbloglist
2020-09-15 16:09:26.769 DEBUG 1484 --- [http-nio-8080-exec-4] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 16:09:26.771 DEBUG 1484 --- [http-nio-8080-exec-4] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/fragments/newblog(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.newblogs(String), {newblogs=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=10, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=11, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), fragments :: newbloglist(String)
2020-09-15 16:09:26.882 DEBUG 1484 --- [http-nio-8080-exec-4] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 16:09:26.926 ERROR 1484 --- [http-nio-8080-exec-4] org.thymeleaf.TemplateEngine             : [THYMELEAF][http-nio-8080-exec-4] Exception processing template "fragments::[newbloglist]": Error resolving template [fragments], template might not exist or might not be accessible by any of the configured Template Resolvers

org.thymeleaf.exceptions.TemplateInputException: Error resolving template [fragments], template might not exist or might not be accessible by any of the configured Template Resolvers
	at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:869)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:607)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1589)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-09-15 16:09:26.929 ERROR 1484 --- [http-nio-8080-exec-4] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: Error resolving template [fragments], template might not exist or might not be accessible by any of the configured Template Resolvers] with root cause

org.thymeleaf.exceptions.TemplateInputException: Error resolving template [fragments], template might not exist or might not be accessible by any of the configured Template Resolvers
	at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:869)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:607)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1589)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-09-15 16:14:05.802  INFO 1484 --- [http-nio-8080-exec-3] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.indexoage', args=[null, {}]}
2020-09-15 16:14:05.814 DEBUG 1484 --- [http-nio-8080-exec-3] c.c.b.m.B.findBlogByPaging_COUNT         : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0
2020-09-15 16:14:05.815 DEBUG 1484 --- [http-nio-8080-exec-3] c.c.b.m.B.findBlogByPaging_COUNT         : ==> Parameters: 
2020-09-15 16:14:05.817 DEBUG 1484 --- [http-nio-8080-exec-3] c.c.b.m.B.findBlogByPaging_COUNT         : <==      Total: 1
2020-09-15 16:14:05.818 DEBUG 1484 --- [http-nio-8080-exec-3] c.c.b.m.BlogMapper.findBlogByPaging      : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 LIMIT ?
2020-09-15 16:14:05.818 DEBUG 1484 --- [http-nio-8080-exec-3] c.c.b.m.BlogMapper.findBlogByPaging      : ==> Parameters: 10(Integer)
2020-09-15 16:14:05.826 DEBUG 1484 --- [http-nio-8080-exec-3] c.c.b.m.BlogMapper.findBlogByPaging      : <==      Total: 5
2020-09-15 16:14:05.826 DEBUG 1484 --- [http-nio-8080-exec-3] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC limit 0,6
2020-09-15 16:14:05.827 DEBUG 1484 --- [http-nio-8080-exec-3] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 16:14:05.828 DEBUG 1484 --- [http-nio-8080-exec-3] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 16:14:05.829 DEBUG 1484 --- [http-nio-8080-exec-3] c.c.blog.mapper.TagMapper.findByExample  : ==>  Preparing: SELECT t.id, t.NAME, COUNT( bt.blog_id ) countBlog FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.isrecommend = 0 GROUP BY id ORDER BY countBlog DESC limit 0,10
2020-09-15 16:14:05.829 DEBUG 1484 --- [http-nio-8080-exec-3] c.c.blog.mapper.TagMapper.findByExample  : ==> Parameters: 
2020-09-15 16:14:05.832 DEBUG 1484 --- [http-nio-8080-exec-3] c.c.blog.mapper.TagMapper.findByExample  : <==      Total: 5
2020-09-15 16:14:05.833 DEBUG 1484 --- [http-nio-8080-exec-3] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,10
2020-09-15 16:14:05.834 DEBUG 1484 --- [http-nio-8080-exec-3] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 16:14:05.838 DEBUG 1484 --- [http-nio-8080-exec-3] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 5
2020-09-15 16:14:05.839  INFO 1484 --- [http-nio-8080-exec-3] com.chenxin.blog.aspect.LogAspect        : Return ------ /index
2020-09-15 16:14:05.840 DEBUG 1484 --- [http-nio-8080-exec-3] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 16:14:05.844 DEBUG 1484 --- [http-nio-8080-exec-3] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.indexoage(String), null,{page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=5, pages=1, reasonable=false, pageSizeZero=false}, toptype=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], toptag=[Tag{id=1, name='mysql', Tag{id=6, name='mybaits', Tag{id=4, name='spring', Tag{id=2, name='大数据', Tag{id=8, name='python'], topblog=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=10, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=11, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=20, title='mysql数据库的查询拉', content='**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这是一篇好博客', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:27:27 CST 2019, updatetime=Thu Sep 05 09:44:20 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=24, title='JAVA是什么', content='##java是什么&sup3; &hearts;
虹口区我说的浓氨水', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='我is单词vhuiowdecvb', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 13 11:08:48 CST 2018, updatetime=Thu Sep 13 11:08:48 CST 2018, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), /index(String)
2020-09-15 16:14:05.928 DEBUG 1484 --- [http-nio-8080-exec-3] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 16:14:06.339  INFO 1484 --- [http-nio-8080-exec-5] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/fragments/newblog', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.newblogs', args=[{}]}
2020-09-15 16:14:06.339 DEBUG 1484 --- [http-nio-8080-exec-5] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,3
2020-09-15 16:14:06.340 DEBUG 1484 --- [http-nio-8080-exec-5] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 16:14:06.347 DEBUG 1484 --- [http-nio-8080-exec-5] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 3
2020-09-15 16:14:06.347  INFO 1484 --- [http-nio-8080-exec-5] com.chenxin.blog.aspect.LogAspect        : Return ------ fragments :: newbloglist
2020-09-15 16:14:06.348 DEBUG 1484 --- [http-nio-8080-exec-5] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 16:14:06.351 DEBUG 1484 --- [http-nio-8080-exec-5] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/fragments/newblog(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.newblogs(String), {newblogs=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=10, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=11, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), fragments :: newbloglist(String)
2020-09-15 16:14:06.539 DEBUG 1484 --- [http-nio-8080-exec-5] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 16:14:06.541 ERROR 1484 --- [http-nio-8080-exec-5] org.thymeleaf.TemplateEngine             : [THYMELEAF][http-nio-8080-exec-5] Exception processing template "fragments::[newbloglist]": Error resolving template [fragments], template might not exist or might not be accessible by any of the configured Template Resolvers

org.thymeleaf.exceptions.TemplateInputException: Error resolving template [fragments], template might not exist or might not be accessible by any of the configured Template Resolvers
	at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:869)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:607)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1589)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-09-15 16:14:06.541 ERROR 1484 --- [http-nio-8080-exec-5] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: Error resolving template [fragments], template might not exist or might not be accessible by any of the configured Template Resolvers] with root cause

org.thymeleaf.exceptions.TemplateInputException: Error resolving template [fragments], template might not exist or might not be accessible by any of the configured Template Resolvers
	at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:869)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:607)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1589)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-09-15 16:15:05.376  INFO 1484 --- [http-nio-8080-exec-2] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/types', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.TypeController.typelist', args=[null, null, {}]}
2020-09-15 16:15:05.383 DEBUG 1484 --- [http-nio-8080-exec-2] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC
2020-09-15 16:15:05.385 DEBUG 1484 --- [http-nio-8080-exec-2] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 16:15:05.391 DEBUG 1484 --- [http-nio-8080-exec-2] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 16:15:05.420 DEBUG 1484 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0 AND b.type_id = ?
2020-09-15 16:15:05.422 DEBUG 1484 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==> Parameters: 2(Long)
2020-09-15 16:15:05.443 DEBUG 1484 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : <==      Total: 1
2020-09-15 16:15:05.443 DEBUG 1484 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTypeIdAndPage        : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 and b.type_id=? ORDER BY b.issue asc LIMIT ?
2020-09-15 16:15:05.444 DEBUG 1484 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTypeIdAndPage        : ==> Parameters: 2(Long), 10(Integer)
2020-09-15 16:15:05.449 DEBUG 1484 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTypeIdAndPage        : <==      Total: 4
2020-09-15 16:15:05.451  INFO 1484 --- [http-nio-8080-exec-2] com.chenxin.blog.aspect.LogAspect        : Return ------ types
2020-09-15 16:15:05.451 DEBUG 1484 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 16:15:05.451 DEBUG 1484 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/types(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.TypeController.typelist(String), null,null,{types=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=4, pages=1, reasonable=false, pageSizeZero=false}}(String), types(String)
2020-09-15 16:15:05.655 DEBUG 1484 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 16:15:06.156  INFO 1484 --- [http-nio-8080-exec-5] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/fragments/newblog', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.newblogs', args=[{}]}
2020-09-15 16:15:06.157 DEBUG 1484 --- [http-nio-8080-exec-5] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,3
2020-09-15 16:15:06.157 DEBUG 1484 --- [http-nio-8080-exec-5] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 16:15:06.162 DEBUG 1484 --- [http-nio-8080-exec-5] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 3
2020-09-15 16:15:06.164  INFO 1484 --- [http-nio-8080-exec-5] com.chenxin.blog.aspect.LogAspect        : Return ------ fragments :: newbloglist
2020-09-15 16:15:06.165 DEBUG 1484 --- [http-nio-8080-exec-5] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 16:15:06.166 DEBUG 1484 --- [http-nio-8080-exec-5] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/fragments/newblog(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.newblogs(String), {newblogs=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=10, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=11, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), fragments :: newbloglist(String)
2020-09-15 16:15:06.246 DEBUG 1484 --- [http-nio-8080-exec-5] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 16:15:06.249 ERROR 1484 --- [http-nio-8080-exec-5] org.thymeleaf.TemplateEngine             : [THYMELEAF][http-nio-8080-exec-5] Exception processing template "fragments::[newbloglist]": Error resolving template [fragments], template might not exist or might not be accessible by any of the configured Template Resolvers

org.thymeleaf.exceptions.TemplateInputException: Error resolving template [fragments], template might not exist or might not be accessible by any of the configured Template Resolvers
	at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:869)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:607)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1589)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-09-15 16:15:06.250 ERROR 1484 --- [http-nio-8080-exec-5] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: Error resolving template [fragments], template might not exist or might not be accessible by any of the configured Template Resolvers] with root cause

org.thymeleaf.exceptions.TemplateInputException: Error resolving template [fragments], template might not exist or might not be accessible by any of the configured Template Resolvers
	at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:869)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:607)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1589)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-09-15 16:17:00.149  INFO 1484 --- [http-nio-8080-exec-2] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/types', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.TypeController.typelist', args=[null, null, {}]}
2020-09-15 16:17:00.155 DEBUG 1484 --- [http-nio-8080-exec-2] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC
2020-09-15 16:17:00.155 DEBUG 1484 --- [http-nio-8080-exec-2] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 16:17:00.158 DEBUG 1484 --- [http-nio-8080-exec-2] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 16:17:00.161 DEBUG 1484 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0 AND b.type_id = ?
2020-09-15 16:17:00.161 DEBUG 1484 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==> Parameters: 2(Long)
2020-09-15 16:17:00.163 DEBUG 1484 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : <==      Total: 1
2020-09-15 16:17:00.165 DEBUG 1484 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTypeIdAndPage        : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 and b.type_id=? ORDER BY b.issue asc LIMIT ?
2020-09-15 16:17:00.165 DEBUG 1484 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTypeIdAndPage        : ==> Parameters: 2(Long), 10(Integer)
2020-09-15 16:17:00.171 DEBUG 1484 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTypeIdAndPage        : <==      Total: 4
2020-09-15 16:17:00.171  INFO 1484 --- [http-nio-8080-exec-2] com.chenxin.blog.aspect.LogAspect        : Return ------ types
2020-09-15 16:17:00.171 DEBUG 1484 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 16:17:00.172 DEBUG 1484 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/types(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.TypeController.typelist(String), null,null,{types=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=4, pages=1, reasonable=false, pageSizeZero=false}}(String), types(String)
2020-09-15 16:17:00.695 DEBUG 1484 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 16:17:01.056  INFO 1484 --- [http-nio-8080-exec-9] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/fragments/newblog', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.newblogs', args=[{}]}
2020-09-15 16:17:01.057 DEBUG 1484 --- [http-nio-8080-exec-9] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,3
2020-09-15 16:17:01.057 DEBUG 1484 --- [http-nio-8080-exec-9] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 16:17:01.060 DEBUG 1484 --- [http-nio-8080-exec-9] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 3
2020-09-15 16:17:01.061  INFO 1484 --- [http-nio-8080-exec-9] com.chenxin.blog.aspect.LogAspect        : Return ------ fragments :: newbloglist
2020-09-15 16:17:01.062 DEBUG 1484 --- [http-nio-8080-exec-9] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 16:17:01.063 DEBUG 1484 --- [http-nio-8080-exec-9] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/fragments/newblog(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.newblogs(String), {newblogs=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=10, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=11, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), fragments :: newbloglist(String)
2020-09-15 16:17:01.154 DEBUG 1484 --- [http-nio-8080-exec-9] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 16:17:01.158 ERROR 1484 --- [http-nio-8080-exec-9] org.thymeleaf.TemplateEngine             : [THYMELEAF][http-nio-8080-exec-9] Exception processing template "fragments::[newbloglist]": Error resolving template [fragments], template might not exist or might not be accessible by any of the configured Template Resolvers

org.thymeleaf.exceptions.TemplateInputException: Error resolving template [fragments], template might not exist or might not be accessible by any of the configured Template Resolvers
	at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:869)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:607)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1589)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-09-15 16:17:01.160 ERROR 1484 --- [http-nio-8080-exec-9] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: Error resolving template [fragments], template might not exist or might not be accessible by any of the configured Template Resolvers] with root cause

org.thymeleaf.exceptions.TemplateInputException: Error resolving template [fragments], template might not exist or might not be accessible by any of the configured Template Resolvers
	at org.thymeleaf.engine.TemplateManager.resolveTemplate(TemplateManager.java:869)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:607)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1589)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-09-15 16:21:52.560  INFO 1484 --- [http-nio-8080-exec-2] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/types', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.TypeController.typelist', args=[null, null, {}]}
2020-09-15 16:21:52.568 DEBUG 1484 --- [http-nio-8080-exec-2] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC
2020-09-15 16:21:52.568 DEBUG 1484 --- [http-nio-8080-exec-2] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 16:21:52.570 DEBUG 1484 --- [http-nio-8080-exec-2] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 16:21:52.572 DEBUG 1484 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0 AND b.type_id = ?
2020-09-15 16:21:52.573 DEBUG 1484 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==> Parameters: 2(Long)
2020-09-15 16:21:52.574 DEBUG 1484 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : <==      Total: 1
2020-09-15 16:21:52.574 DEBUG 1484 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTypeIdAndPage        : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 and b.type_id=? ORDER BY b.issue asc LIMIT ?
2020-09-15 16:21:52.575 DEBUG 1484 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTypeIdAndPage        : ==> Parameters: 2(Long), 10(Integer)
2020-09-15 16:21:52.578 DEBUG 1484 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTypeIdAndPage        : <==      Total: 4
2020-09-15 16:21:52.578  INFO 1484 --- [http-nio-8080-exec-2] com.chenxin.blog.aspect.LogAspect        : Return ------ types
2020-09-15 16:21:52.578 DEBUG 1484 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 16:21:52.579 DEBUG 1484 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/types(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.TypeController.typelist(String), null,null,{types=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=4, pages=1, reasonable=false, pageSizeZero=false}}(String), types(String)
2020-09-15 16:21:52.667 DEBUG 1484 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 16:22:07.853  INFO 1484 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.indexoage', args=[null, {}]}
2020-09-15 16:22:07.854 DEBUG 1484 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByPaging_COUNT         : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0
2020-09-15 16:22:07.854 DEBUG 1484 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByPaging_COUNT         : ==> Parameters: 
2020-09-15 16:22:07.856 DEBUG 1484 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByPaging_COUNT         : <==      Total: 1
2020-09-15 16:22:07.856 DEBUG 1484 --- [http-nio-8080-exec-1] c.c.b.m.BlogMapper.findBlogByPaging      : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 LIMIT ?
2020-09-15 16:22:07.857 DEBUG 1484 --- [http-nio-8080-exec-1] c.c.b.m.BlogMapper.findBlogByPaging      : ==> Parameters: 10(Integer)
2020-09-15 16:22:07.862 DEBUG 1484 --- [http-nio-8080-exec-1] c.c.b.m.BlogMapper.findBlogByPaging      : <==      Total: 5
2020-09-15 16:22:07.863 DEBUG 1484 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC limit 0,6
2020-09-15 16:22:07.863 DEBUG 1484 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 16:22:07.864 DEBUG 1484 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 16:22:07.865 DEBUG 1484 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByExample  : ==>  Preparing: SELECT t.id, t.NAME, COUNT( bt.blog_id ) countBlog FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.isrecommend = 0 GROUP BY id ORDER BY countBlog DESC limit 0,10
2020-09-15 16:22:07.865 DEBUG 1484 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByExample  : ==> Parameters: 
2020-09-15 16:22:07.866 DEBUG 1484 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByExample  : <==      Total: 5
2020-09-15 16:22:07.867 DEBUG 1484 --- [http-nio-8080-exec-1] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,10
2020-09-15 16:22:07.867 DEBUG 1484 --- [http-nio-8080-exec-1] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 16:22:07.869 DEBUG 1484 --- [http-nio-8080-exec-1] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 5
2020-09-15 16:22:07.870  INFO 1484 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Return ------ /index
2020-09-15 16:22:07.870 DEBUG 1484 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 16:22:07.871 DEBUG 1484 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.indexoage(String), null,{page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=5, pages=1, reasonable=false, pageSizeZero=false}, toptype=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], toptag=[Tag{id=1, name='mysql', Tag{id=6, name='mybaits', Tag{id=4, name='spring', Tag{id=2, name='大数据', Tag{id=8, name='python'], topblog=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=10, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=11, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=20, title='mysql数据库的查询拉', content='**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这是一篇好博客', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:27:27 CST 2019, updatetime=Thu Sep 05 09:44:20 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=24, title='JAVA是什么', content='##java是什么&sup3; &hearts;
虹口区我说的浓氨水', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='我is单词vhuiowdecvb', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 13 11:08:48 CST 2018, updatetime=Thu Sep 13 11:08:48 CST 2018, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), /index(String)
2020-09-15 16:22:07.967 DEBUG 1484 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 16:22:56.762  INFO 1484 --- [Thread-21] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-09-15 16:22:56.852  INFO 1484 --- [Thread-21] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-09-15 16:22:57.199  INFO 1484 --- [restartedMain] com.chenxin.blog.BlogApplication         : Starting BlogApplication on LAPTOP-UGEIKVSJ with PID 1484 (D:\Program Files\idea-workaplace\blog\target\classes started by asus in D:\Program Files\idea-workaplace\blog)
2020-09-15 16:22:57.199 DEBUG 1484 --- [restartedMain] com.chenxin.blog.BlogApplication         : Running with Spring Boot v2.3.3.RELEASE, Spring v5.2.8.RELEASE
2020-09-15 16:22:57.199  INFO 1484 --- [restartedMain] com.chenxin.blog.BlogApplication         : The following profiles are active: dev
2020-09-15 16:22:57.469  INFO 1484 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-09-15 16:22:57.470  INFO 1484 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-09-15 16:22:57.491  INFO 1484 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 20ms. Found 0 Redis repository interfaces.
2020-09-15 16:22:57.696  INFO 1484 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-09-15 16:22:57.697  INFO 1484 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-09-15 16:22:57.697  INFO 1484 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.37]
2020-09-15 16:22:57.741  INFO 1484 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-09-15 16:22:57.741  INFO 1484 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 538 ms
2020-09-15 16:22:58.194  INFO 1484 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-09-15 16:22:58.247  INFO 1484 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-09-15 16:22:58.599  INFO 1484 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-09-15 16:22:58.612  INFO 1484 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-09-15 16:22:58.615  INFO 1484 --- [restartedMain] com.chenxin.blog.BlogApplication         : Started BlogApplication in 1.473 seconds (JVM running for 828.62)
2020-09-15 16:22:58.617  INFO 1484 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2020-09-15 16:22:59.333  INFO 1484 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-09-15 16:22:59.334  INFO 1484 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-09-15 16:22:59.346  INFO 1484 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 12 ms
2020-09-15 16:22:59.348  INFO 1484 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/types', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.TypeController.typelist', args=[null, null, {}]}
2020-09-15 16:22:59.423  INFO 1484 --- [http-nio-8080-exec-1] com.alibaba.druid.pool.DruidDataSource   : {dataSource-2} inited
2020-09-15 16:22:59.423 DEBUG 1484 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC
2020-09-15 16:22:59.424 DEBUG 1484 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 16:22:59.430 DEBUG 1484 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 16:22:59.433 DEBUG 1484 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0 AND b.type_id = ?
2020-09-15 16:22:59.434 DEBUG 1484 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==> Parameters: 2(Long)
2020-09-15 16:22:59.437 DEBUG 1484 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : <==      Total: 1
2020-09-15 16:22:59.437 DEBUG 1484 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage        : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 and b.type_id=? ORDER BY b.issue asc LIMIT ?
2020-09-15 16:22:59.439 DEBUG 1484 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage        : ==> Parameters: 2(Long), 10(Integer)
2020-09-15 16:22:59.442 DEBUG 1484 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage        : <==      Total: 4
2020-09-15 16:22:59.442  INFO 1484 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Return ------ types
2020-09-15 16:22:59.443 DEBUG 1484 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 16:22:59.444 DEBUG 1484 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/types(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.TypeController.typelist(String), null,null,{types=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=4, pages=1, reasonable=false, pageSizeZero=false}}(String), types(String)
2020-09-15 16:22:59.612 DEBUG 1484 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 16:24:18.273  INFO 428 --- [restartedMain] com.chenxin.blog.BlogApplication         : Starting BlogApplication on LAPTOP-UGEIKVSJ with PID 428 (D:\Program Files\idea-workaplace\blog\target\classes started by asus in D:\Program Files\idea-workaplace\blog)
2020-09-15 16:24:18.275 DEBUG 428 --- [restartedMain] com.chenxin.blog.BlogApplication         : Running with Spring Boot v2.3.3.RELEASE, Spring v5.2.8.RELEASE
2020-09-15 16:24:18.275  INFO 428 --- [restartedMain] com.chenxin.blog.BlogApplication         : The following profiles are active: dev
2020-09-15 16:24:18.325  INFO 428 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-09-15 16:24:18.325  INFO 428 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-09-15 16:24:18.895  INFO 428 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-09-15 16:24:18.897  INFO 428 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-09-15 16:24:18.927  INFO 428 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 19ms. Found 0 Redis repository interfaces.
2020-09-15 16:24:19.524  INFO 428 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-09-15 16:24:19.532  INFO 428 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-09-15 16:24:19.532  INFO 428 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.37]
2020-09-15 16:24:19.630  INFO 428 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-09-15 16:24:19.631  INFO 428 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1306 ms
2020-09-15 16:24:20.931  INFO 428 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-09-15 16:24:21.015  INFO 428 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-09-15 16:24:21.494  INFO 428 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-09-15 16:24:21.526  INFO 428 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-09-15 16:24:21.534  INFO 428 --- [restartedMain] com.chenxin.blog.BlogApplication         : Started BlogApplication in 3.725 seconds (JVM running for 4.878)
2020-09-15 16:24:30.356  INFO 7988 --- [restartedMain] com.chenxin.blog.BlogApplication         : Starting BlogApplication on LAPTOP-UGEIKVSJ with PID 7988 (D:\Program Files\idea-workaplace\blog\target\classes started by asus in D:\Program Files\idea-workaplace\blog)
2020-09-15 16:24:30.358 DEBUG 7988 --- [restartedMain] com.chenxin.blog.BlogApplication         : Running with Spring Boot v2.3.3.RELEASE, Spring v5.2.8.RELEASE
2020-09-15 16:24:30.359  INFO 7988 --- [restartedMain] com.chenxin.blog.BlogApplication         : The following profiles are active: dev
2020-09-15 16:24:30.407  INFO 7988 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-09-15 16:24:30.407  INFO 7988 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-09-15 16:24:31.023  INFO 7988 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-09-15 16:24:31.025  INFO 7988 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-09-15 16:24:31.062  INFO 7988 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 24ms. Found 0 Redis repository interfaces.
2020-09-15 16:24:31.836  INFO 7988 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-09-15 16:24:31.844  INFO 7988 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-09-15 16:24:31.844  INFO 7988 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.37]
2020-09-15 16:24:31.937  INFO 7988 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-09-15 16:24:31.937  INFO 7988 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1530 ms
2020-09-15 16:24:33.199  INFO 7988 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-09-15 16:24:33.312  INFO 7988 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-09-15 16:24:33.905  INFO 7988 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-09-15 16:24:33.952  INFO 7988 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-09-15 16:24:33.962  INFO 7988 --- [restartedMain] com.chenxin.blog.BlogApplication         : Started BlogApplication in 4.052 seconds (JVM running for 7.013)
2020-09-15 16:24:39.096  INFO 7988 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-09-15 16:24:39.096  INFO 7988 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-09-15 16:24:39.105  INFO 7988 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 9 ms
2020-09-15 16:24:39.135  INFO 7988 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/types', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.TypeController.typelist', args=[null, null, {}]}
2020-09-15 16:24:39.858  INFO 7988 --- [http-nio-8080-exec-1] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-09-15 16:24:39.862 DEBUG 7988 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC
2020-09-15 16:24:39.964 DEBUG 7988 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 16:24:39.988 DEBUG 7988 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 16:24:40.020 DEBUG 7988 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0 AND b.type_id = ?
2020-09-15 16:24:40.022 DEBUG 7988 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==> Parameters: 2(Long)
2020-09-15 16:24:40.025 DEBUG 7988 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : <==      Total: 1
2020-09-15 16:24:40.027 DEBUG 7988 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage        : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 and b.type_id=? ORDER BY b.issue asc LIMIT ?
2020-09-15 16:24:40.030 DEBUG 7988 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage        : ==> Parameters: 2(Long), 10(Integer)
2020-09-15 16:24:40.040 DEBUG 7988 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage        : <==      Total: 4
2020-09-15 16:24:40.041  INFO 7988 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Return ------ types
2020-09-15 16:24:40.041 DEBUG 7988 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 16:24:40.045 DEBUG 7988 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/types(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.TypeController.typelist(String), null,null,{types=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=4, pages=1, reasonable=false, pageSizeZero=false}}(String), types(String)
2020-09-15 16:24:40.082 DEBUG 7988 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 16:31:07.951  INFO 7988 --- [Thread-13] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-09-15 16:31:07.976  INFO 7988 --- [Thread-13] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-09-15 16:31:08.302  INFO 7988 --- [restartedMain] com.chenxin.blog.BlogApplication         : Starting BlogApplication on LAPTOP-UGEIKVSJ with PID 7988 (D:\Program Files\idea-workaplace\blog\target\classes started by asus in D:\Program Files\idea-workaplace\blog)
2020-09-15 16:31:08.302 DEBUG 7988 --- [restartedMain] com.chenxin.blog.BlogApplication         : Running with Spring Boot v2.3.3.RELEASE, Spring v5.2.8.RELEASE
2020-09-15 16:31:08.302  INFO 7988 --- [restartedMain] com.chenxin.blog.BlogApplication         : The following profiles are active: dev
2020-09-15 16:31:08.548  INFO 7988 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-09-15 16:31:08.548  INFO 7988 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-09-15 16:31:08.561  INFO 7988 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 12ms. Found 0 Redis repository interfaces.
2020-09-15 16:31:08.748  INFO 7988 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-09-15 16:31:08.749  INFO 7988 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-09-15 16:31:08.749  INFO 7988 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.37]
2020-09-15 16:31:08.775  INFO 7988 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-09-15 16:31:08.775  INFO 7988 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 468 ms
2020-09-15 16:31:09.277  INFO 7988 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-09-15 16:31:09.323  INFO 7988 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-09-15 16:31:09.890  INFO 7988 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-09-15 16:31:09.906  INFO 7988 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-09-15 16:31:09.910  INFO 7988 --- [restartedMain] com.chenxin.blog.BlogApplication         : Started BlogApplication in 1.649 seconds (JVM running for 402.96)
2020-09-15 16:31:09.911  INFO 7988 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2020-09-15 16:31:12.438  INFO 7988 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-09-15 16:31:15.029  INFO 11232 --- [restartedMain] com.chenxin.blog.BlogApplication         : Starting BlogApplication on LAPTOP-UGEIKVSJ with PID 11232 (D:\Program Files\idea-workaplace\blog\target\classes started by asus in D:\Program Files\idea-workaplace\blog)
2020-09-15 16:31:15.031 DEBUG 11232 --- [restartedMain] com.chenxin.blog.BlogApplication         : Running with Spring Boot v2.3.3.RELEASE, Spring v5.2.8.RELEASE
2020-09-15 16:31:15.031  INFO 11232 --- [restartedMain] com.chenxin.blog.BlogApplication         : The following profiles are active: dev
2020-09-15 16:31:15.077  INFO 11232 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-09-15 16:31:15.078  INFO 11232 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-09-15 16:31:15.771  INFO 11232 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-09-15 16:31:15.773  INFO 11232 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-09-15 16:31:15.808  INFO 11232 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 23ms. Found 0 Redis repository interfaces.
2020-09-15 16:31:16.454  INFO 11232 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-09-15 16:31:16.460  INFO 11232 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-09-15 16:31:16.460  INFO 11232 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.37]
2020-09-15 16:31:16.547  INFO 11232 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-09-15 16:31:16.547  INFO 11232 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1469 ms
2020-09-15 16:31:17.493  INFO 11232 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-09-15 16:31:17.580  INFO 11232 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-09-15 16:31:18.093  INFO 11232 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-09-15 16:31:18.129  INFO 11232 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-09-15 16:31:18.140  INFO 11232 --- [restartedMain] com.chenxin.blog.BlogApplication         : Started BlogApplication in 3.556 seconds (JVM running for 5.033)
2020-09-15 16:31:21.741  INFO 11232 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-09-15 16:31:21.741  INFO 11232 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-09-15 16:31:21.749  INFO 11232 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 8 ms
2020-09-15 16:31:21.775  INFO 11232 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/types', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.TypeController.typelist', args=[null, null, {}]}
2020-09-15 16:31:22.445  INFO 11232 --- [http-nio-8080-exec-1] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-09-15 16:31:22.449 DEBUG 11232 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC
2020-09-15 16:31:22.533 DEBUG 11232 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 16:31:22.555 DEBUG 11232 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 16:31:22.584 DEBUG 11232 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0 AND b.type_id = ?
2020-09-15 16:31:22.587 DEBUG 11232 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==> Parameters: 2(Long)
2020-09-15 16:31:22.589 DEBUG 11232 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : <==      Total: 1
2020-09-15 16:31:22.591 DEBUG 11232 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage        : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 and b.type_id=? ORDER BY b.issue asc LIMIT ?
2020-09-15 16:31:22.594 DEBUG 11232 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage        : ==> Parameters: 2(Long), 10(Integer)
2020-09-15 16:31:22.604 DEBUG 11232 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage        : <==      Total: 4
2020-09-15 16:31:22.604  INFO 11232 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Return ------ types
2020-09-15 16:31:22.605 DEBUG 11232 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 16:31:22.608 DEBUG 11232 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/types(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.TypeController.typelist(String), null,null,{types=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=4, pages=1, reasonable=false, pageSizeZero=false}}(String), types(String)
2020-09-15 16:31:22.729 DEBUG 11232 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 16:31:23.553  INFO 11232 --- [http-nio-8080-exec-2] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/fragments/newblog', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.newblogs', args=[{}]}
2020-09-15 16:31:23.573 DEBUG 11232 --- [http-nio-8080-exec-2] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,3
2020-09-15 16:31:23.575 DEBUG 11232 --- [http-nio-8080-exec-2] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 16:31:23.585 DEBUG 11232 --- [http-nio-8080-exec-2] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 3
2020-09-15 16:31:23.587  INFO 11232 --- [http-nio-8080-exec-2] com.chenxin.blog.aspect.LogAspect        : Return ------ common/fragments :: newbloglist
2020-09-15 16:31:23.588 DEBUG 11232 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 16:31:23.591 DEBUG 11232 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/fragments/newblog(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.newblogs(String), {newblogs=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=10, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=11, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), common/fragments :: newbloglist(String)
2020-09-15 16:31:23.645 DEBUG 11232 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 16:37:12.375  INFO 2540 --- [restartedMain] com.chenxin.blog.BlogApplication         : Starting BlogApplication on LAPTOP-UGEIKVSJ with PID 2540 (D:\Program Files\idea-workaplace\blog\target\classes started by asus in D:\Program Files\idea-workaplace\blog)
2020-09-15 16:37:12.376 DEBUG 2540 --- [restartedMain] com.chenxin.blog.BlogApplication         : Running with Spring Boot v2.3.3.RELEASE, Spring v5.2.8.RELEASE
2020-09-15 16:37:12.377  INFO 2540 --- [restartedMain] com.chenxin.blog.BlogApplication         : The following profiles are active: dev
2020-09-15 16:37:12.419  INFO 2540 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-09-15 16:37:12.419  INFO 2540 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-09-15 16:37:12.992  INFO 2540 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-09-15 16:37:12.994  INFO 2540 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-09-15 16:37:13.021  INFO 2540 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 17ms. Found 0 Redis repository interfaces.
2020-09-15 16:37:13.747  INFO 2540 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-09-15 16:37:13.753  INFO 2540 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-09-15 16:37:13.753  INFO 2540 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.37]
2020-09-15 16:37:13.841  INFO 2540 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-09-15 16:37:13.841  INFO 2540 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1422 ms
2020-09-15 16:37:14.785  INFO 2540 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-09-15 16:37:14.870  INFO 2540 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-09-15 16:37:15.364  INFO 2540 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-09-15 16:37:15.398  INFO 2540 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-09-15 16:37:15.406  INFO 2540 --- [restartedMain] com.chenxin.blog.BlogApplication         : Started BlogApplication in 3.471 seconds (JVM running for 4.721)
2020-09-15 16:38:28.729  INFO 2540 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-09-15 16:38:28.729  INFO 2540 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-09-15 16:38:28.737  INFO 2540 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 8 ms
2020-09-15 16:38:28.761  INFO 2540 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/types', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.TypeController.typelist', args=[null, null, {}]}
2020-09-15 16:38:29.427  INFO 2540 --- [http-nio-8080-exec-1] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-09-15 16:38:29.430 DEBUG 2540 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC
2020-09-15 16:38:29.520 DEBUG 2540 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 16:38:29.544 DEBUG 2540 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 16:38:29.575 DEBUG 2540 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0 AND b.type_id = ?
2020-09-15 16:38:29.578 DEBUG 2540 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==> Parameters: 2(Long)
2020-09-15 16:38:29.580 DEBUG 2540 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : <==      Total: 1
2020-09-15 16:38:29.581 DEBUG 2540 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage        : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 and b.type_id=? ORDER BY b.issue asc LIMIT ?
2020-09-15 16:38:29.583 DEBUG 2540 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage        : ==> Parameters: 2(Long), 10(Integer)
2020-09-15 16:38:29.592 DEBUG 2540 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage        : <==      Total: 4
2020-09-15 16:38:29.593  INFO 2540 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Return ------ types
2020-09-15 16:38:29.593 DEBUG 2540 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 16:38:29.595 DEBUG 2540 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/types(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.TypeController.typelist(String), null,null,{types=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=4, pages=1, reasonable=false, pageSizeZero=false}}(String), types(String)
2020-09-15 16:38:29.677 DEBUG 2540 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 16:38:30.562  INFO 2540 --- [http-nio-8080-exec-6] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/fragments/newblog', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.newblogs', args=[{}]}
2020-09-15 16:38:30.576 DEBUG 2540 --- [http-nio-8080-exec-6] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,3
2020-09-15 16:38:30.578 DEBUG 2540 --- [http-nio-8080-exec-6] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 16:38:30.583 DEBUG 2540 --- [http-nio-8080-exec-6] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 3
2020-09-15 16:38:30.585  INFO 2540 --- [http-nio-8080-exec-6] com.chenxin.blog.aspect.LogAspect        : Return ------ common/fragments :: newbloglist
2020-09-15 16:38:30.586 DEBUG 2540 --- [http-nio-8080-exec-6] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 16:38:30.589 DEBUG 2540 --- [http-nio-8080-exec-6] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/fragments/newblog(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.newblogs(String), {newblogs=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=10, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=11, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), common/fragments :: newbloglist(String)
2020-09-15 16:38:30.685 DEBUG 2540 --- [http-nio-8080-exec-6] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 16:42:55.146  INFO 2540 --- [Thread-13] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-09-15 16:42:55.171  INFO 2540 --- [Thread-13] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-09-15 16:42:55.497  INFO 2540 --- [restartedMain] com.chenxin.blog.BlogApplication         : Starting BlogApplication on LAPTOP-UGEIKVSJ with PID 2540 (D:\Program Files\idea-workaplace\blog\target\classes started by asus in D:\Program Files\idea-workaplace\blog)
2020-09-15 16:42:55.498 DEBUG 2540 --- [restartedMain] com.chenxin.blog.BlogApplication         : Running with Spring Boot v2.3.3.RELEASE, Spring v5.2.8.RELEASE
2020-09-15 16:42:55.498  INFO 2540 --- [restartedMain] com.chenxin.blog.BlogApplication         : The following profiles are active: dev
2020-09-15 16:42:55.739  INFO 2540 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-09-15 16:42:55.740  INFO 2540 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-09-15 16:42:55.760  INFO 2540 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 19ms. Found 0 Redis repository interfaces.
2020-09-15 16:42:55.993  INFO 2540 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-09-15 16:42:55.993  INFO 2540 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-09-15 16:42:55.994  INFO 2540 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.37]
2020-09-15 16:42:56.023  INFO 2540 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-09-15 16:42:56.024  INFO 2540 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 524 ms
2020-09-15 16:42:56.534  INFO 2540 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-09-15 16:42:56.578  INFO 2540 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-09-15 16:42:56.981  INFO 2540 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-09-15 16:42:56.998  INFO 2540 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-09-15 16:42:57.002  INFO 2540 --- [restartedMain] com.chenxin.blog.BlogApplication         : Started BlogApplication in 1.547 seconds (JVM running for 346.317)
2020-09-15 16:42:57.003  INFO 2540 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2020-09-15 16:43:01.670  INFO 2540 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-09-15 16:43:01.671  INFO 2540 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-09-15 16:43:01.683  INFO 2540 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 12 ms
2020-09-15 16:43:01.684  INFO 2540 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/types', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.TypeController.typelist', args=[null, null, {}]}
2020-09-15 16:43:01.763  INFO 2540 --- [http-nio-8080-exec-1] com.alibaba.druid.pool.DruidDataSource   : {dataSource-2} inited
2020-09-15 16:43:01.763 DEBUG 2540 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC
2020-09-15 16:43:01.764 DEBUG 2540 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 16:43:01.772 DEBUG 2540 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 16:43:01.777 DEBUG 2540 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0 AND b.type_id = ?
2020-09-15 16:43:01.777 DEBUG 2540 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==> Parameters: 2(Long)
2020-09-15 16:43:01.779 DEBUG 2540 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : <==      Total: 1
2020-09-15 16:43:01.779 DEBUG 2540 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage        : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 and b.type_id=? ORDER BY b.issue asc LIMIT ?
2020-09-15 16:43:01.781 DEBUG 2540 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage        : ==> Parameters: 2(Long), 10(Integer)
2020-09-15 16:43:01.785 DEBUG 2540 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByTypeIdAndPage        : <==      Total: 4
2020-09-15 16:43:01.785  INFO 2540 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Return ------ types
2020-09-15 16:43:01.786 DEBUG 2540 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 16:43:01.786 DEBUG 2540 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/types(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.TypeController.typelist(String), null,null,{types=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=4, pages=1, reasonable=false, pageSizeZero=false}}(String), types(String)
2020-09-15 16:43:01.872 DEBUG 2540 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 16:43:02.340  INFO 2540 --- [http-nio-8080-exec-10] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/fragments/newblog', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.newblogs', args=[{}]}
2020-09-15 16:43:02.351 DEBUG 2540 --- [http-nio-8080-exec-10] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,3
2020-09-15 16:43:02.352 DEBUG 2540 --- [http-nio-8080-exec-10] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 16:43:02.356 DEBUG 2540 --- [http-nio-8080-exec-10] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 3
2020-09-15 16:43:02.357  INFO 2540 --- [http-nio-8080-exec-10] com.chenxin.blog.aspect.LogAspect        : Return ------ common/fragments :: newbloglist
2020-09-15 16:43:02.357 DEBUG 2540 --- [http-nio-8080-exec-10] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 16:43:02.359 DEBUG 2540 --- [http-nio-8080-exec-10] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/fragments/newblog(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.newblogs(String), {newblogs=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=10, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=11, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), common/fragments :: newbloglist(String)
2020-09-15 16:43:02.405 DEBUG 2540 --- [http-nio-8080-exec-10] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 16:44:29.453  INFO 2540 --- [Thread-20] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-09-15 16:44:29.460  INFO 2540 --- [Thread-20] com.alibaba.druid.pool.DruidDataSource   : {dataSource-2} closed
2020-09-15 16:44:29.689  INFO 2540 --- [restartedMain] com.chenxin.blog.BlogApplication         : Starting BlogApplication on LAPTOP-UGEIKVSJ with PID 2540 (D:\Program Files\idea-workaplace\blog\target\classes started by asus in D:\Program Files\idea-workaplace\blog)
2020-09-15 16:44:29.690 DEBUG 2540 --- [restartedMain] com.chenxin.blog.BlogApplication         : Running with Spring Boot v2.3.3.RELEASE, Spring v5.2.8.RELEASE
2020-09-15 16:44:29.690  INFO 2540 --- [restartedMain] com.chenxin.blog.BlogApplication         : The following profiles are active: dev
2020-09-15 16:44:30.041  INFO 2540 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-09-15 16:44:30.041  INFO 2540 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-09-15 16:44:30.056  INFO 2540 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 14ms. Found 0 Redis repository interfaces.
2020-09-15 16:44:30.322  INFO 2540 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-09-15 16:44:30.323  INFO 2540 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-09-15 16:44:30.323  INFO 2540 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.37]
2020-09-15 16:44:30.342  INFO 2540 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-09-15 16:44:30.342  INFO 2540 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 646 ms
2020-09-15 16:44:30.838  INFO 2540 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-09-15 16:44:30.875  INFO 2540 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-09-15 16:44:31.204  INFO 2540 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-09-15 16:44:31.217  INFO 2540 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-09-15 16:44:31.220  INFO 2540 --- [restartedMain] com.chenxin.blog.BlogApplication         : Started BlogApplication in 1.582 seconds (JVM running for 440.535)
2020-09-15 16:44:31.221  INFO 2540 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2020-09-15 16:44:32.461  INFO 2540 --- [http-nio-8080-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-09-15 16:44:32.462  INFO 2540 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-09-15 16:44:32.472  INFO 2540 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 10 ms
2020-09-15 16:44:32.474  INFO 2540 --- [http-nio-8080-exec-2] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/types', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.TypeController.typelist', args=[null, null, {}]}
2020-09-15 16:44:32.544  INFO 2540 --- [http-nio-8080-exec-2] com.alibaba.druid.pool.DruidDataSource   : {dataSource-3} inited
2020-09-15 16:44:32.544 DEBUG 2540 --- [http-nio-8080-exec-2] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC
2020-09-15 16:44:32.545 DEBUG 2540 --- [http-nio-8080-exec-2] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 16:44:32.553 DEBUG 2540 --- [http-nio-8080-exec-2] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 16:44:32.558 DEBUG 2540 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0 AND b.type_id = ?
2020-09-15 16:44:32.558 DEBUG 2540 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==> Parameters: 2(Long)
2020-09-15 16:44:32.562 DEBUG 2540 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : <==      Total: 1
2020-09-15 16:44:32.563 DEBUG 2540 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTypeIdAndPage        : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 and b.type_id=? ORDER BY b.issue asc LIMIT ?
2020-09-15 16:44:32.564 DEBUG 2540 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTypeIdAndPage        : ==> Parameters: 2(Long), 10(Integer)
2020-09-15 16:44:32.568 DEBUG 2540 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTypeIdAndPage        : <==      Total: 4
2020-09-15 16:44:32.569  INFO 2540 --- [http-nio-8080-exec-2] com.chenxin.blog.aspect.LogAspect        : Return ------ types
2020-09-15 16:44:32.569 DEBUG 2540 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 16:44:32.570 DEBUG 2540 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/types(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.TypeController.typelist(String), null,null,{types=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=4, pages=1, reasonable=false, pageSizeZero=false}}(String), types(String)
2020-09-15 16:44:32.663 DEBUG 2540 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 16:44:33.078  INFO 2540 --- [http-nio-8080-exec-2] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/fragments/newblog', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.newblogs', args=[{}]}
2020-09-15 16:44:33.090 DEBUG 2540 --- [http-nio-8080-exec-2] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,3
2020-09-15 16:44:33.090 DEBUG 2540 --- [http-nio-8080-exec-2] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 16:44:33.093 DEBUG 2540 --- [http-nio-8080-exec-2] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 3
2020-09-15 16:44:33.094  INFO 2540 --- [http-nio-8080-exec-2] com.chenxin.blog.aspect.LogAspect        : Return ------ common/fragments :: newbloglist
2020-09-15 16:44:33.094 DEBUG 2540 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 16:44:33.096 DEBUG 2540 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/fragments/newblog(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.newblogs(String), {newblogs=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=10, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=11, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), common/fragments :: newbloglist(String)
2020-09-15 16:44:33.185 DEBUG 2540 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 16:45:46.131  INFO 2540 --- [http-nio-8080-exec-8] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/types', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.TypeController.typelist', args=[null, null, {}]}
2020-09-15 16:45:46.175 DEBUG 2540 --- [http-nio-8080-exec-8] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC
2020-09-15 16:45:46.175 DEBUG 2540 --- [http-nio-8080-exec-8] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 16:45:46.177 DEBUG 2540 --- [http-nio-8080-exec-8] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 16:45:46.181 DEBUG 2540 --- [http-nio-8080-exec-8] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0 AND b.type_id = ?
2020-09-15 16:45:46.181 DEBUG 2540 --- [http-nio-8080-exec-8] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==> Parameters: 2(Long)
2020-09-15 16:45:46.183 DEBUG 2540 --- [http-nio-8080-exec-8] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : <==      Total: 1
2020-09-15 16:45:46.183 DEBUG 2540 --- [http-nio-8080-exec-8] c.c.b.m.B.findBlogByTypeIdAndPage        : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 and b.type_id=? ORDER BY b.issue asc LIMIT ?
2020-09-15 16:45:46.184 DEBUG 2540 --- [http-nio-8080-exec-8] c.c.b.m.B.findBlogByTypeIdAndPage        : ==> Parameters: 2(Long), 10(Integer)
2020-09-15 16:45:46.188 DEBUG 2540 --- [http-nio-8080-exec-8] c.c.b.m.B.findBlogByTypeIdAndPage        : <==      Total: 4
2020-09-15 16:45:46.188  INFO 2540 --- [http-nio-8080-exec-8] com.chenxin.blog.aspect.LogAspect        : Return ------ types
2020-09-15 16:45:46.188 DEBUG 2540 --- [http-nio-8080-exec-8] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 16:45:46.189 DEBUG 2540 --- [http-nio-8080-exec-8] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/types(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.TypeController.typelist(String), null,null,{types=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=4, pages=1, reasonable=false, pageSizeZero=false}}(String), types(String)
2020-09-15 16:45:46.238 DEBUG 2540 --- [http-nio-8080-exec-8] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 16:45:46.654  INFO 2540 --- [http-nio-8080-exec-2] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/fragments/newblog', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.newblogs', args=[{}]}
2020-09-15 16:45:46.656 DEBUG 2540 --- [http-nio-8080-exec-2] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,3
2020-09-15 16:45:46.656 DEBUG 2540 --- [http-nio-8080-exec-2] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 16:45:46.663 DEBUG 2540 --- [http-nio-8080-exec-2] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 3
2020-09-15 16:45:46.666  INFO 2540 --- [http-nio-8080-exec-2] com.chenxin.blog.aspect.LogAspect        : Return ------ common/fragments :: newbloglist
2020-09-15 16:45:46.667 DEBUG 2540 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 16:45:46.668 DEBUG 2540 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/fragments/newblog(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.newblogs(String), {newblogs=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=10, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=11, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), common/fragments :: newbloglist(String)
2020-09-15 16:45:46.754 DEBUG 2540 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 16:50:13.981  INFO 2540 --- [Thread-25] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-09-15 16:50:13.987  INFO 2540 --- [Thread-25] com.alibaba.druid.pool.DruidDataSource   : {dataSource-3} closed
2020-09-15 16:50:14.230  INFO 2540 --- [restartedMain] com.chenxin.blog.BlogApplication         : Starting BlogApplication on LAPTOP-UGEIKVSJ with PID 2540 (D:\Program Files\idea-workaplace\blog\target\classes started by asus in D:\Program Files\idea-workaplace\blog)
2020-09-15 16:50:14.230 DEBUG 2540 --- [restartedMain] com.chenxin.blog.BlogApplication         : Running with Spring Boot v2.3.3.RELEASE, Spring v5.2.8.RELEASE
2020-09-15 16:50:14.230  INFO 2540 --- [restartedMain] com.chenxin.blog.BlogApplication         : The following profiles are active: dev
2020-09-15 16:50:14.586  INFO 2540 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-09-15 16:50:14.586  INFO 2540 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-09-15 16:50:14.610  INFO 2540 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 23ms. Found 0 Redis repository interfaces.
2020-09-15 16:50:14.806  INFO 2540 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-09-15 16:50:14.807  INFO 2540 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-09-15 16:50:14.807  INFO 2540 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.37]
2020-09-15 16:50:14.827  INFO 2540 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-09-15 16:50:14.827  INFO 2540 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 594 ms
2020-09-15 16:50:15.255  INFO 2540 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-09-15 16:50:15.297  INFO 2540 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-09-15 16:50:15.665  INFO 2540 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-09-15 16:50:15.676  INFO 2540 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-09-15 16:50:15.681  INFO 2540 --- [restartedMain] com.chenxin.blog.BlogApplication         : Started BlogApplication in 1.499 seconds (JVM running for 784.995)
2020-09-15 16:50:15.682  INFO 2540 --- [restartedMain] .ConditionEvaluationDeltaLoggingListener : Condition evaluation unchanged
2020-09-15 16:50:17.615  INFO 2540 --- [http-nio-8080-exec-2] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-09-15 16:50:17.616  INFO 2540 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-09-15 16:50:17.625  INFO 2540 --- [http-nio-8080-exec-2] o.s.web.servlet.DispatcherServlet        : Completed initialization in 9 ms
2020-09-15 16:50:17.628  INFO 2540 --- [http-nio-8080-exec-2] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/types', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.TypeController.typelist', args=[null, null, {}]}
2020-09-15 16:50:17.695  INFO 2540 --- [http-nio-8080-exec-2] com.alibaba.druid.pool.DruidDataSource   : {dataSource-4} inited
2020-09-15 16:50:17.695 DEBUG 2540 --- [http-nio-8080-exec-2] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC
2020-09-15 16:50:17.696 DEBUG 2540 --- [http-nio-8080-exec-2] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 16:50:17.705 DEBUG 2540 --- [http-nio-8080-exec-2] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 16:50:17.709 DEBUG 2540 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0 AND b.type_id = ?
2020-09-15 16:50:17.711 DEBUG 2540 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==> Parameters: 2(Long)
2020-09-15 16:50:17.713 DEBUG 2540 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : <==      Total: 1
2020-09-15 16:50:17.713 DEBUG 2540 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTypeIdAndPage        : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 and b.type_id=? ORDER BY b.issue asc LIMIT ?
2020-09-15 16:50:17.714 DEBUG 2540 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTypeIdAndPage        : ==> Parameters: 2(Long), 10(Integer)
2020-09-15 16:50:17.718 DEBUG 2540 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByTypeIdAndPage        : <==      Total: 4
2020-09-15 16:50:17.719  INFO 2540 --- [http-nio-8080-exec-2] com.chenxin.blog.aspect.LogAspect        : Return ------ types
2020-09-15 16:50:17.719 DEBUG 2540 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 16:50:17.720 DEBUG 2540 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/types(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.TypeController.typelist(String), null,null,{types=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=4, pages=1, reasonable=false, pageSizeZero=false}}(String), types(String)
2020-09-15 16:50:17.793 DEBUG 2540 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 16:50:18.196  INFO 2540 --- [http-nio-8080-exec-8] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/fragments/newblog', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.newblogs', args=[{}]}
2020-09-15 16:50:18.209 DEBUG 2540 --- [http-nio-8080-exec-8] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,3
2020-09-15 16:50:18.211 DEBUG 2540 --- [http-nio-8080-exec-8] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 16:50:18.214 DEBUG 2540 --- [http-nio-8080-exec-8] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 3
2020-09-15 16:50:18.215  INFO 2540 --- [http-nio-8080-exec-8] com.chenxin.blog.aspect.LogAspect        : Return ------ common/fragments :: newbloglist
2020-09-15 16:50:18.216 DEBUG 2540 --- [http-nio-8080-exec-8] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 16:50:18.216 DEBUG 2540 --- [http-nio-8080-exec-8] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/fragments/newblog(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.newblogs(String), {newblogs=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=10, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=11, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), common/fragments :: newbloglist(String)
2020-09-15 16:50:18.369 DEBUG 2540 --- [http-nio-8080-exec-8] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 16:52:16.728  INFO 2540 --- [http-nio-8080-exec-7] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.indexoage', args=[null, {}]}
2020-09-15 16:52:16.736 DEBUG 2540 --- [http-nio-8080-exec-7] c.c.b.m.B.findBlogByPaging_COUNT         : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0
2020-09-15 16:52:16.737 DEBUG 2540 --- [http-nio-8080-exec-7] c.c.b.m.B.findBlogByPaging_COUNT         : ==> Parameters: 
2020-09-15 16:52:16.738 DEBUG 2540 --- [http-nio-8080-exec-7] c.c.b.m.B.findBlogByPaging_COUNT         : <==      Total: 1
2020-09-15 16:52:16.739 DEBUG 2540 --- [http-nio-8080-exec-7] c.c.b.m.BlogMapper.findBlogByPaging      : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 LIMIT ?
2020-09-15 16:52:16.740 DEBUG 2540 --- [http-nio-8080-exec-7] c.c.b.m.BlogMapper.findBlogByPaging      : ==> Parameters: 10(Integer)
2020-09-15 16:52:16.746 DEBUG 2540 --- [http-nio-8080-exec-7] c.c.b.m.BlogMapper.findBlogByPaging      : <==      Total: 5
2020-09-15 16:52:16.747 DEBUG 2540 --- [http-nio-8080-exec-7] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC limit 0,6
2020-09-15 16:52:16.747 DEBUG 2540 --- [http-nio-8080-exec-7] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 16:52:16.749 DEBUG 2540 --- [http-nio-8080-exec-7] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 16:52:16.753 DEBUG 2540 --- [http-nio-8080-exec-7] c.c.blog.mapper.TagMapper.findByExample  : ==>  Preparing: SELECT t.id, t.NAME, COUNT( bt.blog_id ) countBlog FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.isrecommend = 0 GROUP BY id ORDER BY countBlog DESC limit 0,10
2020-09-15 16:52:16.753 DEBUG 2540 --- [http-nio-8080-exec-7] c.c.blog.mapper.TagMapper.findByExample  : ==> Parameters: 
2020-09-15 16:52:16.757 DEBUG 2540 --- [http-nio-8080-exec-7] c.c.blog.mapper.TagMapper.findByExample  : <==      Total: 5
2020-09-15 16:52:16.757 DEBUG 2540 --- [http-nio-8080-exec-7] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,10
2020-09-15 16:52:16.758 DEBUG 2540 --- [http-nio-8080-exec-7] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 16:52:16.763 DEBUG 2540 --- [http-nio-8080-exec-7] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 5
2020-09-15 16:52:16.763  INFO 2540 --- [http-nio-8080-exec-7] com.chenxin.blog.aspect.LogAspect        : Return ------ /index
2020-09-15 16:52:16.764 DEBUG 2540 --- [http-nio-8080-exec-7] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 16:52:16.765 DEBUG 2540 --- [http-nio-8080-exec-7] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.indexoage(String), null,{page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=5, pages=1, reasonable=false, pageSizeZero=false}, toptype=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], toptag=[Tag{id=1, name='mysql', Tag{id=6, name='mybaits', Tag{id=4, name='spring', Tag{id=2, name='大数据', Tag{id=8, name='python'], topblog=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=10, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=11, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=20, title='mysql数据库的查询拉', content='**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这是一篇好博客', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:27:27 CST 2019, updatetime=Thu Sep 05 09:44:20 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=24, title='JAVA是什么', content='##java是什么&sup3; &hearts;
虹口区我说的浓氨水', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='我is单词vhuiowdecvb', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 13 11:08:48 CST 2018, updatetime=Thu Sep 13 11:08:48 CST 2018, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), /index(String)
2020-09-15 16:52:16.859 DEBUG 2540 --- [http-nio-8080-exec-7] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 16:52:17.279  INFO 2540 --- [http-nio-8080-exec-4] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/fragments/newblog', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.newblogs', args=[{}]}
2020-09-15 16:52:17.280 DEBUG 2540 --- [http-nio-8080-exec-4] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,3
2020-09-15 16:52:17.280 DEBUG 2540 --- [http-nio-8080-exec-4] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 16:52:17.283 DEBUG 2540 --- [http-nio-8080-exec-4] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 3
2020-09-15 16:52:17.284  INFO 2540 --- [http-nio-8080-exec-4] com.chenxin.blog.aspect.LogAspect        : Return ------ common/fragments :: newbloglist
2020-09-15 16:52:17.285 DEBUG 2540 --- [http-nio-8080-exec-4] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 16:52:17.285 DEBUG 2540 --- [http-nio-8080-exec-4] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/fragments/newblog(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.newblogs(String), {newblogs=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=10, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=11, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), common/fragments :: newbloglist(String)
2020-09-15 16:52:17.410 DEBUG 2540 --- [http-nio-8080-exec-4] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 16:52:24.933  INFO 2540 --- [http-nio-8080-exec-9] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/types', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.TypeController.typelist', args=[null, null, {}]}
2020-09-15 16:52:24.934 DEBUG 2540 --- [http-nio-8080-exec-9] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC
2020-09-15 16:52:24.934 DEBUG 2540 --- [http-nio-8080-exec-9] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 16:52:24.936 DEBUG 2540 --- [http-nio-8080-exec-9] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 16:52:24.939 DEBUG 2540 --- [http-nio-8080-exec-9] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0 AND b.type_id = ?
2020-09-15 16:52:24.940 DEBUG 2540 --- [http-nio-8080-exec-9] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : ==> Parameters: 2(Long)
2020-09-15 16:52:24.941 DEBUG 2540 --- [http-nio-8080-exec-9] c.c.b.m.B.findBlogByTypeIdAndPage_COUNT  : <==      Total: 1
2020-09-15 16:52:24.942 DEBUG 2540 --- [http-nio-8080-exec-9] c.c.b.m.B.findBlogByTypeIdAndPage        : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 and b.type_id=? ORDER BY b.issue asc LIMIT ?
2020-09-15 16:52:24.942 DEBUG 2540 --- [http-nio-8080-exec-9] c.c.b.m.B.findBlogByTypeIdAndPage        : ==> Parameters: 2(Long), 10(Integer)
2020-09-15 16:52:24.945 DEBUG 2540 --- [http-nio-8080-exec-9] c.c.b.m.B.findBlogByTypeIdAndPage        : <==      Total: 4
2020-09-15 16:52:24.946  INFO 2540 --- [http-nio-8080-exec-9] com.chenxin.blog.aspect.LogAspect        : Return ------ types
2020-09-15 16:52:24.946 DEBUG 2540 --- [http-nio-8080-exec-9] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 16:52:24.946 DEBUG 2540 --- [http-nio-8080-exec-9] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/types(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.TypeController.typelist(String), null,null,{types=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=4, pages=1, reasonable=false, pageSizeZero=false}}(String), types(String)
2020-09-15 16:52:25.027 DEBUG 2540 --- [http-nio-8080-exec-9] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 16:52:25.434  INFO 2540 --- [http-nio-8080-exec-3] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/fragments/newblog', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.newblogs', args=[{}]}
2020-09-15 16:52:25.435 DEBUG 2540 --- [http-nio-8080-exec-3] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,3
2020-09-15 16:52:25.435 DEBUG 2540 --- [http-nio-8080-exec-3] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 16:52:25.438 DEBUG 2540 --- [http-nio-8080-exec-3] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 3
2020-09-15 16:52:25.439  INFO 2540 --- [http-nio-8080-exec-3] com.chenxin.blog.aspect.LogAspect        : Return ------ common/fragments :: newbloglist
2020-09-15 16:52:25.439 DEBUG 2540 --- [http-nio-8080-exec-3] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 16:52:25.439 DEBUG 2540 --- [http-nio-8080-exec-3] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/fragments/newblog(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.newblogs(String), {newblogs=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=10, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=11, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), common/fragments :: newbloglist(String)
2020-09-15 16:52:25.551 DEBUG 2540 --- [http-nio-8080-exec-3] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 16:52:29.312  INFO 2540 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/blog/21', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.BlogController.BlogPage', args=[21, {}]}
2020-09-15 16:52:29.315 DEBUG 2540 --- [http-nio-8080-exec-1] c.c.blog.mapper.BlogMapper.findBlogById  : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag, b.description,b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id, t.id t_id,t.name t_name,y.id y_id,y.name y_name,u.id u_id,u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime from cx_blog b LEFT JOIN cx_blog_tag bt ON b.id = bt.blog_id LEFT JOIN cx_type y ON b.type_id=y.id LEFT JOIN cx_tag t ON bt.tag_id=t.id LEFT JOIN cx_user u on b.user_id = u.id WHERE b.id=?
2020-09-15 16:52:29.316 DEBUG 2540 --- [http-nio-8080-exec-1] c.c.blog.mapper.BlogMapper.findBlogById  : ==> Parameters: 21(Long)
2020-09-15 16:52:29.319 DEBUG 2540 --- [http-nio-8080-exec-1] c.c.blog.mapper.BlogMapper.findBlogById  : <==      Total: 3
2020-09-15 16:52:29.472 DEBUG 2540 --- [http-nio-8080-exec-1] c.c.b.m.B.updateByPrimaryKeySelective    : ==>  Preparing: update cx_blog SET viewcount = ? where id = ?
2020-09-15 16:52:29.491 DEBUG 2540 --- [http-nio-8080-exec-1] c.c.b.m.B.updateByPrimaryKeySelective    : ==> Parameters: 12(Integer), 21(Long)
2020-09-15 16:52:29.583 DEBUG 2540 --- [http-nio-8080-exec-1] c.c.b.m.B.updateByPrimaryKeySelective    : <==    Updates: 1
2020-09-15 16:52:29.585  INFO 2540 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Return ------ blog
2020-09-15 16:52:29.586 DEBUG 2540 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 16:52:29.586 DEBUG 2540 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/blog/21(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.BlogController.BlogPage(String), 21,{blog=Blog{id=21, title='java是什么', content='<ul>
<li>作为一个招聘网站<strong>注册用户</strong>，我想<strong>查看最近3天发布的招聘信息</strong>，以便于<strong>了解最新的招聘信息</strong>。</li>
<li>作为公司，可以张贴新工作。</li>
</ul>
<p>个人博客系统的用户故事：</p>
<p>角色：<strong>普通访客</strong>，<strong>管理员（我）</strong></p>
<ul>
<li>访客，可以分页查看所有的博客</li>
<li>访客，可以快速查看博客数最多的6个分类</li>
<li>访客，可以查看所有的分类</li>
<li>访客，可以查看某个分类下的博客列表</li>
<li>访客，可以快速查看标记博客最多的10个标签</li>
<li>访客，可以查看所有的标签</li>
<li>访客，可以查看某个标签下的博客列表</li>
<li>访客，可以根据年度时间线查看博客列表</li>
<li>访客，可以快速查看最新的推荐博客</li>
<li>访客，可以用关键字全局搜索博客</li>
<li>访客，可以查看单个博客内容</li>
<li>访客，可以对博客内容进行评论</li>
<li>访客，可以赞赏博客内容</li>
<li>访客，可以微信扫码阅读博客内容</li>
<li>访客，可以在首页扫描公众号二维码关注我</li>
<li>我，可以用户名和密码登录后台管理</li>
<li>我，可以管理博客
<ul>
<li>我，可以发布新博客</li>
<li>我，可以对博客进行分类</li>
<li>我，可以对博客打标签</li>
<li>我，可以修改博客</li>
<li>我，可以删除博客</li>
<li>我，可以根据标题，分类，标签查询博客</li>
</ul>
</li>
<li>我，可以管理博客分类
<ul>
<li>我，可以新增一个分类</li>
<li>我，可以修改一个分类</li>
<li>我，可以删除一个分类</li>
<li>我，可以根据分类名称查询分类</li>
</ul>
</li>
<li>我，可以管理标签
<ul>
<li>我，可以新增一个标签</li>
<li>我，可以修改一个标签</li>
<li>我，可以删除一个标签</li>
<li>我，可以根据名称查询标签</li>
</ul>
</li>
</ul>
<h3 id="12-功能规划">1.2 功能规划</h3>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg" alt="" /></p>
<h2 id="2页面设计与开发">2、页面设计与开发</h2>
<h3 id="21-设计">2.1 设计</h3>
<p><strong>页面规划：</strong></p>
<p>前端展示：首页、详情页、分类、标签、归档、关于我</p>
<p>后台管理：模板页</p>
<h3 id="22-页面开发">2.2 页面开发</h3>
<p><a href="https://semantic-ui.com/" target="_blank">Semantic UI官网</a></p>
<p><a href="http://www.semantic-ui.cn/" target="_blank">Semantic UI中文官网</a></p>
<p><a href="https://imcoding.me/blogs/5" target="_blank">WebStorm下载与破解</a></p>
<p><a href="https://www.toptal.com/designers/subtlepatterns/" target="_blank">背景图片资源</a></p>
<h3 id="23-插件集成拉">2.3 插件集成拉</h3>', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=11, isadmire=0, iscopyright=0, isrecommend=0, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=null, typeId=null, user=User{id=1, petname='程鑫', username='cx201125', password='dbd1a8bc623a690cd163ec0ade366995', mail='2543139363@qq.com', type=0, headportrait='/images/head.jpg', createtime=Wed Aug 26 18:02:27 CST 2020, updatetime=Wed Aug 26 18:02:30 CST 2020, blogs=[]}, type=Type{id=2, name='JAVA', blogs=[]}, tagsId='null', comments=[Comment{id=21, petname='程鑫', mail='2543139363@qq.com', headportrait='null', matter='null', createtime=null, blogId=null, blog=null, topId=null, top=null, bottom=[]}], tags=[Tag{id=1, name='mysql', Tag{id=6, name='mybaits', Tag{id=8, name='python']}}(String), blog(String)
2020-09-15 16:52:29.634 DEBUG 2540 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 16:52:30.194  INFO 2540 --- [http-nio-8080-exec-2] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/fragments/newblog', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.newblogs', args=[{}]}
2020-09-15 16:52:30.194 DEBUG 2540 --- [http-nio-8080-exec-2] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,3
2020-09-15 16:52:30.195 DEBUG 2540 --- [http-nio-8080-exec-2] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 16:52:30.199 DEBUG 2540 --- [http-nio-8080-exec-2] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 3
2020-09-15 16:52:30.200  INFO 2540 --- [http-nio-8080-exec-2] com.chenxin.blog.aspect.LogAspect        : Return ------ common/fragments :: newbloglist
2020-09-15 16:52:30.202 DEBUG 2540 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 16:52:30.203 DEBUG 2540 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/fragments/newblog(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.newblogs(String), {newblogs=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=10, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=12, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), common/fragments :: newbloglist(String)
2020-09-15 16:52:30.403 DEBUG 2540 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 16:52:30.459  INFO 2540 --- [http-nio-8080-exec-4] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/comments/21', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.CommentController.comment', args=[21, {}]}
2020-09-15 16:52:30.481 DEBUG 2540 --- [http-nio-8080-exec-4] c.c.b.m.CommentMapper.selectByExample    : ==>  Preparing: select id, petname, mail, headportrait, matter, createtime,isadmain,blog_id, top_id from cx_comment WHERE ( blog_id = ? and top_id is null ) order by createtime desc
2020-09-15 16:52:30.482 DEBUG 2540 --- [http-nio-8080-exec-4] c.c.b.m.CommentMapper.selectByExample    : ==> Parameters: 21(Long)
2020-09-15 16:52:30.489 DEBUG 2540 --- [http-nio-8080-exec-4] c.c.b.m.CommentMapper.selectByExample    : <==      Total: 0
2020-09-15 16:52:30.490  INFO 2540 --- [http-nio-8080-exec-4] com.chenxin.blog.aspect.LogAspect        : Return ------ /blog :: commentlist
2020-09-15 16:52:30.490 DEBUG 2540 --- [http-nio-8080-exec-4] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 16:52:30.490 DEBUG 2540 --- [http-nio-8080-exec-4] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/comments/21(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.CommentController.comment(String), 21,{comments=[]}(String), /blog :: commentlist(String)
2020-09-15 16:52:30.561 DEBUG 2540 --- [http-nio-8080-exec-4] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 17:36:05.450  INFO 16444 --- [restartedMain] com.chenxin.blog.BlogApplication         : Starting BlogApplication on LAPTOP-UGEIKVSJ with PID 16444 (D:\Program Files\idea-workaplace\blog\target\classes started by asus in D:\Program Files\idea-workaplace\blog)
2020-09-15 17:36:05.452 DEBUG 16444 --- [restartedMain] com.chenxin.blog.BlogApplication         : Running with Spring Boot v2.3.3.RELEASE, Spring v5.2.8.RELEASE
2020-09-15 17:36:05.452  INFO 16444 --- [restartedMain] com.chenxin.blog.BlogApplication         : The following profiles are active: dev
2020-09-15 17:36:05.569  INFO 16444 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-09-15 17:36:05.569  INFO 16444 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-09-15 17:36:06.949  INFO 16444 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-09-15 17:36:06.951  INFO 16444 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-09-15 17:36:07.037  INFO 16444 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 31ms. Found 0 Redis repository interfaces.
2020-09-15 17:36:08.042  INFO 16444 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-09-15 17:36:08.049  INFO 16444 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-09-15 17:36:08.049  INFO 16444 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.37]
2020-09-15 17:36:08.133  INFO 16444 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-09-15 17:36:08.134  INFO 16444 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 2564 ms
2020-09-15 17:36:09.594  INFO 16444 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-09-15 17:36:09.694  INFO 16444 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-09-15 17:36:10.421  INFO 16444 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-09-15 17:36:10.466  INFO 16444 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-09-15 17:36:10.475  INFO 16444 --- [restartedMain] com.chenxin.blog.BlogApplication         : Started BlogApplication in 5.712 seconds (JVM running for 8.084)
2020-09-15 17:36:21.889  INFO 16444 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-09-15 17:36:21.890  INFO 16444 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-09-15 17:36:21.901  INFO 16444 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 11 ms
2020-09-15 17:36:21.954  INFO 16444 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.indexoage', args=[null, {}]}
2020-09-15 17:36:22.840  INFO 16444 --- [http-nio-8080-exec-1] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-09-15 17:36:22.914 DEBUG 16444 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByPaging_COUNT         : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0
2020-09-15 17:36:23.058 DEBUG 16444 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByPaging_COUNT         : ==> Parameters: 
2020-09-15 17:36:23.089 DEBUG 16444 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByPaging_COUNT         : <==      Total: 1
2020-09-15 17:36:23.093 DEBUG 16444 --- [http-nio-8080-exec-1] c.c.b.m.BlogMapper.findBlogByPaging      : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 LIMIT ?
2020-09-15 17:36:23.096 DEBUG 16444 --- [http-nio-8080-exec-1] c.c.b.m.BlogMapper.findBlogByPaging      : ==> Parameters: 10(Integer)
2020-09-15 17:36:23.105 DEBUG 16444 --- [http-nio-8080-exec-1] c.c.b.m.BlogMapper.findBlogByPaging      : <==      Total: 5
2020-09-15 17:36:23.129 DEBUG 16444 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC limit 0,6
2020-09-15 17:36:23.131 DEBUG 16444 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 17:36:23.133 DEBUG 16444 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 17:36:23.138 DEBUG 16444 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByExample  : ==>  Preparing: SELECT t.id, t.NAME, COUNT( bt.blog_id ) countBlog FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.isrecommend = 0 GROUP BY id ORDER BY countBlog DESC limit 0,10
2020-09-15 17:36:23.139 DEBUG 16444 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByExample  : ==> Parameters: 
2020-09-15 17:36:23.145 DEBUG 16444 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByExample  : <==      Total: 5
2020-09-15 17:36:23.149 DEBUG 16444 --- [http-nio-8080-exec-1] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,10
2020-09-15 17:36:23.150 DEBUG 16444 --- [http-nio-8080-exec-1] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 17:36:23.154 DEBUG 16444 --- [http-nio-8080-exec-1] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 5
2020-09-15 17:36:23.154  INFO 16444 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Return ------ /index
2020-09-15 17:36:23.155 DEBUG 16444 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 17:36:23.159 DEBUG 16444 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.indexoage(String), null,{page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=5, pages=1, reasonable=false, pageSizeZero=false}, toptype=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], toptag=[Tag{id=1, name='mysql', Tag{id=6, name='mybaits', Tag{id=4, name='spring', Tag{id=2, name='大数据', Tag{id=8, name='python'], topblog=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=10, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=12, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=20, title='mysql数据库的查询拉', content='**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这是一篇好博客', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:27:27 CST 2019, updatetime=Thu Sep 05 09:44:20 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=24, title='JAVA是什么', content='##java是什么&sup3; &hearts;
虹口区我说的浓氨水', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='我is单词vhuiowdecvb', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 13 11:08:48 CST 2018, updatetime=Thu Sep 13 11:08:48 CST 2018, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), /index(String)
2020-09-15 17:36:23.212 DEBUG 16444 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 17:36:23.781 ERROR 16444 --- [http-nio-8080-exec-1] org.thymeleaf.TemplateEngine             : [THYMELEAF][http-nio-8080-exec-1] Exception processing template "/index": An error happened during template parsing (template: "class path resource [templates//index.html]")

org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates//index.html]")
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:241)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1589)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.attoparser.ParseException: Could not parse as expression: "@{#{weixing.images}" (template: "/index" - line 150, col 44)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:393)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	... 51 common frames omitted
Caused by: org.thymeleaf.exceptions.TemplateProcessingException: Could not parse as expression: "@{#{weixing.images}" (template: "/index" - line 150, col 44)
	at org.thymeleaf.standard.expression.StandardExpressionParser.parseExpression(StandardExpressionParser.java:131)
	at org.thymeleaf.standard.expression.StandardExpressionParser.parseExpression(StandardExpressionParser.java:62)
	at org.thymeleaf.standard.expression.StandardExpressionParser.parseExpression(StandardExpressionParser.java:44)
	at org.thymeleaf.engine.EngineEventUtils.parseAttributeExpression(EngineEventUtils.java:220)
	at org.thymeleaf.engine.EngineEventUtils.computeAttributeExpression(EngineEventUtils.java:207)
	at org.thymeleaf.standard.processor.AbstractStandardExpressionAttributeTagProcessor.doProcess(AbstractStandardExpressionAttributeTagProcessor.java:125)
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74)
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95)
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633)
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleStandaloneElement(ProcessorTemplateHandler.java:918)
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleStandaloneElementEnd(TemplateHandlerAdapterMarkupHandler.java:260)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleStandaloneElementEnd(InlinedOutputExpressionMarkupHandler.java:256)
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleStandaloneElementEnd(OutputExpressionInlinePreProcessorHandler.java:169)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleStandaloneElementEnd(InlinedOutputExpressionMarkupHandler.java:104)
	at org.attoparser.HtmlVoidElement.handleOpenElementEnd(HtmlVoidElement.java:92)
	at org.attoparser.HtmlMarkupHandler.handleOpenElementEnd(HtmlMarkupHandler.java:297)
	at org.attoparser.MarkupEventProcessorHandler.handleOpenElementEnd(MarkupEventProcessorHandler.java:402)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:159)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	... 53 common frames omitted

2020-09-15 17:36:23.995 ERROR 16444 --- [http-nio-8080-exec-1] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates//index.html]")] with root cause

org.thymeleaf.exceptions.TemplateProcessingException: Could not parse as expression: "@{#{weixing.images}" (template: "/index" - line 150, col 44)
	at org.thymeleaf.standard.expression.StandardExpressionParser.parseExpression(StandardExpressionParser.java:131)
	at org.thymeleaf.standard.expression.StandardExpressionParser.parseExpression(StandardExpressionParser.java:62)
	at org.thymeleaf.standard.expression.StandardExpressionParser.parseExpression(StandardExpressionParser.java:44)
	at org.thymeleaf.engine.EngineEventUtils.parseAttributeExpression(EngineEventUtils.java:220)
	at org.thymeleaf.engine.EngineEventUtils.computeAttributeExpression(EngineEventUtils.java:207)
	at org.thymeleaf.standard.processor.AbstractStandardExpressionAttributeTagProcessor.doProcess(AbstractStandardExpressionAttributeTagProcessor.java:125)
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74)
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95)
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633)
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleStandaloneElement(ProcessorTemplateHandler.java:918)
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleStandaloneElementEnd(TemplateHandlerAdapterMarkupHandler.java:260)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleStandaloneElementEnd(InlinedOutputExpressionMarkupHandler.java:256)
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleStandaloneElementEnd(OutputExpressionInlinePreProcessorHandler.java:169)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleStandaloneElementEnd(InlinedOutputExpressionMarkupHandler.java:104)
	at org.attoparser.HtmlVoidElement.handleOpenElementEnd(HtmlVoidElement.java:92)
	at org.attoparser.HtmlMarkupHandler.handleOpenElementEnd(HtmlMarkupHandler.java:297)
	at org.attoparser.MarkupEventProcessorHandler.handleOpenElementEnd(MarkupEventProcessorHandler.java:402)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:159)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1589)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-09-15 17:36:24.015 ERROR 16444 --- [http-nio-8080-exec-1] s.e.ErrorMvcAutoConfiguration$StaticView : Cannot render error page for request [/] and exception [An error happened during template parsing (template: "class path resource [templates//index.html]")] as the response has already been committed. As a result, the response may have the wrong status code.
2020-09-15 17:36:42.056  INFO 16444 --- [http-nio-8080-exec-7] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/about', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.AboutController.about', args=[{}]}
2020-09-15 17:36:42.058  INFO 16444 --- [http-nio-8080-exec-7] com.chenxin.blog.aspect.LogAspect        : Return ------ about
2020-09-15 17:36:42.059 DEBUG 16444 --- [http-nio-8080-exec-7] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 17:36:42.060 DEBUG 16444 --- [http-nio-8080-exec-7] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/about(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.AboutController.about(String), {about=About{petname='程鑫', intro_1='一个独立开发者，折腾在 0 和 1 世界的大叔；一个终身学习者，誓将学习无限循环. 希望结识可以共同成长的小伙伴.', intro_2='热爱编程，喜欢折腾，正在探索高效学习编程技术的方法...', loves=[篮球, 编程, 跑步, 王者], skill=[java, javaScript, Node, mysql, spring, Redis, Linux]}}(String), about(String)
2020-09-15 17:36:42.143 DEBUG 16444 --- [http-nio-8080-exec-7] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 17:36:42.598  INFO 16444 --- [http-nio-8080-exec-4] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/fragments/newblog', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.newblogs', args=[{}]}
2020-09-15 17:36:42.599 DEBUG 16444 --- [http-nio-8080-exec-4] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,3
2020-09-15 17:36:42.600 DEBUG 16444 --- [http-nio-8080-exec-4] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 17:36:42.605 DEBUG 16444 --- [http-nio-8080-exec-4] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 3
2020-09-15 17:36:42.606  INFO 16444 --- [http-nio-8080-exec-4] com.chenxin.blog.aspect.LogAspect        : Return ------ common/fragments :: newbloglist
2020-09-15 17:36:42.606 DEBUG 16444 --- [http-nio-8080-exec-4] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 17:36:42.607 DEBUG 16444 --- [http-nio-8080-exec-4] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/fragments/newblog(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.newblogs(String), {newblogs=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=10, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=12, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), common/fragments :: newbloglist(String)
2020-09-15 17:36:42.667 DEBUG 16444 --- [http-nio-8080-exec-4] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 17:37:43.303  INFO 16444 --- [http-nio-8080-exec-3] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.indexoage', args=[null, {}]}
2020-09-15 17:37:43.312 DEBUG 16444 --- [http-nio-8080-exec-3] c.c.b.m.B.findBlogByPaging_COUNT         : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0
2020-09-15 17:37:43.312 DEBUG 16444 --- [http-nio-8080-exec-3] c.c.b.m.B.findBlogByPaging_COUNT         : ==> Parameters: 
2020-09-15 17:37:43.314 DEBUG 16444 --- [http-nio-8080-exec-3] c.c.b.m.B.findBlogByPaging_COUNT         : <==      Total: 1
2020-09-15 17:37:43.314 DEBUG 16444 --- [http-nio-8080-exec-3] c.c.b.m.BlogMapper.findBlogByPaging      : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 LIMIT ?
2020-09-15 17:37:43.315 DEBUG 16444 --- [http-nio-8080-exec-3] c.c.b.m.BlogMapper.findBlogByPaging      : ==> Parameters: 10(Integer)
2020-09-15 17:37:43.323 DEBUG 16444 --- [http-nio-8080-exec-3] c.c.b.m.BlogMapper.findBlogByPaging      : <==      Total: 5
2020-09-15 17:37:43.323 DEBUG 16444 --- [http-nio-8080-exec-3] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC limit 0,6
2020-09-15 17:37:43.323 DEBUG 16444 --- [http-nio-8080-exec-3] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 17:37:43.325 DEBUG 16444 --- [http-nio-8080-exec-3] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 17:37:43.325 DEBUG 16444 --- [http-nio-8080-exec-3] c.c.blog.mapper.TagMapper.findByExample  : ==>  Preparing: SELECT t.id, t.NAME, COUNT( bt.blog_id ) countBlog FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.isrecommend = 0 GROUP BY id ORDER BY countBlog DESC limit 0,10
2020-09-15 17:37:43.325 DEBUG 16444 --- [http-nio-8080-exec-3] c.c.blog.mapper.TagMapper.findByExample  : ==> Parameters: 
2020-09-15 17:37:43.327 DEBUG 16444 --- [http-nio-8080-exec-3] c.c.blog.mapper.TagMapper.findByExample  : <==      Total: 5
2020-09-15 17:37:43.328 DEBUG 16444 --- [http-nio-8080-exec-3] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,10
2020-09-15 17:37:43.328 DEBUG 16444 --- [http-nio-8080-exec-3] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 17:37:43.330 DEBUG 16444 --- [http-nio-8080-exec-3] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 5
2020-09-15 17:37:43.331  INFO 16444 --- [http-nio-8080-exec-3] com.chenxin.blog.aspect.LogAspect        : Return ------ /index
2020-09-15 17:37:43.331 DEBUG 16444 --- [http-nio-8080-exec-3] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 17:37:43.333 DEBUG 16444 --- [http-nio-8080-exec-3] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.indexoage(String), null,{page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=5, pages=1, reasonable=false, pageSizeZero=false}, toptype=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], toptag=[Tag{id=1, name='mysql', Tag{id=6, name='mybaits', Tag{id=4, name='spring', Tag{id=2, name='大数据', Tag{id=8, name='python'], topblog=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=10, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=12, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=20, title='mysql数据库的查询拉', content='**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这是一篇好博客', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:27:27 CST 2019, updatetime=Thu Sep 05 09:44:20 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=24, title='JAVA是什么', content='##java是什么&sup3; &hearts;
虹口区我说的浓氨水', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='我is单词vhuiowdecvb', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 13 11:08:48 CST 2018, updatetime=Thu Sep 13 11:08:48 CST 2018, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), /index(String)
2020-09-15 17:37:43.409 DEBUG 16444 --- [http-nio-8080-exec-3] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 17:37:43.423 ERROR 16444 --- [http-nio-8080-exec-3] org.thymeleaf.TemplateEngine             : [THYMELEAF][http-nio-8080-exec-3] Exception processing template "/index": An error happened during template parsing (template: "class path resource [templates//index.html]")

org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates//index.html]")
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:241)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1589)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.attoparser.ParseException: Could not parse as expression: "@{#{weixing.images}" (template: "/index" - line 150, col 44)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:393)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	... 51 common frames omitted
Caused by: org.thymeleaf.exceptions.TemplateProcessingException: Could not parse as expression: "@{#{weixing.images}" (template: "/index" - line 150, col 44)
	at org.thymeleaf.standard.expression.StandardExpressionParser.parseExpression(StandardExpressionParser.java:131)
	at org.thymeleaf.standard.expression.StandardExpressionParser.parseExpression(StandardExpressionParser.java:62)
	at org.thymeleaf.standard.expression.StandardExpressionParser.parseExpression(StandardExpressionParser.java:44)
	at org.thymeleaf.engine.EngineEventUtils.parseAttributeExpression(EngineEventUtils.java:220)
	at org.thymeleaf.engine.EngineEventUtils.computeAttributeExpression(EngineEventUtils.java:207)
	at org.thymeleaf.standard.processor.AbstractStandardExpressionAttributeTagProcessor.doProcess(AbstractStandardExpressionAttributeTagProcessor.java:125)
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74)
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95)
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633)
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleStandaloneElement(ProcessorTemplateHandler.java:918)
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleStandaloneElementEnd(TemplateHandlerAdapterMarkupHandler.java:260)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleStandaloneElementEnd(InlinedOutputExpressionMarkupHandler.java:256)
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleStandaloneElementEnd(OutputExpressionInlinePreProcessorHandler.java:169)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleStandaloneElementEnd(InlinedOutputExpressionMarkupHandler.java:104)
	at org.attoparser.HtmlVoidElement.handleOpenElementEnd(HtmlVoidElement.java:92)
	at org.attoparser.HtmlMarkupHandler.handleOpenElementEnd(HtmlMarkupHandler.java:297)
	at org.attoparser.MarkupEventProcessorHandler.handleOpenElementEnd(MarkupEventProcessorHandler.java:402)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:159)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	... 53 common frames omitted

2020-09-15 17:37:43.423 ERROR 16444 --- [http-nio-8080-exec-3] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates//index.html]")] with root cause

org.thymeleaf.exceptions.TemplateProcessingException: Could not parse as expression: "@{#{weixing.images}" (template: "/index" - line 150, col 44)
	at org.thymeleaf.standard.expression.StandardExpressionParser.parseExpression(StandardExpressionParser.java:131)
	at org.thymeleaf.standard.expression.StandardExpressionParser.parseExpression(StandardExpressionParser.java:62)
	at org.thymeleaf.standard.expression.StandardExpressionParser.parseExpression(StandardExpressionParser.java:44)
	at org.thymeleaf.engine.EngineEventUtils.parseAttributeExpression(EngineEventUtils.java:220)
	at org.thymeleaf.engine.EngineEventUtils.computeAttributeExpression(EngineEventUtils.java:207)
	at org.thymeleaf.standard.processor.AbstractStandardExpressionAttributeTagProcessor.doProcess(AbstractStandardExpressionAttributeTagProcessor.java:125)
	at org.thymeleaf.processor.element.AbstractAttributeTagProcessor.doProcess(AbstractAttributeTagProcessor.java:74)
	at org.thymeleaf.processor.element.AbstractElementTagProcessor.process(AbstractElementTagProcessor.java:95)
	at org.thymeleaf.util.ProcessorConfigurationUtils$ElementTagProcessorWrapper.process(ProcessorConfigurationUtils.java:633)
	at org.thymeleaf.engine.ProcessorTemplateHandler.handleStandaloneElement(ProcessorTemplateHandler.java:918)
	at org.thymeleaf.engine.TemplateHandlerAdapterMarkupHandler.handleStandaloneElementEnd(TemplateHandlerAdapterMarkupHandler.java:260)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler$InlineMarkupAdapterPreProcessorHandler.handleStandaloneElementEnd(InlinedOutputExpressionMarkupHandler.java:256)
	at org.thymeleaf.standard.inline.OutputExpressionInlinePreProcessorHandler.handleStandaloneElementEnd(OutputExpressionInlinePreProcessorHandler.java:169)
	at org.thymeleaf.templateparser.markup.InlinedOutputExpressionMarkupHandler.handleStandaloneElementEnd(InlinedOutputExpressionMarkupHandler.java:104)
	at org.attoparser.HtmlVoidElement.handleOpenElementEnd(HtmlVoidElement.java:92)
	at org.attoparser.HtmlMarkupHandler.handleOpenElementEnd(HtmlMarkupHandler.java:297)
	at org.attoparser.MarkupEventProcessorHandler.handleOpenElementEnd(MarkupEventProcessorHandler.java:402)
	at org.attoparser.ParsingElementMarkupUtil.parseOpenElement(ParsingElementMarkupUtil.java:159)
	at org.attoparser.MarkupParser.parseBuffer(MarkupParser.java:710)
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:301)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1589)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-09-15 17:37:43.430 ERROR 16444 --- [http-nio-8080-exec-3] s.e.ErrorMvcAutoConfiguration$StaticView : Cannot render error page for request [/] and exception [An error happened during template parsing (template: "class path resource [templates//index.html]")] as the response has already been committed. As a result, the response may have the wrong status code.
2020-09-15 17:38:40.988  INFO 16504 --- [restartedMain] com.chenxin.blog.BlogApplication         : Starting BlogApplication on LAPTOP-UGEIKVSJ with PID 16504 (D:\Program Files\idea-workaplace\blog\target\classes started by asus in D:\Program Files\idea-workaplace\blog)
2020-09-15 17:38:40.991 DEBUG 16504 --- [restartedMain] com.chenxin.blog.BlogApplication         : Running with Spring Boot v2.3.3.RELEASE, Spring v5.2.8.RELEASE
2020-09-15 17:38:40.991  INFO 16504 --- [restartedMain] com.chenxin.blog.BlogApplication         : The following profiles are active: dev
2020-09-15 17:38:41.043  INFO 16504 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-09-15 17:38:41.044  INFO 16504 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-09-15 17:38:41.699  INFO 16504 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-09-15 17:38:41.700  INFO 16504 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-09-15 17:38:41.733  INFO 16504 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 23ms. Found 0 Redis repository interfaces.
2020-09-15 17:38:42.366  INFO 16504 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-09-15 17:38:42.373  INFO 16504 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-09-15 17:38:42.373  INFO 16504 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.37]
2020-09-15 17:38:42.462  INFO 16504 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-09-15 17:38:42.462  INFO 16504 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1418 ms
2020-09-15 17:38:43.452  INFO 16504 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-09-15 17:38:43.552  INFO 16504 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-09-15 17:38:44.083  INFO 16504 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-09-15 17:38:44.116  INFO 16504 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-09-15 17:38:44.125  INFO 16504 --- [restartedMain] com.chenxin.blog.BlogApplication         : Started BlogApplication in 3.578 seconds (JVM running for 4.953)
2020-09-15 17:39:11.183  INFO 16504 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-09-15 17:39:11.184  INFO 16504 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-09-15 17:39:11.191  INFO 16504 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 7 ms
2020-09-15 17:39:11.217  INFO 16504 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.indexoage', args=[null, {}]}
2020-09-15 17:39:11.929  INFO 16504 --- [http-nio-8080-exec-1] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-09-15 17:39:11.964 DEBUG 16504 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByPaging_COUNT         : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0
2020-09-15 17:39:12.062 DEBUG 16504 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByPaging_COUNT         : ==> Parameters: 
2020-09-15 17:39:12.085 DEBUG 16504 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByPaging_COUNT         : <==      Total: 1
2020-09-15 17:39:12.088 DEBUG 16504 --- [http-nio-8080-exec-1] c.c.b.m.BlogMapper.findBlogByPaging      : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 LIMIT ?
2020-09-15 17:39:12.091 DEBUG 16504 --- [http-nio-8080-exec-1] c.c.b.m.BlogMapper.findBlogByPaging      : ==> Parameters: 10(Integer)
2020-09-15 17:39:12.101 DEBUG 16504 --- [http-nio-8080-exec-1] c.c.b.m.BlogMapper.findBlogByPaging      : <==      Total: 5
2020-09-15 17:39:12.117 DEBUG 16504 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC limit 0,6
2020-09-15 17:39:12.119 DEBUG 16504 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 17:39:12.121 DEBUG 16504 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 17:39:12.125 DEBUG 16504 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByExample  : ==>  Preparing: SELECT t.id, t.NAME, COUNT( bt.blog_id ) countBlog FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.isrecommend = 0 GROUP BY id ORDER BY countBlog DESC limit 0,10
2020-09-15 17:39:12.126 DEBUG 16504 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByExample  : ==> Parameters: 
2020-09-15 17:39:12.130 DEBUG 16504 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByExample  : <==      Total: 5
2020-09-15 17:39:12.134 DEBUG 16504 --- [http-nio-8080-exec-1] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,10
2020-09-15 17:39:12.134 DEBUG 16504 --- [http-nio-8080-exec-1] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 17:39:12.138 DEBUG 16504 --- [http-nio-8080-exec-1] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 5
2020-09-15 17:39:12.139  INFO 16504 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Return ------ /index
2020-09-15 17:39:12.139 DEBUG 16504 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 17:39:12.142 DEBUG 16504 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.indexoage(String), null,{page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=5, pages=1, reasonable=false, pageSizeZero=false}, toptype=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], toptag=[Tag{id=1, name='mysql', Tag{id=6, name='mybaits', Tag{id=4, name='spring', Tag{id=2, name='大数据', Tag{id=8, name='python'], topblog=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=10, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=12, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=20, title='mysql数据库的查询拉', content='**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这是一篇好博客', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:27:27 CST 2019, updatetime=Thu Sep 05 09:44:20 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=24, title='JAVA是什么', content='##java是什么&sup3; &hearts;
虹口区我说的浓氨水', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='我is单词vhuiowdecvb', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 13 11:08:48 CST 2018, updatetime=Thu Sep 13 11:08:48 CST 2018, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), /index(String)
2020-09-15 17:39:12.241 DEBUG 16504 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 17:39:13.156  INFO 16504 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/fragments/newblog', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.newblogs', args=[{}]}
2020-09-15 17:39:13.156 DEBUG 16504 --- [http-nio-8080-exec-1] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,3
2020-09-15 17:39:13.157 DEBUG 16504 --- [http-nio-8080-exec-1] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 17:39:13.161 DEBUG 16504 --- [http-nio-8080-exec-1] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 3
2020-09-15 17:39:13.162  INFO 16504 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Return ------ common/fragments :: newbloglist
2020-09-15 17:39:13.163 DEBUG 16504 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 17:39:13.164 DEBUG 16504 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/fragments/newblog(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.newblogs(String), {newblogs=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=10, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=12, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), common/fragments :: newbloglist(String)
2020-09-15 17:39:13.277 DEBUG 16504 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 17:39:49.340  INFO 16504 --- [http-nio-8080-exec-5] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/blog/19', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.BlogController.BlogPage', args=[19, {}]}
2020-09-15 17:39:49.344 DEBUG 16504 --- [http-nio-8080-exec-5] c.c.blog.mapper.BlogMapper.findBlogById  : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag, b.description,b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id, t.id t_id,t.name t_name,y.id y_id,y.name y_name,u.id u_id,u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime from cx_blog b LEFT JOIN cx_blog_tag bt ON b.id = bt.blog_id LEFT JOIN cx_type y ON b.type_id=y.id LEFT JOIN cx_tag t ON bt.tag_id=t.id LEFT JOIN cx_user u on b.user_id = u.id WHERE b.id=?
2020-09-15 17:39:49.348 DEBUG 16504 --- [http-nio-8080-exec-5] c.c.blog.mapper.BlogMapper.findBlogById  : ==> Parameters: 19(Long)
2020-09-15 17:39:49.352 DEBUG 16504 --- [http-nio-8080-exec-5] c.c.blog.mapper.BlogMapper.findBlogById  : <==      Total: 2
2020-09-15 17:39:49.433 DEBUG 16504 --- [http-nio-8080-exec-5] c.c.b.m.B.updateByPrimaryKeySelective    : ==>  Preparing: update cx_blog SET viewcount = ? where id = ?
2020-09-15 17:39:49.435 DEBUG 16504 --- [http-nio-8080-exec-5] c.c.b.m.B.updateByPrimaryKeySelective    : ==> Parameters: 11(Integer), 19(Long)
2020-09-15 17:39:49.484 DEBUG 16504 --- [http-nio-8080-exec-5] c.c.b.m.B.updateByPrimaryKeySelective    : <==    Updates: 1
2020-09-15 17:39:49.485  INFO 16504 --- [http-nio-8080-exec-5] com.chenxin.blog.aspect.LogAspect        : Return ------ blog
2020-09-15 17:39:49.487 DEBUG 16504 --- [http-nio-8080-exec-5] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 17:39:49.493 DEBUG 16504 --- [http-nio-8080-exec-5] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/blog/19(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.BlogController.BlogPage(String), 19,{blog=Blog{id=19, title='mysql数据库的查询拉', content='<h1 id="spring-boot开发小而美的个人博客">Spring Boot开发小而美的个人博客</h1>
<blockquote>
<p>作者：李仁密</p>
</blockquote>
<p><strong>个人博客功能：</strong></p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg" alt="" /></p>
<p><strong>技术组合：</strong></p>
<ul>
<li>后端：Spring Boot + JPA + thymeleaf模板</li>
<li>数据库：MySQL</li>
<li>前端UI：Semantic UI框架</li>
</ul>
<p><strong>工具与环境：</strong></p>
<ul>
<li>IDEA</li>
<li>Maven 3</li>
<li>JDK 8</li>
<li>Axure RP 8</li>
</ul>
<p><strong>课程内容模块：</strong></p>
<ul>
<li>需求分析与功能规划</li>
<li>页面设计与开发</li>
<li>技术框架搭建</li>
<li>后端管理功能实现</li>
<li>前端管理功能实现</li>
</ul>
<p><strong>你能学得什么？</strong></p>
<ul>
<li>基于Spring Boot的完整全栈式的开发套路</li>
<li>Semantic UI框架的使用</li>
<li>一套博客系统的源代码与设计</li>
</ul>
<h2 id="1需求与功能">1、需求与功能</h2>
<h3 id="11-用户故事">1.1 用户故事</h3>
<p>用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。</p>
<blockquote>
<p>用户故事最好是用户团队编写</p>
</blockquote>
<p><strong>用户故事模板</strong>：</p>
<ul>
<li>As a (role of user), I want (some feature) so that (some business value).</li>
<li>作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处</li>
</ul>
<p><strong>关键点</strong>：角色、功能、商业价值</p>
<p><strong>举例</strong>：</p>
<ul>
<li>作为一个招聘网站<strong>注册用户</strong>，我想<strong>查看最近3天发布的招聘信息</strong>，以便于<strong>了解最新的招聘信息</strong>。</li>
<li>作为公司，可以张贴新工作。</li>
</ul>
<p>个人博客系统的用户故事：</p>
<p>角色：<strong>普通访客</strong>，<strong>管理员（我）</strong></p>
<ul>
<li>访客，可以分页查看所有的博客</li>
<li>访客，可以快速查看博客数最多的6个分类</li>
<li>访客，可以查看所有的分类</li>
<li>访客，可以查看某个分类下的博客列表</li>
<li>访客，可以快速查看标记博客最多的10个标签</li>
<li>访客，可以查看所有的标签</li>
<li>访客，可以查看某个标签下的博客列表</li>
<li>访客，可以根据年度时间线查看博客列表</li>
<li>访客，可以快速查看最新的推荐博客</li>
<li>访客，可以用关键字全局搜索博客</li>
<li>访客，可以查看单个博客内容</li>
<li>访客，可以对博客内容进行评论</li>
<li>访客，可以赞赏博客内容</li>
<li>访客，可以微信扫码阅读博客内容</li>
<li>访客，可以在首页扫描公众号二维码关注我</li>
<li>我，可以用户名和密码登录后台管理</li>
<li>我，可以管理博客
<ul>
<li>我，可以发布新博客</li>
<li>我，可以对博客进行分类</li>
<li>我，可以对博客打标签</li>
<li>我，可以修改博客</li>
<li>我，可以删除博客</li>
<li>我，可以根据标题，分类，标签查询博客</li>
</ul>
</li>
<li>我，可以管理博客分类
<ul>
<li>我，可以新增一个分类</li>
<li>我，可以修改一个分类</li>
<li>我，可以删除一个分类</li>
<li>我，可以根据分类名称查询分类</li>
</ul>
</li>
<li>我，可以管理标签
<ul>
<li>我，可以新增一个标签</li>
<li>我，可以修改一个标签</li>
<li>我，可以删除一个标签</li>
<li>我，可以根据名称查询标签</li>
</ul>
</li>
</ul>
<h3 id="12-功能规划">1.2 功能规划</h3>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg" alt="" /></p>
<h2 id="2页面设计与开发">2、页面设计与开发</h2>
<h3 id="21-设计">2.1 设计</h3>
<p><strong>页面规划：</strong></p>
<p>前端展示：首页、详情页、分类、标签、归档、关于我</p>
<p>后台管理：模板页</p>
<h3 id="22-页面开发">2.2 页面开发</h3>
<p><a href="https://semantic-ui.com/" target="_blank">Semantic UI官网</a></p>
<p><a href="http://www.semantic-ui.cn/" target="_blank">Semantic UI中文官网</a></p>
<p><a href="https://imcoding.me/blogs/5" target="_blank">WebStorm下载与破解</a></p>
<p><a href="https://www.toptal.com/designers/subtlepatterns/" target="_blank">背景图片资源</a></p>
<h3 id="23-插件集成">2.3 插件集成</h3>
<p><a href="https://pandao.github.io/editor.md/" target="_blank">编辑器 Markdown</a></p>
<p><a href="https://github.com/sofish/typo.css" target="_blank">内容排版 typo.css</a></p>
<p><a href="https://daneden.github.io/animate.css/" target="_blank">动画 animate.css</a></p>
<p><a href="https://github.com/PrismJS/prism" target="_blank">代码高亮 prism</a></p>
<p><a href="https://tscanlin.github.io/tocbot/" target="_blank">目录生成 Tocbot</a></p>
<p><a href="http://imakewebthings.com/waypoints/" target="_blank">滚动侦测 waypoints</a></p>
<p><a href="https://github.com/flesler/jquery.scrollTo" target="_blank">平滑滚动 jquery.scrollTo</a></p>
<p><a href="https://davidshimjs.github.io/qrcodejs/" target="_blank">二维码生成 qrcode.js</a></p>
<h2 id="3框架搭建">3、框架搭建</h2>
<blockquote>
<p><a href="https://www.jetbrains.com/idea/" target="_blank">IDEA下载 https://www.jetbrains.com/idea/</a></p>
</blockquote>
<h3 id="31-构建与配置">3.1 构建与配置</h3>
<p><strong>1、引入Spring Boot模块：</strong></p>
<ul>
<li>web</li>
<li>Thymeleaf</li>
<li>JPA</li>
<li>MySQL</li>
<li>Aspects</li>
<li>DevTools</li>
</ul>
<p><strong>2、application.yml配置</strong></p>
<ul>
<li>
<p>使用 thymeleaf 3</p>
<p>pom.xml:</p>
</li>
</ul>
<pre><code class="language-xml">&lt;thymeleaf.version&gt;3.0.2.RELEASE&lt;/thymeleaf.version&gt;
&lt;thymeleaf-layout-dialect.version&gt;2.1.1&lt;/thymeleaf-layout-dialect.version&gt;
</code></pre>
<pre><code>application.yml:
</code></pre>
<pre><code class="language-yaml">spring:
  thymeleaf:
    mode: HTML
</code></pre>
<ul>
<li>数据库连接配置</li>
</ul>
<pre><code class="language-yaml">spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&amp;characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
</code></pre>
<ul>
<li>
<p>日志配置</p>
<p>application.yml:</p>
</li>
</ul>
<pre><code class="language-yaml">logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
</code></pre>
<p>​	logback-spring.xml：</p>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;configuration&gt;
    &lt;!--包含Spring boot对logback日志的默认配置--&gt;
    &lt;include resource=&quot;org/springframework/boot/logging/logback/defaults.xml&quot; /&gt;
    &lt;property name=&quot;LOG_FILE&quot; value=&quot;${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}&quot;/&gt;
    &lt;include resource=&quot;org/springframework/boot/logging/logback/console-appender.xml&quot; /&gt;

    &lt;!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置--&gt;
    &lt;appender name=&quot;TIME_FILE&quot;
              class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;
        &lt;encoder&gt;
            &lt;pattern&gt;${FILE_LOG_PATTERN}&lt;/pattern&gt;
        &lt;/encoder&gt;
        &lt;file&gt;${LOG_FILE}&lt;/file&gt;
        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;
            &lt;fileNamePattern&gt;${LOG_FILE}.%d{yyyy-MM-dd}.%i&lt;/fileNamePattern&gt;
            &lt;!--保留历史日志一个月的时间--&gt;
            &lt;maxHistory&gt;30&lt;/maxHistory&gt;
            &lt;!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            --&gt;
            &lt;timeBasedFileNamingAndTriggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;
                &lt;maxFileSize&gt;10MB&lt;/maxFileSize&gt;
            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;

        &lt;/rollingPolicy&gt;
    &lt;/appender&gt;

    &lt;root level=&quot;INFO&quot;&gt;
        &lt;appender-ref ref=&quot;CONSOLE&quot; /&gt;
        &lt;appender-ref ref=&quot;TIME_FILE&quot; /&gt;
    &lt;/root&gt;

&lt;/configuration&gt;
&lt;!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
--&gt;
</code></pre>
<ul>
<li>生产环境与开发环境配置
<ul>
<li>application-dev.yml</li>
<li>application-pro.yml</li>
</ul>
</li>
</ul>
<h3 id="32-异常处理">3.2 异常处理</h3>
<p><strong>1、定义错误页面</strong></p>
<ul>
<li>404</li>
<li>500</li>
<li>error</li>
</ul>
<p><strong>2、全局处理异常</strong></p>
<p>统一处理异常：</p>
<pre><code class="language-java">@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error(&quot;Request URL : {} , Exception : {}&quot;, request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject(&quot;url&quot;, request.getRequestURL());
        mav.addObject(&quot;exception&quot;, e);
        mav.setViewName(&quot;error/error&quot;);

        return mav;
    }
}
</code></pre>
<p>错误页面异常信息显示处理：</p>
<pre><code class="language-html">&lt;div&gt;
    &lt;div th:utext=&quot;'&amp;lt;!--'&quot; th:remove=&quot;tag&quot;&gt;&lt;/div&gt;
    &lt;div th:utext=&quot;'Failed Request URL : ' + ${url}&quot; th:remove=&quot;tag&quot;&gt;&lt;/div&gt;
    &lt;div th:utext=&quot;'Exception message : ' + ${exception.message}&quot; th:remove=&quot;tag&quot;&gt;&lt;/div&gt;
    &lt;ul th:remove=&quot;tag&quot;&gt;
        &lt;li th:each=&quot;st : ${exception.stackTrace}&quot; th:remove=&quot;tag&quot;&gt;&lt;span th:utext=&quot;${st}&quot; th:remove=&quot;tag&quot;&gt;&lt;/span&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;div th:utext=&quot;'--&amp;gt;'&quot; th:remove=&quot;tag&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<p><strong>3、资源找不到异常</strong></p>
<pre><code class="language-java">@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
</code></pre>
<h3 id="33-日志处理">3.3 日志处理</h3>
<p><strong>1、记录日志内容</strong></p>
<ul>
<li>请求 url</li>
<li>访问者 ip</li>
<li>调用方法 classMethod</li>
<li>参数 args</li>
<li>返回内容</li>
</ul>
<p><strong>2、记录日志类：</strong></p>
<pre><code class="language-java">@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut(&quot;execution(* com.imcoding.web.*.*(..))&quot;)
    public void log() {
    }

    @Before(&quot;log()&quot;)
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + &quot;.&quot; + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info(&quot;Rquest  ----- {}&quot;,reqeustLog);
    }

    @After(&quot;log()&quot;)
    public void doAfter() {
        //logger.info(&quot;---------- doAfter 2 ----------&quot;);
    }

    @AfterReturning(returning = &quot;result&quot;,pointcut = &quot;log()&quot;)
    public void doAtfertRturning(Object result) {
        logger.info(&quot;Return ------ {}&quot;,result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return &quot;ReqeustLog{&quot; +
                    &quot;url='&quot; + url + '\'' +
                    &quot;, ip='&quot; + ip + '\'' +
                    &quot;, classMethod='&quot; + classMethod + '\'' +
                    &quot;, args=&quot; + Arrays.toString(args) +
                    '}';
        }
    }

}
</code></pre>
<h3 id="34-页面处理">3.4 页面处理</h3>
<p><strong>1、静态页面导入project</strong></p>
<p><strong>2、thymeleaf布局</strong></p>
<ul>
<li>定义fragment</li>
<li>使用fragment布局</li>
</ul>
<p><strong>3、错误页面美化</strong></p>
<p>4、设计与规范</p>
<h3 id="41-实体设计">4.1 实体设计</h3>
<p><strong>实体类：</strong></p>
<ul>
<li>博客 Blog</li>
<li>博客分类 Type</li>
<li>博客标签 Tag</li>
<li>博客评论 Comment</li>
<li>用户 User</li>
</ul>
<p><strong>实体关系：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg" alt="" /></p>
<p><strong>评论类自关联关系：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg" alt="" /></p>
<p><strong>Blog类：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg" alt="" /></p>
<p><strong>Type类：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg" alt="" /></p>
<p><strong>Tag类：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg" alt="" /></p>
<p><strong>Comment类：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg" alt="" /></p>
<p><strong>User类：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg" alt="" /></p>
<h3 id="42-应用分层">4.2 应用分层</h3>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg" alt="" /></p>
<h3 id="43-命名约定">4.3 命名约定</h3>
<p><strong>Service/DAO层命名约定：</strong></p>
<ul>
<li>获取单个对象的方法用get做前缀。</li>
<li>获取多个对象的方法用list做前缀。</li>
<li>获取统计值的方法用count做前缀。</li>
<li>插入的方法用save(推荐)或insert做前缀。</li>
<li>删除的方法用remove(推荐)或delete做前缀。</li>
<li>修改的方法用update做前缀。</li>
</ul>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg" alt="" /></p>
<h2 id="5后台管理功能实现">5、后台管理功能实现</h2>
<h3 id="51-登录">5.1 登录</h3>
<p><strong>1、构建登录页面和后台管理首页</strong></p>
<p><strong>2、UserService和UserRepository</strong></p>
<p><strong>3、LoginController实现登录</strong></p>
<p><strong>4、MD5加密</strong></p>
<p><strong>5、登录拦截器</strong></p>
<h3 id="52-分类管理">5.2 分类管理</h3>
<p><strong>1、分类管理页面</strong></p>
<p><strong>2、分类列表分页</strong></p>
<pre><code class="language-javascript">{
  &quot;content&quot;:[
    {&quot;id&quot;:123,&quot;title&quot;:&quot;blog122&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:122,&quot;title&quot;:&quot;blog121&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:121,&quot;title&quot;:&quot;blog120&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:120,&quot;title&quot;:&quot;blog119&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:119,&quot;title&quot;:&quot;blog118&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:118,&quot;title&quot;:&quot;blog117&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:117,&quot;title&quot;:&quot;blog116&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:116,&quot;title&quot;:&quot;blog115&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:115,&quot;title&quot;:&quot;blog114&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:114,&quot;title&quot;:&quot;blog113&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:113,&quot;title&quot;:&quot;blog112&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:112,&quot;title&quot;:&quot;blog111&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:111,&quot;title&quot;:&quot;blog110&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:110,&quot;title&quot;:&quot;blog109&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:109,&quot;title&quot;:&quot;blog108&quot;,&quot;content&quot;:&quot;this is blog content&quot;}],
  &quot;last&quot;:false,
  &quot;totalPages&quot;:9,
  &quot;totalElements&quot;:123,
  &quot;size&quot;:15,
  &quot;number&quot;:0,
  &quot;first&quot;:true,
  &quot;sort&quot;:[{
    &quot;direction&quot;:&quot;DESC&quot;,
    &quot;property&quot;:&quot;id&quot;,
    &quot;ignoreCase&quot;:false,
    &quot;nullHandling&quot;:&quot;NATIVE&quot;,
    &quot;ascending&quot;:false
  }],
  &quot;numberOfElements&quot;:15
}
</code></pre>
<p><strong>3、分类新增、修改、删除</strong></p>
<h3 id="53-标签管理">5.3 标签管理</h3>
<h3 id="54-博客管理">5.4 博客管理</h3>
<p><strong>1、博客分页查询</strong></p>
<p><strong>2、博客新增</strong></p>
<p><strong>3、博客修改</strong></p>
<p><strong>4、博客删除</strong></p>
<h2 id="6前端展示功能实现">6、前端展示功能实现</h2>
<h3 id="61-首页展示">6.1 首页展示</h3>
<p><strong>1、博客列表</strong></p>
<p><strong>2、top分类</strong></p>
<p><strong>3、top标签</strong></p>
<p><strong>4、最新博客推荐</strong></p>
<p><strong>5、博客详情</strong></p>
<p><strong>1、Markdown 转换 HTML</strong></p>
<ul>
<li><a href="https://github.com/atlassian/commonmark-java" target="_blank">commonmark-java  https://github.com/atlassian/commonmark-java</a></li>
<li>pom.xml引用commonmark和扩展插件</li>
</ul>
<pre><code class="language-xml">&lt;dependency&gt;
   &lt;groupId&gt;com.atlassian.commonmark&lt;/groupId&gt;
   &lt;artifactId&gt;commonmark&lt;/artifactId&gt;
   &lt;version&gt;0.10.0&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
   &lt;groupId&gt;com.atlassian.commonmark&lt;/groupId&gt;
   &lt;artifactId&gt;commonmark-ext-heading-anchor&lt;/artifactId&gt;
   &lt;version&gt;0.10.0&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
   &lt;groupId&gt;com.atlassian.commonmark&lt;/groupId&gt;
   &lt;artifactId&gt;commonmark-ext-gfm-tables&lt;/artifactId&gt;
   &lt;version&gt;0.10.0&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<p><strong>2、评论功能</strong></p>
<ul>
<li>评论信息提交与回复功能</li>
<li>评论信息列表展示功能</li>
<li>管理员回复评论功能</li>
</ul>
<h3 id="62-分类页">6.2 分类页</h3>
<h3 id="63-标签页">6.3 标签页</h3>
<h3 id="64-归档页">6.4 归档页</h3>
<h3 id="65-关于我">6.5 关于我</h3>', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=10, isadmire=0, iscopyright=0, isrecommend=0, iscomment=1, issue=1, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=null, typeId=null, user=User{id=1, petname='程鑫', username='cx201125', password='dbd1a8bc623a690cd163ec0ade366995', mail='2543139363@qq.com', type=0, headportrait='/images/head.jpg', createtime=Wed Aug 26 18:02:27 CST 2020, updatetime=Wed Aug 26 18:02:30 CST 2020, blogs=[]}, type=Type{id=2, name='JAVA', blogs=[]}, tagsId='null', comments=[Comment{id=19, petname='程鑫', mail='2543139363@qq.com', headportrait='null', matter='null', createtime=null, blogId=null, blog=null, topId=null, top=null, bottom=[]}], tags=[Tag{id=1, name='mysql', Tag{id=4, name='spring']}}(String), blog(String)
2020-09-15 17:39:49.618 DEBUG 16504 --- [http-nio-8080-exec-5] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 17:39:50.265  INFO 16504 --- [http-nio-8080-exec-7] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/fragments/newblog', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.newblogs', args=[{}]}
2020-09-15 17:39:50.266 DEBUG 16504 --- [http-nio-8080-exec-7] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,3
2020-09-15 17:39:50.267 DEBUG 16504 --- [http-nio-8080-exec-7] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 17:39:50.274 DEBUG 16504 --- [http-nio-8080-exec-7] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 3
2020-09-15 17:39:50.275  INFO 16504 --- [http-nio-8080-exec-7] com.chenxin.blog.aspect.LogAspect        : Return ------ common/fragments :: newbloglist
2020-09-15 17:39:50.275 DEBUG 16504 --- [http-nio-8080-exec-7] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 17:39:50.277 DEBUG 16504 --- [http-nio-8080-exec-7] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/fragments/newblog(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.newblogs(String), {newblogs=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=11, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=12, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), common/fragments :: newbloglist(String)
2020-09-15 17:39:50.375 DEBUG 16504 --- [http-nio-8080-exec-7] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 17:49:59.881  INFO 16504 --- [http-nio-8080-exec-8] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/blog/19', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.BlogController.BlogPage', args=[19, {}]}
2020-09-15 17:49:59.887 DEBUG 16504 --- [http-nio-8080-exec-8] c.c.blog.mapper.BlogMapper.findBlogById  : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag, b.description,b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id, t.id t_id,t.name t_name,y.id y_id,y.name y_name,u.id u_id,u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime from cx_blog b LEFT JOIN cx_blog_tag bt ON b.id = bt.blog_id LEFT JOIN cx_type y ON b.type_id=y.id LEFT JOIN cx_tag t ON bt.tag_id=t.id LEFT JOIN cx_user u on b.user_id = u.id WHERE b.id=?
2020-09-15 17:49:59.888 DEBUG 16504 --- [http-nio-8080-exec-8] c.c.blog.mapper.BlogMapper.findBlogById  : ==> Parameters: 19(Long)
2020-09-15 17:49:59.896 DEBUG 16504 --- [http-nio-8080-exec-8] c.c.blog.mapper.BlogMapper.findBlogById  : <==      Total: 2
2020-09-15 17:49:59.906 DEBUG 16504 --- [http-nio-8080-exec-8] c.c.b.m.B.updateByPrimaryKeySelective    : ==>  Preparing: update cx_blog SET viewcount = ? where id = ?
2020-09-15 17:49:59.907 DEBUG 16504 --- [http-nio-8080-exec-8] c.c.b.m.B.updateByPrimaryKeySelective    : ==> Parameters: 12(Integer), 19(Long)
2020-09-15 17:50:00.231 DEBUG 16504 --- [http-nio-8080-exec-8] c.c.b.m.B.updateByPrimaryKeySelective    : <==    Updates: 1
2020-09-15 17:50:00.231  INFO 16504 --- [http-nio-8080-exec-8] com.chenxin.blog.aspect.LogAspect        : Return ------ blog
2020-09-15 17:50:00.232 DEBUG 16504 --- [http-nio-8080-exec-8] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 17:50:00.233 DEBUG 16504 --- [http-nio-8080-exec-8] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/blog/19(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.BlogController.BlogPage(String), 19,{blog=Blog{id=19, title='mysql数据库的查询拉', content='<h1 id="spring-boot开发小而美的个人博客">Spring Boot开发小而美的个人博客</h1>
<blockquote>
<p>作者：李仁密</p>
</blockquote>
<p><strong>个人博客功能：</strong></p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg" alt="" /></p>
<p><strong>技术组合：</strong></p>
<ul>
<li>后端：Spring Boot + JPA + thymeleaf模板</li>
<li>数据库：MySQL</li>
<li>前端UI：Semantic UI框架</li>
</ul>
<p><strong>工具与环境：</strong></p>
<ul>
<li>IDEA</li>
<li>Maven 3</li>
<li>JDK 8</li>
<li>Axure RP 8</li>
</ul>
<p><strong>课程内容模块：</strong></p>
<ul>
<li>需求分析与功能规划</li>
<li>页面设计与开发</li>
<li>技术框架搭建</li>
<li>后端管理功能实现</li>
<li>前端管理功能实现</li>
</ul>
<p><strong>你能学得什么？</strong></p>
<ul>
<li>基于Spring Boot的完整全栈式的开发套路</li>
<li>Semantic UI框架的使用</li>
<li>一套博客系统的源代码与设计</li>
</ul>
<h2 id="1需求与功能">1、需求与功能</h2>
<h3 id="11-用户故事">1.1 用户故事</h3>
<p>用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。</p>
<blockquote>
<p>用户故事最好是用户团队编写</p>
</blockquote>
<p><strong>用户故事模板</strong>：</p>
<ul>
<li>As a (role of user), I want (some feature) so that (some business value).</li>
<li>作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处</li>
</ul>
<p><strong>关键点</strong>：角色、功能、商业价值</p>
<p><strong>举例</strong>：</p>
<ul>
<li>作为一个招聘网站<strong>注册用户</strong>，我想<strong>查看最近3天发布的招聘信息</strong>，以便于<strong>了解最新的招聘信息</strong>。</li>
<li>作为公司，可以张贴新工作。</li>
</ul>
<p>个人博客系统的用户故事：</p>
<p>角色：<strong>普通访客</strong>，<strong>管理员（我）</strong></p>
<ul>
<li>访客，可以分页查看所有的博客</li>
<li>访客，可以快速查看博客数最多的6个分类</li>
<li>访客，可以查看所有的分类</li>
<li>访客，可以查看某个分类下的博客列表</li>
<li>访客，可以快速查看标记博客最多的10个标签</li>
<li>访客，可以查看所有的标签</li>
<li>访客，可以查看某个标签下的博客列表</li>
<li>访客，可以根据年度时间线查看博客列表</li>
<li>访客，可以快速查看最新的推荐博客</li>
<li>访客，可以用关键字全局搜索博客</li>
<li>访客，可以查看单个博客内容</li>
<li>访客，可以对博客内容进行评论</li>
<li>访客，可以赞赏博客内容</li>
<li>访客，可以微信扫码阅读博客内容</li>
<li>访客，可以在首页扫描公众号二维码关注我</li>
<li>我，可以用户名和密码登录后台管理</li>
<li>我，可以管理博客
<ul>
<li>我，可以发布新博客</li>
<li>我，可以对博客进行分类</li>
<li>我，可以对博客打标签</li>
<li>我，可以修改博客</li>
<li>我，可以删除博客</li>
<li>我，可以根据标题，分类，标签查询博客</li>
</ul>
</li>
<li>我，可以管理博客分类
<ul>
<li>我，可以新增一个分类</li>
<li>我，可以修改一个分类</li>
<li>我，可以删除一个分类</li>
<li>我，可以根据分类名称查询分类</li>
</ul>
</li>
<li>我，可以管理标签
<ul>
<li>我，可以新增一个标签</li>
<li>我，可以修改一个标签</li>
<li>我，可以删除一个标签</li>
<li>我，可以根据名称查询标签</li>
</ul>
</li>
</ul>
<h3 id="12-功能规划">1.2 功能规划</h3>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg" alt="" /></p>
<h2 id="2页面设计与开发">2、页面设计与开发</h2>
<h3 id="21-设计">2.1 设计</h3>
<p><strong>页面规划：</strong></p>
<p>前端展示：首页、详情页、分类、标签、归档、关于我</p>
<p>后台管理：模板页</p>
<h3 id="22-页面开发">2.2 页面开发</h3>
<p><a href="https://semantic-ui.com/" target="_blank">Semantic UI官网</a></p>
<p><a href="http://www.semantic-ui.cn/" target="_blank">Semantic UI中文官网</a></p>
<p><a href="https://imcoding.me/blogs/5" target="_blank">WebStorm下载与破解</a></p>
<p><a href="https://www.toptal.com/designers/subtlepatterns/" target="_blank">背景图片资源</a></p>
<h3 id="23-插件集成">2.3 插件集成</h3>
<p><a href="https://pandao.github.io/editor.md/" target="_blank">编辑器 Markdown</a></p>
<p><a href="https://github.com/sofish/typo.css" target="_blank">内容排版 typo.css</a></p>
<p><a href="https://daneden.github.io/animate.css/" target="_blank">动画 animate.css</a></p>
<p><a href="https://github.com/PrismJS/prism" target="_blank">代码高亮 prism</a></p>
<p><a href="https://tscanlin.github.io/tocbot/" target="_blank">目录生成 Tocbot</a></p>
<p><a href="http://imakewebthings.com/waypoints/" target="_blank">滚动侦测 waypoints</a></p>
<p><a href="https://github.com/flesler/jquery.scrollTo" target="_blank">平滑滚动 jquery.scrollTo</a></p>
<p><a href="https://davidshimjs.github.io/qrcodejs/" target="_blank">二维码生成 qrcode.js</a></p>
<h2 id="3框架搭建">3、框架搭建</h2>
<blockquote>
<p><a href="https://www.jetbrains.com/idea/" target="_blank">IDEA下载 https://www.jetbrains.com/idea/</a></p>
</blockquote>
<h3 id="31-构建与配置">3.1 构建与配置</h3>
<p><strong>1、引入Spring Boot模块：</strong></p>
<ul>
<li>web</li>
<li>Thymeleaf</li>
<li>JPA</li>
<li>MySQL</li>
<li>Aspects</li>
<li>DevTools</li>
</ul>
<p><strong>2、application.yml配置</strong></p>
<ul>
<li>
<p>使用 thymeleaf 3</p>
<p>pom.xml:</p>
</li>
</ul>
<pre><code class="language-xml">&lt;thymeleaf.version&gt;3.0.2.RELEASE&lt;/thymeleaf.version&gt;
&lt;thymeleaf-layout-dialect.version&gt;2.1.1&lt;/thymeleaf-layout-dialect.version&gt;
</code></pre>
<pre><code>application.yml:
</code></pre>
<pre><code class="language-yaml">spring:
  thymeleaf:
    mode: HTML
</code></pre>
<ul>
<li>数据库连接配置</li>
</ul>
<pre><code class="language-yaml">spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&amp;characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
</code></pre>
<ul>
<li>
<p>日志配置</p>
<p>application.yml:</p>
</li>
</ul>
<pre><code class="language-yaml">logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
</code></pre>
<p>​	logback-spring.xml：</p>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;configuration&gt;
    &lt;!--包含Spring boot对logback日志的默认配置--&gt;
    &lt;include resource=&quot;org/springframework/boot/logging/logback/defaults.xml&quot; /&gt;
    &lt;property name=&quot;LOG_FILE&quot; value=&quot;${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}&quot;/&gt;
    &lt;include resource=&quot;org/springframework/boot/logging/logback/console-appender.xml&quot; /&gt;

    &lt;!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置--&gt;
    &lt;appender name=&quot;TIME_FILE&quot;
              class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;
        &lt;encoder&gt;
            &lt;pattern&gt;${FILE_LOG_PATTERN}&lt;/pattern&gt;
        &lt;/encoder&gt;
        &lt;file&gt;${LOG_FILE}&lt;/file&gt;
        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;
            &lt;fileNamePattern&gt;${LOG_FILE}.%d{yyyy-MM-dd}.%i&lt;/fileNamePattern&gt;
            &lt;!--保留历史日志一个月的时间--&gt;
            &lt;maxHistory&gt;30&lt;/maxHistory&gt;
            &lt;!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            --&gt;
            &lt;timeBasedFileNamingAndTriggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;
                &lt;maxFileSize&gt;10MB&lt;/maxFileSize&gt;
            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;

        &lt;/rollingPolicy&gt;
    &lt;/appender&gt;

    &lt;root level=&quot;INFO&quot;&gt;
        &lt;appender-ref ref=&quot;CONSOLE&quot; /&gt;
        &lt;appender-ref ref=&quot;TIME_FILE&quot; /&gt;
    &lt;/root&gt;

&lt;/configuration&gt;
&lt;!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
--&gt;
</code></pre>
<ul>
<li>生产环境与开发环境配置
<ul>
<li>application-dev.yml</li>
<li>application-pro.yml</li>
</ul>
</li>
</ul>
<h3 id="32-异常处理">3.2 异常处理</h3>
<p><strong>1、定义错误页面</strong></p>
<ul>
<li>404</li>
<li>500</li>
<li>error</li>
</ul>
<p><strong>2、全局处理异常</strong></p>
<p>统一处理异常：</p>
<pre><code class="language-java">@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error(&quot;Request URL : {} , Exception : {}&quot;, request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject(&quot;url&quot;, request.getRequestURL());
        mav.addObject(&quot;exception&quot;, e);
        mav.setViewName(&quot;error/error&quot;);

        return mav;
    }
}
</code></pre>
<p>错误页面异常信息显示处理：</p>
<pre><code class="language-html">&lt;div&gt;
    &lt;div th:utext=&quot;'&amp;lt;!--'&quot; th:remove=&quot;tag&quot;&gt;&lt;/div&gt;
    &lt;div th:utext=&quot;'Failed Request URL : ' + ${url}&quot; th:remove=&quot;tag&quot;&gt;&lt;/div&gt;
    &lt;div th:utext=&quot;'Exception message : ' + ${exception.message}&quot; th:remove=&quot;tag&quot;&gt;&lt;/div&gt;
    &lt;ul th:remove=&quot;tag&quot;&gt;
        &lt;li th:each=&quot;st : ${exception.stackTrace}&quot; th:remove=&quot;tag&quot;&gt;&lt;span th:utext=&quot;${st}&quot; th:remove=&quot;tag&quot;&gt;&lt;/span&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;div th:utext=&quot;'--&amp;gt;'&quot; th:remove=&quot;tag&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<p><strong>3、资源找不到异常</strong></p>
<pre><code class="language-java">@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
</code></pre>
<h3 id="33-日志处理">3.3 日志处理</h3>
<p><strong>1、记录日志内容</strong></p>
<ul>
<li>请求 url</li>
<li>访问者 ip</li>
<li>调用方法 classMethod</li>
<li>参数 args</li>
<li>返回内容</li>
</ul>
<p><strong>2、记录日志类：</strong></p>
<pre><code class="language-java">@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut(&quot;execution(* com.imcoding.web.*.*(..))&quot;)
    public void log() {
    }

    @Before(&quot;log()&quot;)
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + &quot;.&quot; + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info(&quot;Rquest  ----- {}&quot;,reqeustLog);
    }

    @After(&quot;log()&quot;)
    public void doAfter() {
        //logger.info(&quot;---------- doAfter 2 ----------&quot;);
    }

    @AfterReturning(returning = &quot;result&quot;,pointcut = &quot;log()&quot;)
    public void doAtfertRturning(Object result) {
        logger.info(&quot;Return ------ {}&quot;,result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return &quot;ReqeustLog{&quot; +
                    &quot;url='&quot; + url + '\'' +
                    &quot;, ip='&quot; + ip + '\'' +
                    &quot;, classMethod='&quot; + classMethod + '\'' +
                    &quot;, args=&quot; + Arrays.toString(args) +
                    '}';
        }
    }

}
</code></pre>
<h3 id="34-页面处理">3.4 页面处理</h3>
<p><strong>1、静态页面导入project</strong></p>
<p><strong>2、thymeleaf布局</strong></p>
<ul>
<li>定义fragment</li>
<li>使用fragment布局</li>
</ul>
<p><strong>3、错误页面美化</strong></p>
<p>4、设计与规范</p>
<h3 id="41-实体设计">4.1 实体设计</h3>
<p><strong>实体类：</strong></p>
<ul>
<li>博客 Blog</li>
<li>博客分类 Type</li>
<li>博客标签 Tag</li>
<li>博客评论 Comment</li>
<li>用户 User</li>
</ul>
<p><strong>实体关系：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg" alt="" /></p>
<p><strong>评论类自关联关系：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg" alt="" /></p>
<p><strong>Blog类：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg" alt="" /></p>
<p><strong>Type类：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg" alt="" /></p>
<p><strong>Tag类：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg" alt="" /></p>
<p><strong>Comment类：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg" alt="" /></p>
<p><strong>User类：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg" alt="" /></p>
<h3 id="42-应用分层">4.2 应用分层</h3>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg" alt="" /></p>
<h3 id="43-命名约定">4.3 命名约定</h3>
<p><strong>Service/DAO层命名约定：</strong></p>
<ul>
<li>获取单个对象的方法用get做前缀。</li>
<li>获取多个对象的方法用list做前缀。</li>
<li>获取统计值的方法用count做前缀。</li>
<li>插入的方法用save(推荐)或insert做前缀。</li>
<li>删除的方法用remove(推荐)或delete做前缀。</li>
<li>修改的方法用update做前缀。</li>
</ul>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg" alt="" /></p>
<h2 id="5后台管理功能实现">5、后台管理功能实现</h2>
<h3 id="51-登录">5.1 登录</h3>
<p><strong>1、构建登录页面和后台管理首页</strong></p>
<p><strong>2、UserService和UserRepository</strong></p>
<p><strong>3、LoginController实现登录</strong></p>
<p><strong>4、MD5加密</strong></p>
<p><strong>5、登录拦截器</strong></p>
<h3 id="52-分类管理">5.2 分类管理</h3>
<p><strong>1、分类管理页面</strong></p>
<p><strong>2、分类列表分页</strong></p>
<pre><code class="language-javascript">{
  &quot;content&quot;:[
    {&quot;id&quot;:123,&quot;title&quot;:&quot;blog122&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:122,&quot;title&quot;:&quot;blog121&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:121,&quot;title&quot;:&quot;blog120&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:120,&quot;title&quot;:&quot;blog119&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:119,&quot;title&quot;:&quot;blog118&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:118,&quot;title&quot;:&quot;blog117&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:117,&quot;title&quot;:&quot;blog116&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:116,&quot;title&quot;:&quot;blog115&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:115,&quot;title&quot;:&quot;blog114&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:114,&quot;title&quot;:&quot;blog113&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:113,&quot;title&quot;:&quot;blog112&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:112,&quot;title&quot;:&quot;blog111&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:111,&quot;title&quot;:&quot;blog110&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:110,&quot;title&quot;:&quot;blog109&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:109,&quot;title&quot;:&quot;blog108&quot;,&quot;content&quot;:&quot;this is blog content&quot;}],
  &quot;last&quot;:false,
  &quot;totalPages&quot;:9,
  &quot;totalElements&quot;:123,
  &quot;size&quot;:15,
  &quot;number&quot;:0,
  &quot;first&quot;:true,
  &quot;sort&quot;:[{
    &quot;direction&quot;:&quot;DESC&quot;,
    &quot;property&quot;:&quot;id&quot;,
    &quot;ignoreCase&quot;:false,
    &quot;nullHandling&quot;:&quot;NATIVE&quot;,
    &quot;ascending&quot;:false
  }],
  &quot;numberOfElements&quot;:15
}
</code></pre>
<p><strong>3、分类新增、修改、删除</strong></p>
<h3 id="53-标签管理">5.3 标签管理</h3>
<h3 id="54-博客管理">5.4 博客管理</h3>
<p><strong>1、博客分页查询</strong></p>
<p><strong>2、博客新增</strong></p>
<p><strong>3、博客修改</strong></p>
<p><strong>4、博客删除</strong></p>
<h2 id="6前端展示功能实现">6、前端展示功能实现</h2>
<h3 id="61-首页展示">6.1 首页展示</h3>
<p><strong>1、博客列表</strong></p>
<p><strong>2、top分类</strong></p>
<p><strong>3、top标签</strong></p>
<p><strong>4、最新博客推荐</strong></p>
<p><strong>5、博客详情</strong></p>
<p><strong>1、Markdown 转换 HTML</strong></p>
<ul>
<li><a href="https://github.com/atlassian/commonmark-java" target="_blank">commonmark-java  https://github.com/atlassian/commonmark-java</a></li>
<li>pom.xml引用commonmark和扩展插件</li>
</ul>
<pre><code class="language-xml">&lt;dependency&gt;
   &lt;groupId&gt;com.atlassian.commonmark&lt;/groupId&gt;
   &lt;artifactId&gt;commonmark&lt;/artifactId&gt;
   &lt;version&gt;0.10.0&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
   &lt;groupId&gt;com.atlassian.commonmark&lt;/groupId&gt;
   &lt;artifactId&gt;commonmark-ext-heading-anchor&lt;/artifactId&gt;
   &lt;version&gt;0.10.0&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
   &lt;groupId&gt;com.atlassian.commonmark&lt;/groupId&gt;
   &lt;artifactId&gt;commonmark-ext-gfm-tables&lt;/artifactId&gt;
   &lt;version&gt;0.10.0&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<p><strong>2、评论功能</strong></p>
<ul>
<li>评论信息提交与回复功能</li>
<li>评论信息列表展示功能</li>
<li>管理员回复评论功能</li>
</ul>
<h3 id="62-分类页">6.2 分类页</h3>
<h3 id="63-标签页">6.3 标签页</h3>
<h3 id="64-归档页">6.4 归档页</h3>
<h3 id="65-关于我">6.5 关于我</h3>', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=11, isadmire=0, iscopyright=0, isrecommend=0, iscomment=1, issue=1, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=null, typeId=null, user=User{id=1, petname='程鑫', username='cx201125', password='dbd1a8bc623a690cd163ec0ade366995', mail='2543139363@qq.com', type=0, headportrait='/images/head.jpg', createtime=Wed Aug 26 18:02:27 CST 2020, updatetime=Wed Aug 26 18:02:30 CST 2020, blogs=[]}, type=Type{id=2, name='JAVA', blogs=[]}, tagsId='null', comments=[Comment{id=19, petname='程鑫', mail='2543139363@qq.com', headportrait='null', matter='null', createtime=null, blogId=null, blog=null, topId=null, top=null, bottom=[]}], tags=[Tag{id=1, name='mysql', Tag{id=4, name='spring']}}(String), blog(String)
2020-09-15 17:50:00.312 DEBUG 16504 --- [http-nio-8080-exec-8] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 17:50:04.097  INFO 16504 --- [http-nio-8080-exec-4] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/fragments/newblog', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.newblogs', args=[{}]}
2020-09-15 17:50:04.102 DEBUG 16504 --- [http-nio-8080-exec-4] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,3
2020-09-15 17:50:04.103 DEBUG 16504 --- [http-nio-8080-exec-4] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 17:50:04.109 DEBUG 16504 --- [http-nio-8080-exec-4] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 3
2020-09-15 17:50:04.111  INFO 16504 --- [http-nio-8080-exec-4] com.chenxin.blog.aspect.LogAspect        : Return ------ common/fragments :: newbloglist
2020-09-15 17:50:04.111 DEBUG 16504 --- [http-nio-8080-exec-4] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 17:50:04.112 DEBUG 16504 --- [http-nio-8080-exec-4] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/fragments/newblog(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.newblogs(String), {newblogs=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=12, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=12, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), common/fragments :: newbloglist(String)
2020-09-15 17:50:04.203 DEBUG 16504 --- [http-nio-8080-exec-4] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 17:51:19.267  INFO 16504 --- [http-nio-8080-exec-6] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/blog/19', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.BlogController.BlogPage', args=[19, {}]}
2020-09-15 17:51:19.276 DEBUG 16504 --- [http-nio-8080-exec-6] c.c.blog.mapper.BlogMapper.findBlogById  : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag, b.description,b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id, t.id t_id,t.name t_name,y.id y_id,y.name y_name,u.id u_id,u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime from cx_blog b LEFT JOIN cx_blog_tag bt ON b.id = bt.blog_id LEFT JOIN cx_type y ON b.type_id=y.id LEFT JOIN cx_tag t ON bt.tag_id=t.id LEFT JOIN cx_user u on b.user_id = u.id WHERE b.id=?
2020-09-15 17:51:19.276 DEBUG 16504 --- [http-nio-8080-exec-6] c.c.blog.mapper.BlogMapper.findBlogById  : ==> Parameters: 19(Long)
2020-09-15 17:51:19.283 DEBUG 16504 --- [http-nio-8080-exec-6] c.c.blog.mapper.BlogMapper.findBlogById  : <==      Total: 2
2020-09-15 17:51:19.289 DEBUG 16504 --- [http-nio-8080-exec-6] c.c.b.m.B.updateByPrimaryKeySelective    : ==>  Preparing: update cx_blog SET viewcount = ? where id = ?
2020-09-15 17:51:19.290 DEBUG 16504 --- [http-nio-8080-exec-6] c.c.b.m.B.updateByPrimaryKeySelective    : ==> Parameters: 13(Integer), 19(Long)
2020-09-15 17:51:19.343 DEBUG 16504 --- [http-nio-8080-exec-6] c.c.b.m.B.updateByPrimaryKeySelective    : <==    Updates: 1
2020-09-15 17:51:19.344  INFO 16504 --- [http-nio-8080-exec-6] com.chenxin.blog.aspect.LogAspect        : Return ------ blog
2020-09-15 17:51:19.344 DEBUG 16504 --- [http-nio-8080-exec-6] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 17:51:19.344 DEBUG 16504 --- [http-nio-8080-exec-6] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/blog/19(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.BlogController.BlogPage(String), 19,{blog=Blog{id=19, title='mysql数据库的查询拉', content='<h1 id="spring-boot开发小而美的个人博客">Spring Boot开发小而美的个人博客</h1>
<blockquote>
<p>作者：李仁密</p>
</blockquote>
<p><strong>个人博客功能：</strong></p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg" alt="" /></p>
<p><strong>技术组合：</strong></p>
<ul>
<li>后端：Spring Boot + JPA + thymeleaf模板</li>
<li>数据库：MySQL</li>
<li>前端UI：Semantic UI框架</li>
</ul>
<p><strong>工具与环境：</strong></p>
<ul>
<li>IDEA</li>
<li>Maven 3</li>
<li>JDK 8</li>
<li>Axure RP 8</li>
</ul>
<p><strong>课程内容模块：</strong></p>
<ul>
<li>需求分析与功能规划</li>
<li>页面设计与开发</li>
<li>技术框架搭建</li>
<li>后端管理功能实现</li>
<li>前端管理功能实现</li>
</ul>
<p><strong>你能学得什么？</strong></p>
<ul>
<li>基于Spring Boot的完整全栈式的开发套路</li>
<li>Semantic UI框架的使用</li>
<li>一套博客系统的源代码与设计</li>
</ul>
<h2 id="1需求与功能">1、需求与功能</h2>
<h3 id="11-用户故事">1.1 用户故事</h3>
<p>用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。</p>
<blockquote>
<p>用户故事最好是用户团队编写</p>
</blockquote>
<p><strong>用户故事模板</strong>：</p>
<ul>
<li>As a (role of user), I want (some feature) so that (some business value).</li>
<li>作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处</li>
</ul>
<p><strong>关键点</strong>：角色、功能、商业价值</p>
<p><strong>举例</strong>：</p>
<ul>
<li>作为一个招聘网站<strong>注册用户</strong>，我想<strong>查看最近3天发布的招聘信息</strong>，以便于<strong>了解最新的招聘信息</strong>。</li>
<li>作为公司，可以张贴新工作。</li>
</ul>
<p>个人博客系统的用户故事：</p>
<p>角色：<strong>普通访客</strong>，<strong>管理员（我）</strong></p>
<ul>
<li>访客，可以分页查看所有的博客</li>
<li>访客，可以快速查看博客数最多的6个分类</li>
<li>访客，可以查看所有的分类</li>
<li>访客，可以查看某个分类下的博客列表</li>
<li>访客，可以快速查看标记博客最多的10个标签</li>
<li>访客，可以查看所有的标签</li>
<li>访客，可以查看某个标签下的博客列表</li>
<li>访客，可以根据年度时间线查看博客列表</li>
<li>访客，可以快速查看最新的推荐博客</li>
<li>访客，可以用关键字全局搜索博客</li>
<li>访客，可以查看单个博客内容</li>
<li>访客，可以对博客内容进行评论</li>
<li>访客，可以赞赏博客内容</li>
<li>访客，可以微信扫码阅读博客内容</li>
<li>访客，可以在首页扫描公众号二维码关注我</li>
<li>我，可以用户名和密码登录后台管理</li>
<li>我，可以管理博客
<ul>
<li>我，可以发布新博客</li>
<li>我，可以对博客进行分类</li>
<li>我，可以对博客打标签</li>
<li>我，可以修改博客</li>
<li>我，可以删除博客</li>
<li>我，可以根据标题，分类，标签查询博客</li>
</ul>
</li>
<li>我，可以管理博客分类
<ul>
<li>我，可以新增一个分类</li>
<li>我，可以修改一个分类</li>
<li>我，可以删除一个分类</li>
<li>我，可以根据分类名称查询分类</li>
</ul>
</li>
<li>我，可以管理标签
<ul>
<li>我，可以新增一个标签</li>
<li>我，可以修改一个标签</li>
<li>我，可以删除一个标签</li>
<li>我，可以根据名称查询标签</li>
</ul>
</li>
</ul>
<h3 id="12-功能规划">1.2 功能规划</h3>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg" alt="" /></p>
<h2 id="2页面设计与开发">2、页面设计与开发</h2>
<h3 id="21-设计">2.1 设计</h3>
<p><strong>页面规划：</strong></p>
<p>前端展示：首页、详情页、分类、标签、归档、关于我</p>
<p>后台管理：模板页</p>
<h3 id="22-页面开发">2.2 页面开发</h3>
<p><a href="https://semantic-ui.com/" target="_blank">Semantic UI官网</a></p>
<p><a href="http://www.semantic-ui.cn/" target="_blank">Semantic UI中文官网</a></p>
<p><a href="https://imcoding.me/blogs/5" target="_blank">WebStorm下载与破解</a></p>
<p><a href="https://www.toptal.com/designers/subtlepatterns/" target="_blank">背景图片资源</a></p>
<h3 id="23-插件集成">2.3 插件集成</h3>
<p><a href="https://pandao.github.io/editor.md/" target="_blank">编辑器 Markdown</a></p>
<p><a href="https://github.com/sofish/typo.css" target="_blank">内容排版 typo.css</a></p>
<p><a href="https://daneden.github.io/animate.css/" target="_blank">动画 animate.css</a></p>
<p><a href="https://github.com/PrismJS/prism" target="_blank">代码高亮 prism</a></p>
<p><a href="https://tscanlin.github.io/tocbot/" target="_blank">目录生成 Tocbot</a></p>
<p><a href="http://imakewebthings.com/waypoints/" target="_blank">滚动侦测 waypoints</a></p>
<p><a href="https://github.com/flesler/jquery.scrollTo" target="_blank">平滑滚动 jquery.scrollTo</a></p>
<p><a href="https://davidshimjs.github.io/qrcodejs/" target="_blank">二维码生成 qrcode.js</a></p>
<h2 id="3框架搭建">3、框架搭建</h2>
<blockquote>
<p><a href="https://www.jetbrains.com/idea/" target="_blank">IDEA下载 https://www.jetbrains.com/idea/</a></p>
</blockquote>
<h3 id="31-构建与配置">3.1 构建与配置</h3>
<p><strong>1、引入Spring Boot模块：</strong></p>
<ul>
<li>web</li>
<li>Thymeleaf</li>
<li>JPA</li>
<li>MySQL</li>
<li>Aspects</li>
<li>DevTools</li>
</ul>
<p><strong>2、application.yml配置</strong></p>
<ul>
<li>
<p>使用 thymeleaf 3</p>
<p>pom.xml:</p>
</li>
</ul>
<pre><code class="language-xml">&lt;thymeleaf.version&gt;3.0.2.RELEASE&lt;/thymeleaf.version&gt;
&lt;thymeleaf-layout-dialect.version&gt;2.1.1&lt;/thymeleaf-layout-dialect.version&gt;
</code></pre>
<pre><code>application.yml:
</code></pre>
<pre><code class="language-yaml">spring:
  thymeleaf:
    mode: HTML
</code></pre>
<ul>
<li>数据库连接配置</li>
</ul>
<pre><code class="language-yaml">spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&amp;characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
</code></pre>
<ul>
<li>
<p>日志配置</p>
<p>application.yml:</p>
</li>
</ul>
<pre><code class="language-yaml">logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
</code></pre>
<p>​	logback-spring.xml：</p>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;configuration&gt;
    &lt;!--包含Spring boot对logback日志的默认配置--&gt;
    &lt;include resource=&quot;org/springframework/boot/logging/logback/defaults.xml&quot; /&gt;
    &lt;property name=&quot;LOG_FILE&quot; value=&quot;${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}&quot;/&gt;
    &lt;include resource=&quot;org/springframework/boot/logging/logback/console-appender.xml&quot; /&gt;

    &lt;!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置--&gt;
    &lt;appender name=&quot;TIME_FILE&quot;
              class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;
        &lt;encoder&gt;
            &lt;pattern&gt;${FILE_LOG_PATTERN}&lt;/pattern&gt;
        &lt;/encoder&gt;
        &lt;file&gt;${LOG_FILE}&lt;/file&gt;
        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;
            &lt;fileNamePattern&gt;${LOG_FILE}.%d{yyyy-MM-dd}.%i&lt;/fileNamePattern&gt;
            &lt;!--保留历史日志一个月的时间--&gt;
            &lt;maxHistory&gt;30&lt;/maxHistory&gt;
            &lt;!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            --&gt;
            &lt;timeBasedFileNamingAndTriggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;
                &lt;maxFileSize&gt;10MB&lt;/maxFileSize&gt;
            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;

        &lt;/rollingPolicy&gt;
    &lt;/appender&gt;

    &lt;root level=&quot;INFO&quot;&gt;
        &lt;appender-ref ref=&quot;CONSOLE&quot; /&gt;
        &lt;appender-ref ref=&quot;TIME_FILE&quot; /&gt;
    &lt;/root&gt;

&lt;/configuration&gt;
&lt;!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
--&gt;
</code></pre>
<ul>
<li>生产环境与开发环境配置
<ul>
<li>application-dev.yml</li>
<li>application-pro.yml</li>
</ul>
</li>
</ul>
<h3 id="32-异常处理">3.2 异常处理</h3>
<p><strong>1、定义错误页面</strong></p>
<ul>
<li>404</li>
<li>500</li>
<li>error</li>
</ul>
<p><strong>2、全局处理异常</strong></p>
<p>统一处理异常：</p>
<pre><code class="language-java">@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error(&quot;Request URL : {} , Exception : {}&quot;, request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject(&quot;url&quot;, request.getRequestURL());
        mav.addObject(&quot;exception&quot;, e);
        mav.setViewName(&quot;error/error&quot;);

        return mav;
    }
}
</code></pre>
<p>错误页面异常信息显示处理：</p>
<pre><code class="language-html">&lt;div&gt;
    &lt;div th:utext=&quot;'&amp;lt;!--'&quot; th:remove=&quot;tag&quot;&gt;&lt;/div&gt;
    &lt;div th:utext=&quot;'Failed Request URL : ' + ${url}&quot; th:remove=&quot;tag&quot;&gt;&lt;/div&gt;
    &lt;div th:utext=&quot;'Exception message : ' + ${exception.message}&quot; th:remove=&quot;tag&quot;&gt;&lt;/div&gt;
    &lt;ul th:remove=&quot;tag&quot;&gt;
        &lt;li th:each=&quot;st : ${exception.stackTrace}&quot; th:remove=&quot;tag&quot;&gt;&lt;span th:utext=&quot;${st}&quot; th:remove=&quot;tag&quot;&gt;&lt;/span&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;div th:utext=&quot;'--&amp;gt;'&quot; th:remove=&quot;tag&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<p><strong>3、资源找不到异常</strong></p>
<pre><code class="language-java">@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
</code></pre>
<h3 id="33-日志处理">3.3 日志处理</h3>
<p><strong>1、记录日志内容</strong></p>
<ul>
<li>请求 url</li>
<li>访问者 ip</li>
<li>调用方法 classMethod</li>
<li>参数 args</li>
<li>返回内容</li>
</ul>
<p><strong>2、记录日志类：</strong></p>
<pre><code class="language-java">@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut(&quot;execution(* com.imcoding.web.*.*(..))&quot;)
    public void log() {
    }

    @Before(&quot;log()&quot;)
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + &quot;.&quot; + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info(&quot;Rquest  ----- {}&quot;,reqeustLog);
    }

    @After(&quot;log()&quot;)
    public void doAfter() {
        //logger.info(&quot;---------- doAfter 2 ----------&quot;);
    }

    @AfterReturning(returning = &quot;result&quot;,pointcut = &quot;log()&quot;)
    public void doAtfertRturning(Object result) {
        logger.info(&quot;Return ------ {}&quot;,result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return &quot;ReqeustLog{&quot; +
                    &quot;url='&quot; + url + '\'' +
                    &quot;, ip='&quot; + ip + '\'' +
                    &quot;, classMethod='&quot; + classMethod + '\'' +
                    &quot;, args=&quot; + Arrays.toString(args) +
                    '}';
        }
    }

}
</code></pre>
<h3 id="34-页面处理">3.4 页面处理</h3>
<p><strong>1、静态页面导入project</strong></p>
<p><strong>2、thymeleaf布局</strong></p>
<ul>
<li>定义fragment</li>
<li>使用fragment布局</li>
</ul>
<p><strong>3、错误页面美化</strong></p>
<p>4、设计与规范</p>
<h3 id="41-实体设计">4.1 实体设计</h3>
<p><strong>实体类：</strong></p>
<ul>
<li>博客 Blog</li>
<li>博客分类 Type</li>
<li>博客标签 Tag</li>
<li>博客评论 Comment</li>
<li>用户 User</li>
</ul>
<p><strong>实体关系：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg" alt="" /></p>
<p><strong>评论类自关联关系：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg" alt="" /></p>
<p><strong>Blog类：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg" alt="" /></p>
<p><strong>Type类：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg" alt="" /></p>
<p><strong>Tag类：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg" alt="" /></p>
<p><strong>Comment类：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg" alt="" /></p>
<p><strong>User类：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg" alt="" /></p>
<h3 id="42-应用分层">4.2 应用分层</h3>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg" alt="" /></p>
<h3 id="43-命名约定">4.3 命名约定</h3>
<p><strong>Service/DAO层命名约定：</strong></p>
<ul>
<li>获取单个对象的方法用get做前缀。</li>
<li>获取多个对象的方法用list做前缀。</li>
<li>获取统计值的方法用count做前缀。</li>
<li>插入的方法用save(推荐)或insert做前缀。</li>
<li>删除的方法用remove(推荐)或delete做前缀。</li>
<li>修改的方法用update做前缀。</li>
</ul>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg" alt="" /></p>
<h2 id="5后台管理功能实现">5、后台管理功能实现</h2>
<h3 id="51-登录">5.1 登录</h3>
<p><strong>1、构建登录页面和后台管理首页</strong></p>
<p><strong>2、UserService和UserRepository</strong></p>
<p><strong>3、LoginController实现登录</strong></p>
<p><strong>4、MD5加密</strong></p>
<p><strong>5、登录拦截器</strong></p>
<h3 id="52-分类管理">5.2 分类管理</h3>
<p><strong>1、分类管理页面</strong></p>
<p><strong>2、分类列表分页</strong></p>
<pre><code class="language-javascript">{
  &quot;content&quot;:[
    {&quot;id&quot;:123,&quot;title&quot;:&quot;blog122&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:122,&quot;title&quot;:&quot;blog121&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:121,&quot;title&quot;:&quot;blog120&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:120,&quot;title&quot;:&quot;blog119&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:119,&quot;title&quot;:&quot;blog118&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:118,&quot;title&quot;:&quot;blog117&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:117,&quot;title&quot;:&quot;blog116&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:116,&quot;title&quot;:&quot;blog115&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:115,&quot;title&quot;:&quot;blog114&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:114,&quot;title&quot;:&quot;blog113&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:113,&quot;title&quot;:&quot;blog112&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:112,&quot;title&quot;:&quot;blog111&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:111,&quot;title&quot;:&quot;blog110&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:110,&quot;title&quot;:&quot;blog109&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:109,&quot;title&quot;:&quot;blog108&quot;,&quot;content&quot;:&quot;this is blog content&quot;}],
  &quot;last&quot;:false,
  &quot;totalPages&quot;:9,
  &quot;totalElements&quot;:123,
  &quot;size&quot;:15,
  &quot;number&quot;:0,
  &quot;first&quot;:true,
  &quot;sort&quot;:[{
    &quot;direction&quot;:&quot;DESC&quot;,
    &quot;property&quot;:&quot;id&quot;,
    &quot;ignoreCase&quot;:false,
    &quot;nullHandling&quot;:&quot;NATIVE&quot;,
    &quot;ascending&quot;:false
  }],
  &quot;numberOfElements&quot;:15
}
</code></pre>
<p><strong>3、分类新增、修改、删除</strong></p>
<h3 id="53-标签管理">5.3 标签管理</h3>
<h3 id="54-博客管理">5.4 博客管理</h3>
<p><strong>1、博客分页查询</strong></p>
<p><strong>2、博客新增</strong></p>
<p><strong>3、博客修改</strong></p>
<p><strong>4、博客删除</strong></p>
<h2 id="6前端展示功能实现">6、前端展示功能实现</h2>
<h3 id="61-首页展示">6.1 首页展示</h3>
<p><strong>1、博客列表</strong></p>
<p><strong>2、top分类</strong></p>
<p><strong>3、top标签</strong></p>
<p><strong>4、最新博客推荐</strong></p>
<p><strong>5、博客详情</strong></p>
<p><strong>1、Markdown 转换 HTML</strong></p>
<ul>
<li><a href="https://github.com/atlassian/commonmark-java" target="_blank">commonmark-java  https://github.com/atlassian/commonmark-java</a></li>
<li>pom.xml引用commonmark和扩展插件</li>
</ul>
<pre><code class="language-xml">&lt;dependency&gt;
   &lt;groupId&gt;com.atlassian.commonmark&lt;/groupId&gt;
   &lt;artifactId&gt;commonmark&lt;/artifactId&gt;
   &lt;version&gt;0.10.0&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
   &lt;groupId&gt;com.atlassian.commonmark&lt;/groupId&gt;
   &lt;artifactId&gt;commonmark-ext-heading-anchor&lt;/artifactId&gt;
   &lt;version&gt;0.10.0&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
   &lt;groupId&gt;com.atlassian.commonmark&lt;/groupId&gt;
   &lt;artifactId&gt;commonmark-ext-gfm-tables&lt;/artifactId&gt;
   &lt;version&gt;0.10.0&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<p><strong>2、评论功能</strong></p>
<ul>
<li>评论信息提交与回复功能</li>
<li>评论信息列表展示功能</li>
<li>管理员回复评论功能</li>
</ul>
<h3 id="62-分类页">6.2 分类页</h3>
<h3 id="63-标签页">6.3 标签页</h3>
<h3 id="64-归档页">6.4 归档页</h3>
<h3 id="65-关于我">6.5 关于我</h3>', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=12, isadmire=0, iscopyright=0, isrecommend=0, iscomment=1, issue=1, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=null, typeId=null, user=User{id=1, petname='程鑫', username='cx201125', password='dbd1a8bc623a690cd163ec0ade366995', mail='2543139363@qq.com', type=0, headportrait='/images/head.jpg', createtime=Wed Aug 26 18:02:27 CST 2020, updatetime=Wed Aug 26 18:02:30 CST 2020, blogs=[]}, type=Type{id=2, name='JAVA', blogs=[]}, tagsId='null', comments=[Comment{id=19, petname='程鑫', mail='2543139363@qq.com', headportrait='null', matter='null', createtime=null, blogId=null, blog=null, topId=null, top=null, bottom=[]}], tags=[Tag{id=1, name='mysql', Tag{id=4, name='spring']}}(String), blog(String)
2020-09-15 17:51:19.402 DEBUG 16504 --- [http-nio-8080-exec-6] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 17:51:19.852  INFO 16504 --- [http-nio-8080-exec-9] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/fragments/newblog', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.newblogs', args=[{}]}
2020-09-15 17:51:19.853 DEBUG 16504 --- [http-nio-8080-exec-9] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,3
2020-09-15 17:51:19.853 DEBUG 16504 --- [http-nio-8080-exec-9] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 17:51:19.859 DEBUG 16504 --- [http-nio-8080-exec-9] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 3
2020-09-15 17:51:19.859  INFO 16504 --- [http-nio-8080-exec-9] com.chenxin.blog.aspect.LogAspect        : Return ------ common/fragments :: newbloglist
2020-09-15 17:51:19.860 DEBUG 16504 --- [http-nio-8080-exec-9] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 17:51:19.861 DEBUG 16504 --- [http-nio-8080-exec-9] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/fragments/newblog(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.newblogs(String), {newblogs=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=13, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=12, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), common/fragments :: newbloglist(String)
2020-09-15 17:51:20.019 DEBUG 16504 --- [http-nio-8080-exec-9] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 17:54:43.391  INFO 16504 --- [http-nio-8080-exec-4] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/blog/19', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.BlogController.BlogPage', args=[19, {}]}
2020-09-15 17:54:43.396 DEBUG 16504 --- [http-nio-8080-exec-4] c.c.blog.mapper.BlogMapper.findBlogById  : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag, b.description,b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id, t.id t_id,t.name t_name,y.id y_id,y.name y_name,u.id u_id,u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime from cx_blog b LEFT JOIN cx_blog_tag bt ON b.id = bt.blog_id LEFT JOIN cx_type y ON b.type_id=y.id LEFT JOIN cx_tag t ON bt.tag_id=t.id LEFT JOIN cx_user u on b.user_id = u.id WHERE b.id=?
2020-09-15 17:54:43.396 DEBUG 16504 --- [http-nio-8080-exec-4] c.c.blog.mapper.BlogMapper.findBlogById  : ==> Parameters: 19(Long)
2020-09-15 17:54:43.402 DEBUG 16504 --- [http-nio-8080-exec-4] c.c.blog.mapper.BlogMapper.findBlogById  : <==      Total: 2
2020-09-15 17:54:43.406 DEBUG 16504 --- [http-nio-8080-exec-4] c.c.b.m.B.updateByPrimaryKeySelective    : ==>  Preparing: update cx_blog SET viewcount = ? where id = ?
2020-09-15 17:54:43.406 DEBUG 16504 --- [http-nio-8080-exec-4] c.c.b.m.B.updateByPrimaryKeySelective    : ==> Parameters: 14(Integer), 19(Long)
2020-09-15 17:54:43.726 DEBUG 16504 --- [http-nio-8080-exec-4] c.c.b.m.B.updateByPrimaryKeySelective    : <==    Updates: 1
2020-09-15 17:54:43.726  INFO 16504 --- [http-nio-8080-exec-4] com.chenxin.blog.aspect.LogAspect        : Return ------ blog
2020-09-15 17:54:43.727 DEBUG 16504 --- [http-nio-8080-exec-4] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 17:54:43.727 DEBUG 16504 --- [http-nio-8080-exec-4] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/blog/19(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.BlogController.BlogPage(String), 19,{blog=Blog{id=19, title='mysql数据库的查询拉', content='<h1 id="spring-boot开发小而美的个人博客">Spring Boot开发小而美的个人博客</h1>
<blockquote>
<p>作者：李仁密</p>
</blockquote>
<p><strong>个人博客功能：</strong></p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg" alt="" /></p>
<p><strong>技术组合：</strong></p>
<ul>
<li>后端：Spring Boot + JPA + thymeleaf模板</li>
<li>数据库：MySQL</li>
<li>前端UI：Semantic UI框架</li>
</ul>
<p><strong>工具与环境：</strong></p>
<ul>
<li>IDEA</li>
<li>Maven 3</li>
<li>JDK 8</li>
<li>Axure RP 8</li>
</ul>
<p><strong>课程内容模块：</strong></p>
<ul>
<li>需求分析与功能规划</li>
<li>页面设计与开发</li>
<li>技术框架搭建</li>
<li>后端管理功能实现</li>
<li>前端管理功能实现</li>
</ul>
<p><strong>你能学得什么？</strong></p>
<ul>
<li>基于Spring Boot的完整全栈式的开发套路</li>
<li>Semantic UI框架的使用</li>
<li>一套博客系统的源代码与设计</li>
</ul>
<h2 id="1需求与功能">1、需求与功能</h2>
<h3 id="11-用户故事">1.1 用户故事</h3>
<p>用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。</p>
<blockquote>
<p>用户故事最好是用户团队编写</p>
</blockquote>
<p><strong>用户故事模板</strong>：</p>
<ul>
<li>As a (role of user), I want (some feature) so that (some business value).</li>
<li>作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处</li>
</ul>
<p><strong>关键点</strong>：角色、功能、商业价值</p>
<p><strong>举例</strong>：</p>
<ul>
<li>作为一个招聘网站<strong>注册用户</strong>，我想<strong>查看最近3天发布的招聘信息</strong>，以便于<strong>了解最新的招聘信息</strong>。</li>
<li>作为公司，可以张贴新工作。</li>
</ul>
<p>个人博客系统的用户故事：</p>
<p>角色：<strong>普通访客</strong>，<strong>管理员（我）</strong></p>
<ul>
<li>访客，可以分页查看所有的博客</li>
<li>访客，可以快速查看博客数最多的6个分类</li>
<li>访客，可以查看所有的分类</li>
<li>访客，可以查看某个分类下的博客列表</li>
<li>访客，可以快速查看标记博客最多的10个标签</li>
<li>访客，可以查看所有的标签</li>
<li>访客，可以查看某个标签下的博客列表</li>
<li>访客，可以根据年度时间线查看博客列表</li>
<li>访客，可以快速查看最新的推荐博客</li>
<li>访客，可以用关键字全局搜索博客</li>
<li>访客，可以查看单个博客内容</li>
<li>访客，可以对博客内容进行评论</li>
<li>访客，可以赞赏博客内容</li>
<li>访客，可以微信扫码阅读博客内容</li>
<li>访客，可以在首页扫描公众号二维码关注我</li>
<li>我，可以用户名和密码登录后台管理</li>
<li>我，可以管理博客
<ul>
<li>我，可以发布新博客</li>
<li>我，可以对博客进行分类</li>
<li>我，可以对博客打标签</li>
<li>我，可以修改博客</li>
<li>我，可以删除博客</li>
<li>我，可以根据标题，分类，标签查询博客</li>
</ul>
</li>
<li>我，可以管理博客分类
<ul>
<li>我，可以新增一个分类</li>
<li>我，可以修改一个分类</li>
<li>我，可以删除一个分类</li>
<li>我，可以根据分类名称查询分类</li>
</ul>
</li>
<li>我，可以管理标签
<ul>
<li>我，可以新增一个标签</li>
<li>我，可以修改一个标签</li>
<li>我，可以删除一个标签</li>
<li>我，可以根据名称查询标签</li>
</ul>
</li>
</ul>
<h3 id="12-功能规划">1.2 功能规划</h3>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg" alt="" /></p>
<h2 id="2页面设计与开发">2、页面设计与开发</h2>
<h3 id="21-设计">2.1 设计</h3>
<p><strong>页面规划：</strong></p>
<p>前端展示：首页、详情页、分类、标签、归档、关于我</p>
<p>后台管理：模板页</p>
<h3 id="22-页面开发">2.2 页面开发</h3>
<p><a href="https://semantic-ui.com/" target="_blank">Semantic UI官网</a></p>
<p><a href="http://www.semantic-ui.cn/" target="_blank">Semantic UI中文官网</a></p>
<p><a href="https://imcoding.me/blogs/5" target="_blank">WebStorm下载与破解</a></p>
<p><a href="https://www.toptal.com/designers/subtlepatterns/" target="_blank">背景图片资源</a></p>
<h3 id="23-插件集成">2.3 插件集成</h3>
<p><a href="https://pandao.github.io/editor.md/" target="_blank">编辑器 Markdown</a></p>
<p><a href="https://github.com/sofish/typo.css" target="_blank">内容排版 typo.css</a></p>
<p><a href="https://daneden.github.io/animate.css/" target="_blank">动画 animate.css</a></p>
<p><a href="https://github.com/PrismJS/prism" target="_blank">代码高亮 prism</a></p>
<p><a href="https://tscanlin.github.io/tocbot/" target="_blank">目录生成 Tocbot</a></p>
<p><a href="http://imakewebthings.com/waypoints/" target="_blank">滚动侦测 waypoints</a></p>
<p><a href="https://github.com/flesler/jquery.scrollTo" target="_blank">平滑滚动 jquery.scrollTo</a></p>
<p><a href="https://davidshimjs.github.io/qrcodejs/" target="_blank">二维码生成 qrcode.js</a></p>
<h2 id="3框架搭建">3、框架搭建</h2>
<blockquote>
<p><a href="https://www.jetbrains.com/idea/" target="_blank">IDEA下载 https://www.jetbrains.com/idea/</a></p>
</blockquote>
<h3 id="31-构建与配置">3.1 构建与配置</h3>
<p><strong>1、引入Spring Boot模块：</strong></p>
<ul>
<li>web</li>
<li>Thymeleaf</li>
<li>JPA</li>
<li>MySQL</li>
<li>Aspects</li>
<li>DevTools</li>
</ul>
<p><strong>2、application.yml配置</strong></p>
<ul>
<li>
<p>使用 thymeleaf 3</p>
<p>pom.xml:</p>
</li>
</ul>
<pre><code class="language-xml">&lt;thymeleaf.version&gt;3.0.2.RELEASE&lt;/thymeleaf.version&gt;
&lt;thymeleaf-layout-dialect.version&gt;2.1.1&lt;/thymeleaf-layout-dialect.version&gt;
</code></pre>
<pre><code>application.yml:
</code></pre>
<pre><code class="language-yaml">spring:
  thymeleaf:
    mode: HTML
</code></pre>
<ul>
<li>数据库连接配置</li>
</ul>
<pre><code class="language-yaml">spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&amp;characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
</code></pre>
<ul>
<li>
<p>日志配置</p>
<p>application.yml:</p>
</li>
</ul>
<pre><code class="language-yaml">logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
</code></pre>
<p>​	logback-spring.xml：</p>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;configuration&gt;
    &lt;!--包含Spring boot对logback日志的默认配置--&gt;
    &lt;include resource=&quot;org/springframework/boot/logging/logback/defaults.xml&quot; /&gt;
    &lt;property name=&quot;LOG_FILE&quot; value=&quot;${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}&quot;/&gt;
    &lt;include resource=&quot;org/springframework/boot/logging/logback/console-appender.xml&quot; /&gt;

    &lt;!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置--&gt;
    &lt;appender name=&quot;TIME_FILE&quot;
              class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;
        &lt;encoder&gt;
            &lt;pattern&gt;${FILE_LOG_PATTERN}&lt;/pattern&gt;
        &lt;/encoder&gt;
        &lt;file&gt;${LOG_FILE}&lt;/file&gt;
        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;
            &lt;fileNamePattern&gt;${LOG_FILE}.%d{yyyy-MM-dd}.%i&lt;/fileNamePattern&gt;
            &lt;!--保留历史日志一个月的时间--&gt;
            &lt;maxHistory&gt;30&lt;/maxHistory&gt;
            &lt;!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            --&gt;
            &lt;timeBasedFileNamingAndTriggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;
                &lt;maxFileSize&gt;10MB&lt;/maxFileSize&gt;
            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;

        &lt;/rollingPolicy&gt;
    &lt;/appender&gt;

    &lt;root level=&quot;INFO&quot;&gt;
        &lt;appender-ref ref=&quot;CONSOLE&quot; /&gt;
        &lt;appender-ref ref=&quot;TIME_FILE&quot; /&gt;
    &lt;/root&gt;

&lt;/configuration&gt;
&lt;!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
--&gt;
</code></pre>
<ul>
<li>生产环境与开发环境配置
<ul>
<li>application-dev.yml</li>
<li>application-pro.yml</li>
</ul>
</li>
</ul>
<h3 id="32-异常处理">3.2 异常处理</h3>
<p><strong>1、定义错误页面</strong></p>
<ul>
<li>404</li>
<li>500</li>
<li>error</li>
</ul>
<p><strong>2、全局处理异常</strong></p>
<p>统一处理异常：</p>
<pre><code class="language-java">@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error(&quot;Request URL : {} , Exception : {}&quot;, request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject(&quot;url&quot;, request.getRequestURL());
        mav.addObject(&quot;exception&quot;, e);
        mav.setViewName(&quot;error/error&quot;);

        return mav;
    }
}
</code></pre>
<p>错误页面异常信息显示处理：</p>
<pre><code class="language-html">&lt;div&gt;
    &lt;div th:utext=&quot;'&amp;lt;!--'&quot; th:remove=&quot;tag&quot;&gt;&lt;/div&gt;
    &lt;div th:utext=&quot;'Failed Request URL : ' + ${url}&quot; th:remove=&quot;tag&quot;&gt;&lt;/div&gt;
    &lt;div th:utext=&quot;'Exception message : ' + ${exception.message}&quot; th:remove=&quot;tag&quot;&gt;&lt;/div&gt;
    &lt;ul th:remove=&quot;tag&quot;&gt;
        &lt;li th:each=&quot;st : ${exception.stackTrace}&quot; th:remove=&quot;tag&quot;&gt;&lt;span th:utext=&quot;${st}&quot; th:remove=&quot;tag&quot;&gt;&lt;/span&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;div th:utext=&quot;'--&amp;gt;'&quot; th:remove=&quot;tag&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<p><strong>3、资源找不到异常</strong></p>
<pre><code class="language-java">@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
</code></pre>
<h3 id="33-日志处理">3.3 日志处理</h3>
<p><strong>1、记录日志内容</strong></p>
<ul>
<li>请求 url</li>
<li>访问者 ip</li>
<li>调用方法 classMethod</li>
<li>参数 args</li>
<li>返回内容</li>
</ul>
<p><strong>2、记录日志类：</strong></p>
<pre><code class="language-java">@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut(&quot;execution(* com.imcoding.web.*.*(..))&quot;)
    public void log() {
    }

    @Before(&quot;log()&quot;)
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + &quot;.&quot; + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info(&quot;Rquest  ----- {}&quot;,reqeustLog);
    }

    @After(&quot;log()&quot;)
    public void doAfter() {
        //logger.info(&quot;---------- doAfter 2 ----------&quot;);
    }

    @AfterReturning(returning = &quot;result&quot;,pointcut = &quot;log()&quot;)
    public void doAtfertRturning(Object result) {
        logger.info(&quot;Return ------ {}&quot;,result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return &quot;ReqeustLog{&quot; +
                    &quot;url='&quot; + url + '\'' +
                    &quot;, ip='&quot; + ip + '\'' +
                    &quot;, classMethod='&quot; + classMethod + '\'' +
                    &quot;, args=&quot; + Arrays.toString(args) +
                    '}';
        }
    }

}
</code></pre>
<h3 id="34-页面处理">3.4 页面处理</h3>
<p><strong>1、静态页面导入project</strong></p>
<p><strong>2、thymeleaf布局</strong></p>
<ul>
<li>定义fragment</li>
<li>使用fragment布局</li>
</ul>
<p><strong>3、错误页面美化</strong></p>
<p>4、设计与规范</p>
<h3 id="41-实体设计">4.1 实体设计</h3>
<p><strong>实体类：</strong></p>
<ul>
<li>博客 Blog</li>
<li>博客分类 Type</li>
<li>博客标签 Tag</li>
<li>博客评论 Comment</li>
<li>用户 User</li>
</ul>
<p><strong>实体关系：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg" alt="" /></p>
<p><strong>评论类自关联关系：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg" alt="" /></p>
<p><strong>Blog类：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg" alt="" /></p>
<p><strong>Type类：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg" alt="" /></p>
<p><strong>Tag类：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg" alt="" /></p>
<p><strong>Comment类：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg" alt="" /></p>
<p><strong>User类：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg" alt="" /></p>
<h3 id="42-应用分层">4.2 应用分层</h3>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg" alt="" /></p>
<h3 id="43-命名约定">4.3 命名约定</h3>
<p><strong>Service/DAO层命名约定：</strong></p>
<ul>
<li>获取单个对象的方法用get做前缀。</li>
<li>获取多个对象的方法用list做前缀。</li>
<li>获取统计值的方法用count做前缀。</li>
<li>插入的方法用save(推荐)或insert做前缀。</li>
<li>删除的方法用remove(推荐)或delete做前缀。</li>
<li>修改的方法用update做前缀。</li>
</ul>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg" alt="" /></p>
<h2 id="5后台管理功能实现">5、后台管理功能实现</h2>
<h3 id="51-登录">5.1 登录</h3>
<p><strong>1、构建登录页面和后台管理首页</strong></p>
<p><strong>2、UserService和UserRepository</strong></p>
<p><strong>3、LoginController实现登录</strong></p>
<p><strong>4、MD5加密</strong></p>
<p><strong>5、登录拦截器</strong></p>
<h3 id="52-分类管理">5.2 分类管理</h3>
<p><strong>1、分类管理页面</strong></p>
<p><strong>2、分类列表分页</strong></p>
<pre><code class="language-javascript">{
  &quot;content&quot;:[
    {&quot;id&quot;:123,&quot;title&quot;:&quot;blog122&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:122,&quot;title&quot;:&quot;blog121&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:121,&quot;title&quot;:&quot;blog120&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:120,&quot;title&quot;:&quot;blog119&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:119,&quot;title&quot;:&quot;blog118&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:118,&quot;title&quot;:&quot;blog117&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:117,&quot;title&quot;:&quot;blog116&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:116,&quot;title&quot;:&quot;blog115&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:115,&quot;title&quot;:&quot;blog114&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:114,&quot;title&quot;:&quot;blog113&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:113,&quot;title&quot;:&quot;blog112&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:112,&quot;title&quot;:&quot;blog111&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:111,&quot;title&quot;:&quot;blog110&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:110,&quot;title&quot;:&quot;blog109&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:109,&quot;title&quot;:&quot;blog108&quot;,&quot;content&quot;:&quot;this is blog content&quot;}],
  &quot;last&quot;:false,
  &quot;totalPages&quot;:9,
  &quot;totalElements&quot;:123,
  &quot;size&quot;:15,
  &quot;number&quot;:0,
  &quot;first&quot;:true,
  &quot;sort&quot;:[{
    &quot;direction&quot;:&quot;DESC&quot;,
    &quot;property&quot;:&quot;id&quot;,
    &quot;ignoreCase&quot;:false,
    &quot;nullHandling&quot;:&quot;NATIVE&quot;,
    &quot;ascending&quot;:false
  }],
  &quot;numberOfElements&quot;:15
}
</code></pre>
<p><strong>3、分类新增、修改、删除</strong></p>
<h3 id="53-标签管理">5.3 标签管理</h3>
<h3 id="54-博客管理">5.4 博客管理</h3>
<p><strong>1、博客分页查询</strong></p>
<p><strong>2、博客新增</strong></p>
<p><strong>3、博客修改</strong></p>
<p><strong>4、博客删除</strong></p>
<h2 id="6前端展示功能实现">6、前端展示功能实现</h2>
<h3 id="61-首页展示">6.1 首页展示</h3>
<p><strong>1、博客列表</strong></p>
<p><strong>2、top分类</strong></p>
<p><strong>3、top标签</strong></p>
<p><strong>4、最新博客推荐</strong></p>
<p><strong>5、博客详情</strong></p>
<p><strong>1、Markdown 转换 HTML</strong></p>
<ul>
<li><a href="https://github.com/atlassian/commonmark-java" target="_blank">commonmark-java  https://github.com/atlassian/commonmark-java</a></li>
<li>pom.xml引用commonmark和扩展插件</li>
</ul>
<pre><code class="language-xml">&lt;dependency&gt;
   &lt;groupId&gt;com.atlassian.commonmark&lt;/groupId&gt;
   &lt;artifactId&gt;commonmark&lt;/artifactId&gt;
   &lt;version&gt;0.10.0&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
   &lt;groupId&gt;com.atlassian.commonmark&lt;/groupId&gt;
   &lt;artifactId&gt;commonmark-ext-heading-anchor&lt;/artifactId&gt;
   &lt;version&gt;0.10.0&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
   &lt;groupId&gt;com.atlassian.commonmark&lt;/groupId&gt;
   &lt;artifactId&gt;commonmark-ext-gfm-tables&lt;/artifactId&gt;
   &lt;version&gt;0.10.0&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<p><strong>2、评论功能</strong></p>
<ul>
<li>评论信息提交与回复功能</li>
<li>评论信息列表展示功能</li>
<li>管理员回复评论功能</li>
</ul>
<h3 id="62-分类页">6.2 分类页</h3>
<h3 id="63-标签页">6.3 标签页</h3>
<h3 id="64-归档页">6.4 归档页</h3>
<h3 id="65-关于我">6.5 关于我</h3>', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=13, isadmire=0, iscopyright=0, isrecommend=0, iscomment=1, issue=1, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=null, typeId=null, user=User{id=1, petname='程鑫', username='cx201125', password='dbd1a8bc623a690cd163ec0ade366995', mail='2543139363@qq.com', type=0, headportrait='/images/head.jpg', createtime=Wed Aug 26 18:02:27 CST 2020, updatetime=Wed Aug 26 18:02:30 CST 2020, blogs=[]}, type=Type{id=2, name='JAVA', blogs=[]}, tagsId='null', comments=[Comment{id=19, petname='程鑫', mail='2543139363@qq.com', headportrait='null', matter='null', createtime=null, blogId=null, blog=null, topId=null, top=null, bottom=[]}], tags=[Tag{id=1, name='mysql', Tag{id=4, name='spring']}}(String), blog(String)
2020-09-15 17:54:43.800 DEBUG 16504 --- [http-nio-8080-exec-4] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 17:54:44.335  INFO 16504 --- [http-nio-8080-exec-4] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/fragments/newblog', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.newblogs', args=[{}]}
2020-09-15 17:54:44.336 DEBUG 16504 --- [http-nio-8080-exec-4] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,3
2020-09-15 17:54:44.337 DEBUG 16504 --- [http-nio-8080-exec-4] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 17:54:44.340 DEBUG 16504 --- [http-nio-8080-exec-4] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 3
2020-09-15 17:54:44.341  INFO 16504 --- [http-nio-8080-exec-4] com.chenxin.blog.aspect.LogAspect        : Return ------ common/fragments :: newbloglist
2020-09-15 17:54:44.342 DEBUG 16504 --- [http-nio-8080-exec-4] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 17:54:44.343 DEBUG 16504 --- [http-nio-8080-exec-4] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/fragments/newblog(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.newblogs(String), {newblogs=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=14, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=12, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), common/fragments :: newbloglist(String)
2020-09-15 17:54:44.401 DEBUG 16504 --- [http-nio-8080-exec-4] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 17:58:09.847  INFO 16504 --- [http-nio-8080-exec-9] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/blog/19', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.BlogController.BlogPage', args=[19, {}]}
2020-09-15 17:58:09.851 DEBUG 16504 --- [http-nio-8080-exec-9] c.c.blog.mapper.BlogMapper.findBlogById  : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag, b.description,b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id, t.id t_id,t.name t_name,y.id y_id,y.name y_name,u.id u_id,u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime from cx_blog b LEFT JOIN cx_blog_tag bt ON b.id = bt.blog_id LEFT JOIN cx_type y ON b.type_id=y.id LEFT JOIN cx_tag t ON bt.tag_id=t.id LEFT JOIN cx_user u on b.user_id = u.id WHERE b.id=?
2020-09-15 17:58:09.851 DEBUG 16504 --- [http-nio-8080-exec-9] c.c.blog.mapper.BlogMapper.findBlogById  : ==> Parameters: 19(Long)
2020-09-15 17:58:09.859 DEBUG 16504 --- [http-nio-8080-exec-9] c.c.blog.mapper.BlogMapper.findBlogById  : <==      Total: 2
2020-09-15 17:58:09.867 DEBUG 16504 --- [http-nio-8080-exec-9] c.c.b.m.B.updateByPrimaryKeySelective    : ==>  Preparing: update cx_blog SET viewcount = ? where id = ?
2020-09-15 17:58:09.867 DEBUG 16504 --- [http-nio-8080-exec-9] c.c.b.m.B.updateByPrimaryKeySelective    : ==> Parameters: 15(Integer), 19(Long)
2020-09-15 17:58:09.959 DEBUG 16504 --- [http-nio-8080-exec-9] c.c.b.m.B.updateByPrimaryKeySelective    : <==    Updates: 1
2020-09-15 17:58:09.960  INFO 16504 --- [http-nio-8080-exec-9] com.chenxin.blog.aspect.LogAspect        : Return ------ blog
2020-09-15 17:58:09.964 DEBUG 16504 --- [http-nio-8080-exec-9] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 17:58:09.966 DEBUG 16504 --- [http-nio-8080-exec-9] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/blog/19(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.BlogController.BlogPage(String), 19,{blog=Blog{id=19, title='mysql数据库的查询拉', content='<h1 id="spring-boot开发小而美的个人博客">Spring Boot开发小而美的个人博客</h1>
<blockquote>
<p>作者：李仁密</p>
</blockquote>
<p><strong>个人博客功能：</strong></p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg" alt="" /></p>
<p><strong>技术组合：</strong></p>
<ul>
<li>后端：Spring Boot + JPA + thymeleaf模板</li>
<li>数据库：MySQL</li>
<li>前端UI：Semantic UI框架</li>
</ul>
<p><strong>工具与环境：</strong></p>
<ul>
<li>IDEA</li>
<li>Maven 3</li>
<li>JDK 8</li>
<li>Axure RP 8</li>
</ul>
<p><strong>课程内容模块：</strong></p>
<ul>
<li>需求分析与功能规划</li>
<li>页面设计与开发</li>
<li>技术框架搭建</li>
<li>后端管理功能实现</li>
<li>前端管理功能实现</li>
</ul>
<p><strong>你能学得什么？</strong></p>
<ul>
<li>基于Spring Boot的完整全栈式的开发套路</li>
<li>Semantic UI框架的使用</li>
<li>一套博客系统的源代码与设计</li>
</ul>
<h2 id="1需求与功能">1、需求与功能</h2>
<h3 id="11-用户故事">1.1 用户故事</h3>
<p>用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。</p>
<blockquote>
<p>用户故事最好是用户团队编写</p>
</blockquote>
<p><strong>用户故事模板</strong>：</p>
<ul>
<li>As a (role of user), I want (some feature) so that (some business value).</li>
<li>作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处</li>
</ul>
<p><strong>关键点</strong>：角色、功能、商业价值</p>
<p><strong>举例</strong>：</p>
<ul>
<li>作为一个招聘网站<strong>注册用户</strong>，我想<strong>查看最近3天发布的招聘信息</strong>，以便于<strong>了解最新的招聘信息</strong>。</li>
<li>作为公司，可以张贴新工作。</li>
</ul>
<p>个人博客系统的用户故事：</p>
<p>角色：<strong>普通访客</strong>，<strong>管理员（我）</strong></p>
<ul>
<li>访客，可以分页查看所有的博客</li>
<li>访客，可以快速查看博客数最多的6个分类</li>
<li>访客，可以查看所有的分类</li>
<li>访客，可以查看某个分类下的博客列表</li>
<li>访客，可以快速查看标记博客最多的10个标签</li>
<li>访客，可以查看所有的标签</li>
<li>访客，可以查看某个标签下的博客列表</li>
<li>访客，可以根据年度时间线查看博客列表</li>
<li>访客，可以快速查看最新的推荐博客</li>
<li>访客，可以用关键字全局搜索博客</li>
<li>访客，可以查看单个博客内容</li>
<li>访客，可以对博客内容进行评论</li>
<li>访客，可以赞赏博客内容</li>
<li>访客，可以微信扫码阅读博客内容</li>
<li>访客，可以在首页扫描公众号二维码关注我</li>
<li>我，可以用户名和密码登录后台管理</li>
<li>我，可以管理博客
<ul>
<li>我，可以发布新博客</li>
<li>我，可以对博客进行分类</li>
<li>我，可以对博客打标签</li>
<li>我，可以修改博客</li>
<li>我，可以删除博客</li>
<li>我，可以根据标题，分类，标签查询博客</li>
</ul>
</li>
<li>我，可以管理博客分类
<ul>
<li>我，可以新增一个分类</li>
<li>我，可以修改一个分类</li>
<li>我，可以删除一个分类</li>
<li>我，可以根据分类名称查询分类</li>
</ul>
</li>
<li>我，可以管理标签
<ul>
<li>我，可以新增一个标签</li>
<li>我，可以修改一个标签</li>
<li>我，可以删除一个标签</li>
<li>我，可以根据名称查询标签</li>
</ul>
</li>
</ul>
<h3 id="12-功能规划">1.2 功能规划</h3>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg" alt="" /></p>
<h2 id="2页面设计与开发">2、页面设计与开发</h2>
<h3 id="21-设计">2.1 设计</h3>
<p><strong>页面规划：</strong></p>
<p>前端展示：首页、详情页、分类、标签、归档、关于我</p>
<p>后台管理：模板页</p>
<h3 id="22-页面开发">2.2 页面开发</h3>
<p><a href="https://semantic-ui.com/" target="_blank">Semantic UI官网</a></p>
<p><a href="http://www.semantic-ui.cn/" target="_blank">Semantic UI中文官网</a></p>
<p><a href="https://imcoding.me/blogs/5" target="_blank">WebStorm下载与破解</a></p>
<p><a href="https://www.toptal.com/designers/subtlepatterns/" target="_blank">背景图片资源</a></p>
<h3 id="23-插件集成">2.3 插件集成</h3>
<p><a href="https://pandao.github.io/editor.md/" target="_blank">编辑器 Markdown</a></p>
<p><a href="https://github.com/sofish/typo.css" target="_blank">内容排版 typo.css</a></p>
<p><a href="https://daneden.github.io/animate.css/" target="_blank">动画 animate.css</a></p>
<p><a href="https://github.com/PrismJS/prism" target="_blank">代码高亮 prism</a></p>
<p><a href="https://tscanlin.github.io/tocbot/" target="_blank">目录生成 Tocbot</a></p>
<p><a href="http://imakewebthings.com/waypoints/" target="_blank">滚动侦测 waypoints</a></p>
<p><a href="https://github.com/flesler/jquery.scrollTo" target="_blank">平滑滚动 jquery.scrollTo</a></p>
<p><a href="https://davidshimjs.github.io/qrcodejs/" target="_blank">二维码生成 qrcode.js</a></p>
<h2 id="3框架搭建">3、框架搭建</h2>
<blockquote>
<p><a href="https://www.jetbrains.com/idea/" target="_blank">IDEA下载 https://www.jetbrains.com/idea/</a></p>
</blockquote>
<h3 id="31-构建与配置">3.1 构建与配置</h3>
<p><strong>1、引入Spring Boot模块：</strong></p>
<ul>
<li>web</li>
<li>Thymeleaf</li>
<li>JPA</li>
<li>MySQL</li>
<li>Aspects</li>
<li>DevTools</li>
</ul>
<p><strong>2、application.yml配置</strong></p>
<ul>
<li>
<p>使用 thymeleaf 3</p>
<p>pom.xml:</p>
</li>
</ul>
<pre><code class="language-xml">&lt;thymeleaf.version&gt;3.0.2.RELEASE&lt;/thymeleaf.version&gt;
&lt;thymeleaf-layout-dialect.version&gt;2.1.1&lt;/thymeleaf-layout-dialect.version&gt;
</code></pre>
<pre><code>application.yml:
</code></pre>
<pre><code class="language-yaml">spring:
  thymeleaf:
    mode: HTML
</code></pre>
<ul>
<li>数据库连接配置</li>
</ul>
<pre><code class="language-yaml">spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&amp;characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
</code></pre>
<ul>
<li>
<p>日志配置</p>
<p>application.yml:</p>
</li>
</ul>
<pre><code class="language-yaml">logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
</code></pre>
<p>​	logback-spring.xml：</p>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;configuration&gt;
    &lt;!--包含Spring boot对logback日志的默认配置--&gt;
    &lt;include resource=&quot;org/springframework/boot/logging/logback/defaults.xml&quot; /&gt;
    &lt;property name=&quot;LOG_FILE&quot; value=&quot;${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}&quot;/&gt;
    &lt;include resource=&quot;org/springframework/boot/logging/logback/console-appender.xml&quot; /&gt;

    &lt;!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置--&gt;
    &lt;appender name=&quot;TIME_FILE&quot;
              class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;
        &lt;encoder&gt;
            &lt;pattern&gt;${FILE_LOG_PATTERN}&lt;/pattern&gt;
        &lt;/encoder&gt;
        &lt;file&gt;${LOG_FILE}&lt;/file&gt;
        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;
            &lt;fileNamePattern&gt;${LOG_FILE}.%d{yyyy-MM-dd}.%i&lt;/fileNamePattern&gt;
            &lt;!--保留历史日志一个月的时间--&gt;
            &lt;maxHistory&gt;30&lt;/maxHistory&gt;
            &lt;!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            --&gt;
            &lt;timeBasedFileNamingAndTriggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;
                &lt;maxFileSize&gt;10MB&lt;/maxFileSize&gt;
            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;

        &lt;/rollingPolicy&gt;
    &lt;/appender&gt;

    &lt;root level=&quot;INFO&quot;&gt;
        &lt;appender-ref ref=&quot;CONSOLE&quot; /&gt;
        &lt;appender-ref ref=&quot;TIME_FILE&quot; /&gt;
    &lt;/root&gt;

&lt;/configuration&gt;
&lt;!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
--&gt;
</code></pre>
<ul>
<li>生产环境与开发环境配置
<ul>
<li>application-dev.yml</li>
<li>application-pro.yml</li>
</ul>
</li>
</ul>
<h3 id="32-异常处理">3.2 异常处理</h3>
<p><strong>1、定义错误页面</strong></p>
<ul>
<li>404</li>
<li>500</li>
<li>error</li>
</ul>
<p><strong>2、全局处理异常</strong></p>
<p>统一处理异常：</p>
<pre><code class="language-java">@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error(&quot;Request URL : {} , Exception : {}&quot;, request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject(&quot;url&quot;, request.getRequestURL());
        mav.addObject(&quot;exception&quot;, e);
        mav.setViewName(&quot;error/error&quot;);

        return mav;
    }
}
</code></pre>
<p>错误页面异常信息显示处理：</p>
<pre><code class="language-html">&lt;div&gt;
    &lt;div th:utext=&quot;'&amp;lt;!--'&quot; th:remove=&quot;tag&quot;&gt;&lt;/div&gt;
    &lt;div th:utext=&quot;'Failed Request URL : ' + ${url}&quot; th:remove=&quot;tag&quot;&gt;&lt;/div&gt;
    &lt;div th:utext=&quot;'Exception message : ' + ${exception.message}&quot; th:remove=&quot;tag&quot;&gt;&lt;/div&gt;
    &lt;ul th:remove=&quot;tag&quot;&gt;
        &lt;li th:each=&quot;st : ${exception.stackTrace}&quot; th:remove=&quot;tag&quot;&gt;&lt;span th:utext=&quot;${st}&quot; th:remove=&quot;tag&quot;&gt;&lt;/span&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;div th:utext=&quot;'--&amp;gt;'&quot; th:remove=&quot;tag&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<p><strong>3、资源找不到异常</strong></p>
<pre><code class="language-java">@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
</code></pre>
<h3 id="33-日志处理">3.3 日志处理</h3>
<p><strong>1、记录日志内容</strong></p>
<ul>
<li>请求 url</li>
<li>访问者 ip</li>
<li>调用方法 classMethod</li>
<li>参数 args</li>
<li>返回内容</li>
</ul>
<p><strong>2、记录日志类：</strong></p>
<pre><code class="language-java">@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut(&quot;execution(* com.imcoding.web.*.*(..))&quot;)
    public void log() {
    }

    @Before(&quot;log()&quot;)
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + &quot;.&quot; + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info(&quot;Rquest  ----- {}&quot;,reqeustLog);
    }

    @After(&quot;log()&quot;)
    public void doAfter() {
        //logger.info(&quot;---------- doAfter 2 ----------&quot;);
    }

    @AfterReturning(returning = &quot;result&quot;,pointcut = &quot;log()&quot;)
    public void doAtfertRturning(Object result) {
        logger.info(&quot;Return ------ {}&quot;,result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return &quot;ReqeustLog{&quot; +
                    &quot;url='&quot; + url + '\'' +
                    &quot;, ip='&quot; + ip + '\'' +
                    &quot;, classMethod='&quot; + classMethod + '\'' +
                    &quot;, args=&quot; + Arrays.toString(args) +
                    '}';
        }
    }

}
</code></pre>
<h3 id="34-页面处理">3.4 页面处理</h3>
<p><strong>1、静态页面导入project</strong></p>
<p><strong>2、thymeleaf布局</strong></p>
<ul>
<li>定义fragment</li>
<li>使用fragment布局</li>
</ul>
<p><strong>3、错误页面美化</strong></p>
<p>4、设计与规范</p>
<h3 id="41-实体设计">4.1 实体设计</h3>
<p><strong>实体类：</strong></p>
<ul>
<li>博客 Blog</li>
<li>博客分类 Type</li>
<li>博客标签 Tag</li>
<li>博客评论 Comment</li>
<li>用户 User</li>
</ul>
<p><strong>实体关系：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg" alt="" /></p>
<p><strong>评论类自关联关系：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg" alt="" /></p>
<p><strong>Blog类：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg" alt="" /></p>
<p><strong>Type类：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg" alt="" /></p>
<p><strong>Tag类：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg" alt="" /></p>
<p><strong>Comment类：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg" alt="" /></p>
<p><strong>User类：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg" alt="" /></p>
<h3 id="42-应用分层">4.2 应用分层</h3>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg" alt="" /></p>
<h3 id="43-命名约定">4.3 命名约定</h3>
<p><strong>Service/DAO层命名约定：</strong></p>
<ul>
<li>获取单个对象的方法用get做前缀。</li>
<li>获取多个对象的方法用list做前缀。</li>
<li>获取统计值的方法用count做前缀。</li>
<li>插入的方法用save(推荐)或insert做前缀。</li>
<li>删除的方法用remove(推荐)或delete做前缀。</li>
<li>修改的方法用update做前缀。</li>
</ul>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg" alt="" /></p>
<h2 id="5后台管理功能实现">5、后台管理功能实现</h2>
<h3 id="51-登录">5.1 登录</h3>
<p><strong>1、构建登录页面和后台管理首页</strong></p>
<p><strong>2、UserService和UserRepository</strong></p>
<p><strong>3、LoginController实现登录</strong></p>
<p><strong>4、MD5加密</strong></p>
<p><strong>5、登录拦截器</strong></p>
<h3 id="52-分类管理">5.2 分类管理</h3>
<p><strong>1、分类管理页面</strong></p>
<p><strong>2、分类列表分页</strong></p>
<pre><code class="language-javascript">{
  &quot;content&quot;:[
    {&quot;id&quot;:123,&quot;title&quot;:&quot;blog122&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:122,&quot;title&quot;:&quot;blog121&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:121,&quot;title&quot;:&quot;blog120&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:120,&quot;title&quot;:&quot;blog119&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:119,&quot;title&quot;:&quot;blog118&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:118,&quot;title&quot;:&quot;blog117&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:117,&quot;title&quot;:&quot;blog116&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:116,&quot;title&quot;:&quot;blog115&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:115,&quot;title&quot;:&quot;blog114&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:114,&quot;title&quot;:&quot;blog113&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:113,&quot;title&quot;:&quot;blog112&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:112,&quot;title&quot;:&quot;blog111&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:111,&quot;title&quot;:&quot;blog110&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:110,&quot;title&quot;:&quot;blog109&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:109,&quot;title&quot;:&quot;blog108&quot;,&quot;content&quot;:&quot;this is blog content&quot;}],
  &quot;last&quot;:false,
  &quot;totalPages&quot;:9,
  &quot;totalElements&quot;:123,
  &quot;size&quot;:15,
  &quot;number&quot;:0,
  &quot;first&quot;:true,
  &quot;sort&quot;:[{
    &quot;direction&quot;:&quot;DESC&quot;,
    &quot;property&quot;:&quot;id&quot;,
    &quot;ignoreCase&quot;:false,
    &quot;nullHandling&quot;:&quot;NATIVE&quot;,
    &quot;ascending&quot;:false
  }],
  &quot;numberOfElements&quot;:15
}
</code></pre>
<p><strong>3、分类新增、修改、删除</strong></p>
<h3 id="53-标签管理">5.3 标签管理</h3>
<h3 id="54-博客管理">5.4 博客管理</h3>
<p><strong>1、博客分页查询</strong></p>
<p><strong>2、博客新增</strong></p>
<p><strong>3、博客修改</strong></p>
<p><strong>4、博客删除</strong></p>
<h2 id="6前端展示功能实现">6、前端展示功能实现</h2>
<h3 id="61-首页展示">6.1 首页展示</h3>
<p><strong>1、博客列表</strong></p>
<p><strong>2、top分类</strong></p>
<p><strong>3、top标签</strong></p>
<p><strong>4、最新博客推荐</strong></p>
<p><strong>5、博客详情</strong></p>
<p><strong>1、Markdown 转换 HTML</strong></p>
<ul>
<li><a href="https://github.com/atlassian/commonmark-java" target="_blank">commonmark-java  https://github.com/atlassian/commonmark-java</a></li>
<li>pom.xml引用commonmark和扩展插件</li>
</ul>
<pre><code class="language-xml">&lt;dependency&gt;
   &lt;groupId&gt;com.atlassian.commonmark&lt;/groupId&gt;
   &lt;artifactId&gt;commonmark&lt;/artifactId&gt;
   &lt;version&gt;0.10.0&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
   &lt;groupId&gt;com.atlassian.commonmark&lt;/groupId&gt;
   &lt;artifactId&gt;commonmark-ext-heading-anchor&lt;/artifactId&gt;
   &lt;version&gt;0.10.0&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
   &lt;groupId&gt;com.atlassian.commonmark&lt;/groupId&gt;
   &lt;artifactId&gt;commonmark-ext-gfm-tables&lt;/artifactId&gt;
   &lt;version&gt;0.10.0&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<p><strong>2、评论功能</strong></p>
<ul>
<li>评论信息提交与回复功能</li>
<li>评论信息列表展示功能</li>
<li>管理员回复评论功能</li>
</ul>
<h3 id="62-分类页">6.2 分类页</h3>
<h3 id="63-标签页">6.3 标签页</h3>
<h3 id="64-归档页">6.4 归档页</h3>
<h3 id="65-关于我">6.5 关于我</h3>', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=14, isadmire=0, iscopyright=0, isrecommend=0, iscomment=1, issue=1, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=null, typeId=null, user=User{id=1, petname='程鑫', username='cx201125', password='dbd1a8bc623a690cd163ec0ade366995', mail='2543139363@qq.com', type=0, headportrait='/images/head.jpg', createtime=Wed Aug 26 18:02:27 CST 2020, updatetime=Wed Aug 26 18:02:30 CST 2020, blogs=[]}, type=Type{id=2, name='JAVA', blogs=[]}, tagsId='null', comments=[Comment{id=19, petname='程鑫', mail='2543139363@qq.com', headportrait='null', matter='null', createtime=null, blogId=null, blog=null, topId=null, top=null, bottom=[]}], tags=[Tag{id=1, name='mysql', Tag{id=4, name='spring']}}(String), blog(String)
2020-09-15 17:58:10.083 DEBUG 16504 --- [http-nio-8080-exec-9] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 17:58:10.568  INFO 16504 --- [http-nio-8080-exec-4] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/fragments/newblog', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.newblogs', args=[{}]}
2020-09-15 17:58:10.569 DEBUG 16504 --- [http-nio-8080-exec-4] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,3
2020-09-15 17:58:10.569 DEBUG 16504 --- [http-nio-8080-exec-4] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 17:58:10.575 DEBUG 16504 --- [http-nio-8080-exec-4] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 3
2020-09-15 17:58:10.577  INFO 16504 --- [http-nio-8080-exec-4] com.chenxin.blog.aspect.LogAspect        : Return ------ common/fragments :: newbloglist
2020-09-15 17:58:10.579 DEBUG 16504 --- [http-nio-8080-exec-4] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 17:58:10.581 DEBUG 16504 --- [http-nio-8080-exec-4] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/fragments/newblog(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.newblogs(String), {newblogs=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=15, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=12, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), common/fragments :: newbloglist(String)
2020-09-15 17:58:10.682 DEBUG 16504 --- [http-nio-8080-exec-4] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 17:58:31.874  INFO 16504 --- [http-nio-8080-exec-8] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.indexoage', args=[null, {}]}
2020-09-15 17:58:31.876 DEBUG 16504 --- [http-nio-8080-exec-8] c.c.b.m.B.findBlogByPaging_COUNT         : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0
2020-09-15 17:58:31.876 DEBUG 16504 --- [http-nio-8080-exec-8] c.c.b.m.B.findBlogByPaging_COUNT         : ==> Parameters: 
2020-09-15 17:58:31.923 DEBUG 16504 --- [http-nio-8080-exec-8] c.c.b.m.B.findBlogByPaging_COUNT         : <==      Total: 1
2020-09-15 17:58:31.924 DEBUG 16504 --- [http-nio-8080-exec-8] c.c.b.m.BlogMapper.findBlogByPaging      : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 LIMIT ?
2020-09-15 17:58:31.924 DEBUG 16504 --- [http-nio-8080-exec-8] c.c.b.m.BlogMapper.findBlogByPaging      : ==> Parameters: 10(Integer)
2020-09-15 17:58:31.929 DEBUG 16504 --- [http-nio-8080-exec-8] c.c.b.m.BlogMapper.findBlogByPaging      : <==      Total: 5
2020-09-15 17:58:31.930 DEBUG 16504 --- [http-nio-8080-exec-8] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC limit 0,6
2020-09-15 17:58:31.930 DEBUG 16504 --- [http-nio-8080-exec-8] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 17:58:31.941 DEBUG 16504 --- [http-nio-8080-exec-8] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 17:58:31.941 DEBUG 16504 --- [http-nio-8080-exec-8] c.c.blog.mapper.TagMapper.findByExample  : ==>  Preparing: SELECT t.id, t.NAME, COUNT( bt.blog_id ) countBlog FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.isrecommend = 0 GROUP BY id ORDER BY countBlog DESC limit 0,10
2020-09-15 17:58:31.941 DEBUG 16504 --- [http-nio-8080-exec-8] c.c.blog.mapper.TagMapper.findByExample  : ==> Parameters: 
2020-09-15 17:58:31.944 DEBUG 16504 --- [http-nio-8080-exec-8] c.c.blog.mapper.TagMapper.findByExample  : <==      Total: 5
2020-09-15 17:58:31.945 DEBUG 16504 --- [http-nio-8080-exec-8] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,10
2020-09-15 17:58:31.945 DEBUG 16504 --- [http-nio-8080-exec-8] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 17:58:31.947 DEBUG 16504 --- [http-nio-8080-exec-8] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 5
2020-09-15 17:58:31.947  INFO 16504 --- [http-nio-8080-exec-8] com.chenxin.blog.aspect.LogAspect        : Return ------ /index
2020-09-15 17:58:31.948 DEBUG 16504 --- [http-nio-8080-exec-8] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 17:58:31.950 DEBUG 16504 --- [http-nio-8080-exec-8] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.indexoage(String), null,{page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=5, pages=1, reasonable=false, pageSizeZero=false}, toptype=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], toptag=[Tag{id=1, name='mysql', Tag{id=6, name='mybaits', Tag{id=4, name='spring', Tag{id=2, name='大数据', Tag{id=8, name='python'], topblog=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=15, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=12, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=20, title='mysql数据库的查询拉', content='**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这是一篇好博客', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:27:27 CST 2019, updatetime=Thu Sep 05 09:44:20 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=24, title='JAVA是什么', content='##java是什么&sup3; &hearts;
虹口区我说的浓氨水', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='我is单词vhuiowdecvb', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 13 11:08:48 CST 2018, updatetime=Thu Sep 13 11:08:48 CST 2018, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), /index(String)
2020-09-15 17:58:31.998 DEBUG 16504 --- [http-nio-8080-exec-8] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 17:58:32.433  INFO 16504 --- [http-nio-8080-exec-6] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/fragments/newblog', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.newblogs', args=[{}]}
2020-09-15 17:58:32.434 DEBUG 16504 --- [http-nio-8080-exec-6] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,3
2020-09-15 17:58:32.435 DEBUG 16504 --- [http-nio-8080-exec-6] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 17:58:32.438 DEBUG 16504 --- [http-nio-8080-exec-6] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 3
2020-09-15 17:58:32.439  INFO 16504 --- [http-nio-8080-exec-6] com.chenxin.blog.aspect.LogAspect        : Return ------ common/fragments :: newbloglist
2020-09-15 17:58:32.440 DEBUG 16504 --- [http-nio-8080-exec-6] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 17:58:32.441 DEBUG 16504 --- [http-nio-8080-exec-6] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/fragments/newblog(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.newblogs(String), {newblogs=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=15, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=12, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), common/fragments :: newbloglist(String)
2020-09-15 17:58:32.565 DEBUG 16504 --- [http-nio-8080-exec-6] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 17:58:34.167  INFO 16504 --- [http-nio-8080-exec-5] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/blog/21', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.BlogController.BlogPage', args=[21, {}]}
2020-09-15 17:58:34.167 DEBUG 16504 --- [http-nio-8080-exec-5] c.c.blog.mapper.BlogMapper.findBlogById  : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag, b.description,b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id, t.id t_id,t.name t_name,y.id y_id,y.name y_name,u.id u_id,u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime from cx_blog b LEFT JOIN cx_blog_tag bt ON b.id = bt.blog_id LEFT JOIN cx_type y ON b.type_id=y.id LEFT JOIN cx_tag t ON bt.tag_id=t.id LEFT JOIN cx_user u on b.user_id = u.id WHERE b.id=?
2020-09-15 17:58:34.167 DEBUG 16504 --- [http-nio-8080-exec-5] c.c.blog.mapper.BlogMapper.findBlogById  : ==> Parameters: 21(Long)
2020-09-15 17:58:34.173 DEBUG 16504 --- [http-nio-8080-exec-5] c.c.blog.mapper.BlogMapper.findBlogById  : <==      Total: 3
2020-09-15 17:58:34.174 DEBUG 16504 --- [http-nio-8080-exec-5] c.c.b.m.B.updateByPrimaryKeySelective    : ==>  Preparing: update cx_blog SET viewcount = ? where id = ?
2020-09-15 17:58:34.174 DEBUG 16504 --- [http-nio-8080-exec-5] c.c.b.m.B.updateByPrimaryKeySelective    : ==> Parameters: 13(Integer), 21(Long)
2020-09-15 17:58:34.249 DEBUG 16504 --- [http-nio-8080-exec-5] c.c.b.m.B.updateByPrimaryKeySelective    : <==    Updates: 1
2020-09-15 17:58:34.249  INFO 16504 --- [http-nio-8080-exec-5] com.chenxin.blog.aspect.LogAspect        : Return ------ blog
2020-09-15 17:58:34.249 DEBUG 16504 --- [http-nio-8080-exec-5] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 17:58:34.250 DEBUG 16504 --- [http-nio-8080-exec-5] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/blog/21(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.BlogController.BlogPage(String), 21,{blog=Blog{id=21, title='java是什么', content='<ul>
<li>作为一个招聘网站<strong>注册用户</strong>，我想<strong>查看最近3天发布的招聘信息</strong>，以便于<strong>了解最新的招聘信息</strong>。</li>
<li>作为公司，可以张贴新工作。</li>
</ul>
<p>个人博客系统的用户故事：</p>
<p>角色：<strong>普通访客</strong>，<strong>管理员（我）</strong></p>
<ul>
<li>访客，可以分页查看所有的博客</li>
<li>访客，可以快速查看博客数最多的6个分类</li>
<li>访客，可以查看所有的分类</li>
<li>访客，可以查看某个分类下的博客列表</li>
<li>访客，可以快速查看标记博客最多的10个标签</li>
<li>访客，可以查看所有的标签</li>
<li>访客，可以查看某个标签下的博客列表</li>
<li>访客，可以根据年度时间线查看博客列表</li>
<li>访客，可以快速查看最新的推荐博客</li>
<li>访客，可以用关键字全局搜索博客</li>
<li>访客，可以查看单个博客内容</li>
<li>访客，可以对博客内容进行评论</li>
<li>访客，可以赞赏博客内容</li>
<li>访客，可以微信扫码阅读博客内容</li>
<li>访客，可以在首页扫描公众号二维码关注我</li>
<li>我，可以用户名和密码登录后台管理</li>
<li>我，可以管理博客
<ul>
<li>我，可以发布新博客</li>
<li>我，可以对博客进行分类</li>
<li>我，可以对博客打标签</li>
<li>我，可以修改博客</li>
<li>我，可以删除博客</li>
<li>我，可以根据标题，分类，标签查询博客</li>
</ul>
</li>
<li>我，可以管理博客分类
<ul>
<li>我，可以新增一个分类</li>
<li>我，可以修改一个分类</li>
<li>我，可以删除一个分类</li>
<li>我，可以根据分类名称查询分类</li>
</ul>
</li>
<li>我，可以管理标签
<ul>
<li>我，可以新增一个标签</li>
<li>我，可以修改一个标签</li>
<li>我，可以删除一个标签</li>
<li>我，可以根据名称查询标签</li>
</ul>
</li>
</ul>
<h3 id="12-功能规划">1.2 功能规划</h3>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg" alt="" /></p>
<h2 id="2页面设计与开发">2、页面设计与开发</h2>
<h3 id="21-设计">2.1 设计</h3>
<p><strong>页面规划：</strong></p>
<p>前端展示：首页、详情页、分类、标签、归档、关于我</p>
<p>后台管理：模板页</p>
<h3 id="22-页面开发">2.2 页面开发</h3>
<p><a href="https://semantic-ui.com/" target="_blank">Semantic UI官网</a></p>
<p><a href="http://www.semantic-ui.cn/" target="_blank">Semantic UI中文官网</a></p>
<p><a href="https://imcoding.me/blogs/5" target="_blank">WebStorm下载与破解</a></p>
<p><a href="https://www.toptal.com/designers/subtlepatterns/" target="_blank">背景图片资源</a></p>
<h3 id="23-插件集成拉">2.3 插件集成拉</h3>', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=12, isadmire=0, iscopyright=0, isrecommend=0, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=null, typeId=null, user=User{id=1, petname='程鑫', username='cx201125', password='dbd1a8bc623a690cd163ec0ade366995', mail='2543139363@qq.com', type=0, headportrait='/images/head.jpg', createtime=Wed Aug 26 18:02:27 CST 2020, updatetime=Wed Aug 26 18:02:30 CST 2020, blogs=[]}, type=Type{id=2, name='JAVA', blogs=[]}, tagsId='null', comments=[Comment{id=21, petname='程鑫', mail='2543139363@qq.com', headportrait='null', matter='null', createtime=null, blogId=null, blog=null, topId=null, top=null, bottom=[]}], tags=[Tag{id=1, name='mysql', Tag{id=6, name='mybaits', Tag{id=8, name='python']}}(String), blog(String)
2020-09-15 17:58:34.314 DEBUG 16504 --- [http-nio-8080-exec-5] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 17:58:34.710  INFO 16504 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/fragments/newblog', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.newblogs', args=[{}]}
2020-09-15 17:58:34.711 DEBUG 16504 --- [http-nio-8080-exec-1] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,3
2020-09-15 17:58:34.711 DEBUG 16504 --- [http-nio-8080-exec-1] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 17:58:34.714 DEBUG 16504 --- [http-nio-8080-exec-1] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 3
2020-09-15 17:58:34.715  INFO 16504 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Return ------ common/fragments :: newbloglist
2020-09-15 17:58:34.716 DEBUG 16504 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 17:58:34.717 DEBUG 16504 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/fragments/newblog(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.newblogs(String), {newblogs=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=15, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=13, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), common/fragments :: newbloglist(String)
2020-09-15 17:58:34.869  INFO 16504 --- [http-nio-8080-exec-5] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/comments/21', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.CommentController.comment', args=[21, {}]}
2020-09-15 17:58:34.876 DEBUG 16504 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 17:58:35.042 DEBUG 16504 --- [http-nio-8080-exec-5] c.c.b.m.CommentMapper.selectByExample    : ==>  Preparing: select id, petname, mail, headportrait, matter, createtime,isadmain,blog_id, top_id from cx_comment WHERE ( blog_id = ? and top_id is null ) order by createtime desc
2020-09-15 17:58:35.044 DEBUG 16504 --- [http-nio-8080-exec-5] c.c.b.m.CommentMapper.selectByExample    : ==> Parameters: 21(Long)
2020-09-15 17:58:35.056 DEBUG 16504 --- [http-nio-8080-exec-5] c.c.b.m.CommentMapper.selectByExample    : <==      Total: 0
2020-09-15 17:58:35.056  INFO 16504 --- [http-nio-8080-exec-5] com.chenxin.blog.aspect.LogAspect        : Return ------ /blog :: commentlist
2020-09-15 17:58:35.056 DEBUG 16504 --- [http-nio-8080-exec-5] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 17:58:35.056 DEBUG 16504 --- [http-nio-8080-exec-5] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/comments/21(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.CommentController.comment(String), 21,{comments=[]}(String), /blog :: commentlist(String)
2020-09-15 17:58:35.133 DEBUG 16504 --- [http-nio-8080-exec-5] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 18:01:47.084  INFO 16504 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/blog/21', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.BlogController.BlogPage', args=[21, {}]}
2020-09-15 18:01:47.090 DEBUG 16504 --- [http-nio-8080-exec-1] c.c.blog.mapper.BlogMapper.findBlogById  : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag, b.description,b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id, t.id t_id,t.name t_name,y.id y_id,y.name y_name,u.id u_id,u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime from cx_blog b LEFT JOIN cx_blog_tag bt ON b.id = bt.blog_id LEFT JOIN cx_type y ON b.type_id=y.id LEFT JOIN cx_tag t ON bt.tag_id=t.id LEFT JOIN cx_user u on b.user_id = u.id WHERE b.id=?
2020-09-15 18:01:47.091 DEBUG 16504 --- [http-nio-8080-exec-1] c.c.blog.mapper.BlogMapper.findBlogById  : ==> Parameters: 21(Long)
2020-09-15 18:01:47.096 DEBUG 16504 --- [http-nio-8080-exec-1] c.c.blog.mapper.BlogMapper.findBlogById  : <==      Total: 3
2020-09-15 18:01:47.097 DEBUG 16504 --- [http-nio-8080-exec-1] c.c.b.m.B.updateByPrimaryKeySelective    : ==>  Preparing: update cx_blog SET viewcount = ? where id = ?
2020-09-15 18:01:47.098 DEBUG 16504 --- [http-nio-8080-exec-1] c.c.b.m.B.updateByPrimaryKeySelective    : ==> Parameters: 14(Integer), 21(Long)
2020-09-15 18:01:47.182 DEBUG 16504 --- [http-nio-8080-exec-1] c.c.b.m.B.updateByPrimaryKeySelective    : <==    Updates: 1
2020-09-15 18:01:47.182  INFO 16504 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Return ------ blog
2020-09-15 18:01:47.183 DEBUG 16504 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 18:01:47.183 DEBUG 16504 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/blog/21(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.BlogController.BlogPage(String), 21,{blog=Blog{id=21, title='java是什么', content='<ul>
<li>作为一个招聘网站<strong>注册用户</strong>，我想<strong>查看最近3天发布的招聘信息</strong>，以便于<strong>了解最新的招聘信息</strong>。</li>
<li>作为公司，可以张贴新工作。</li>
</ul>
<p>个人博客系统的用户故事：</p>
<p>角色：<strong>普通访客</strong>，<strong>管理员（我）</strong></p>
<ul>
<li>访客，可以分页查看所有的博客</li>
<li>访客，可以快速查看博客数最多的6个分类</li>
<li>访客，可以查看所有的分类</li>
<li>访客，可以查看某个分类下的博客列表</li>
<li>访客，可以快速查看标记博客最多的10个标签</li>
<li>访客，可以查看所有的标签</li>
<li>访客，可以查看某个标签下的博客列表</li>
<li>访客，可以根据年度时间线查看博客列表</li>
<li>访客，可以快速查看最新的推荐博客</li>
<li>访客，可以用关键字全局搜索博客</li>
<li>访客，可以查看单个博客内容</li>
<li>访客，可以对博客内容进行评论</li>
<li>访客，可以赞赏博客内容</li>
<li>访客，可以微信扫码阅读博客内容</li>
<li>访客，可以在首页扫描公众号二维码关注我</li>
<li>我，可以用户名和密码登录后台管理</li>
<li>我，可以管理博客
<ul>
<li>我，可以发布新博客</li>
<li>我，可以对博客进行分类</li>
<li>我，可以对博客打标签</li>
<li>我，可以修改博客</li>
<li>我，可以删除博客</li>
<li>我，可以根据标题，分类，标签查询博客</li>
</ul>
</li>
<li>我，可以管理博客分类
<ul>
<li>我，可以新增一个分类</li>
<li>我，可以修改一个分类</li>
<li>我，可以删除一个分类</li>
<li>我，可以根据分类名称查询分类</li>
</ul>
</li>
<li>我，可以管理标签
<ul>
<li>我，可以新增一个标签</li>
<li>我，可以修改一个标签</li>
<li>我，可以删除一个标签</li>
<li>我，可以根据名称查询标签</li>
</ul>
</li>
</ul>
<h3 id="12-功能规划">1.2 功能规划</h3>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg" alt="" /></p>
<h2 id="2页面设计与开发">2、页面设计与开发</h2>
<h3 id="21-设计">2.1 设计</h3>
<p><strong>页面规划：</strong></p>
<p>前端展示：首页、详情页、分类、标签、归档、关于我</p>
<p>后台管理：模板页</p>
<h3 id="22-页面开发">2.2 页面开发</h3>
<p><a href="https://semantic-ui.com/" target="_blank">Semantic UI官网</a></p>
<p><a href="http://www.semantic-ui.cn/" target="_blank">Semantic UI中文官网</a></p>
<p><a href="https://imcoding.me/blogs/5" target="_blank">WebStorm下载与破解</a></p>
<p><a href="https://www.toptal.com/designers/subtlepatterns/" target="_blank">背景图片资源</a></p>
<h3 id="23-插件集成拉">2.3 插件集成拉</h3>', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=13, isadmire=0, iscopyright=0, isrecommend=0, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=null, typeId=null, user=User{id=1, petname='程鑫', username='cx201125', password='dbd1a8bc623a690cd163ec0ade366995', mail='2543139363@qq.com', type=0, headportrait='/images/head.jpg', createtime=Wed Aug 26 18:02:27 CST 2020, updatetime=Wed Aug 26 18:02:30 CST 2020, blogs=[]}, type=Type{id=2, name='JAVA', blogs=[]}, tagsId='null', comments=[Comment{id=21, petname='程鑫', mail='2543139363@qq.com', headportrait='null', matter='null', createtime=null, blogId=null, blog=null, topId=null, top=null, bottom=[]}], tags=[Tag{id=1, name='mysql', Tag{id=6, name='mybaits', Tag{id=8, name='python']}}(String), blog(String)
2020-09-15 18:01:47.355 DEBUG 16504 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 18:01:47.788  INFO 16504 --- [http-nio-8080-exec-4] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/fragments/newblog', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.newblogs', args=[{}]}
2020-09-15 18:01:47.789 DEBUG 16504 --- [http-nio-8080-exec-4] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,3
2020-09-15 18:01:47.790 DEBUG 16504 --- [http-nio-8080-exec-4] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 18:01:47.795 DEBUG 16504 --- [http-nio-8080-exec-4] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 3
2020-09-15 18:01:47.799  INFO 16504 --- [http-nio-8080-exec-4] com.chenxin.blog.aspect.LogAspect        : Return ------ common/fragments :: newbloglist
2020-09-15 18:01:47.801 DEBUG 16504 --- [http-nio-8080-exec-4] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 18:01:47.802 DEBUG 16504 --- [http-nio-8080-exec-4] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/fragments/newblog(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.newblogs(String), {newblogs=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=15, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=14, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), common/fragments :: newbloglist(String)
2020-09-15 18:01:47.881 DEBUG 16504 --- [http-nio-8080-exec-4] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 18:02:53.277  INFO 16504 --- [http-nio-8080-exec-9] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/blog/21', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.BlogController.BlogPage', args=[21, {}]}
2020-09-15 18:02:53.280 DEBUG 16504 --- [http-nio-8080-exec-9] c.c.blog.mapper.BlogMapper.findBlogById  : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag, b.description,b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id, t.id t_id,t.name t_name,y.id y_id,y.name y_name,u.id u_id,u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime from cx_blog b LEFT JOIN cx_blog_tag bt ON b.id = bt.blog_id LEFT JOIN cx_type y ON b.type_id=y.id LEFT JOIN cx_tag t ON bt.tag_id=t.id LEFT JOIN cx_user u on b.user_id = u.id WHERE b.id=?
2020-09-15 18:02:53.281 DEBUG 16504 --- [http-nio-8080-exec-9] c.c.blog.mapper.BlogMapper.findBlogById  : ==> Parameters: 21(Long)
2020-09-15 18:02:53.286 DEBUG 16504 --- [http-nio-8080-exec-9] c.c.blog.mapper.BlogMapper.findBlogById  : <==      Total: 3
2020-09-15 18:02:53.288 DEBUG 16504 --- [http-nio-8080-exec-9] c.c.b.m.B.updateByPrimaryKeySelective    : ==>  Preparing: update cx_blog SET viewcount = ? where id = ?
2020-09-15 18:02:53.288 DEBUG 16504 --- [http-nio-8080-exec-9] c.c.b.m.B.updateByPrimaryKeySelective    : ==> Parameters: 15(Integer), 21(Long)
2020-09-15 18:02:53.364 DEBUG 16504 --- [http-nio-8080-exec-9] c.c.b.m.B.updateByPrimaryKeySelective    : <==    Updates: 1
2020-09-15 18:02:53.365  INFO 16504 --- [http-nio-8080-exec-9] com.chenxin.blog.aspect.LogAspect        : Return ------ blog
2020-09-15 18:02:53.366 DEBUG 16504 --- [http-nio-8080-exec-9] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 18:02:53.367 DEBUG 16504 --- [http-nio-8080-exec-9] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/blog/21(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.BlogController.BlogPage(String), 21,{blog=Blog{id=21, title='java是什么', content='<ul>
<li>作为一个招聘网站<strong>注册用户</strong>，我想<strong>查看最近3天发布的招聘信息</strong>，以便于<strong>了解最新的招聘信息</strong>。</li>
<li>作为公司，可以张贴新工作。</li>
</ul>
<p>个人博客系统的用户故事：</p>
<p>角色：<strong>普通访客</strong>，<strong>管理员（我）</strong></p>
<ul>
<li>访客，可以分页查看所有的博客</li>
<li>访客，可以快速查看博客数最多的6个分类</li>
<li>访客，可以查看所有的分类</li>
<li>访客，可以查看某个分类下的博客列表</li>
<li>访客，可以快速查看标记博客最多的10个标签</li>
<li>访客，可以查看所有的标签</li>
<li>访客，可以查看某个标签下的博客列表</li>
<li>访客，可以根据年度时间线查看博客列表</li>
<li>访客，可以快速查看最新的推荐博客</li>
<li>访客，可以用关键字全局搜索博客</li>
<li>访客，可以查看单个博客内容</li>
<li>访客，可以对博客内容进行评论</li>
<li>访客，可以赞赏博客内容</li>
<li>访客，可以微信扫码阅读博客内容</li>
<li>访客，可以在首页扫描公众号二维码关注我</li>
<li>我，可以用户名和密码登录后台管理</li>
<li>我，可以管理博客
<ul>
<li>我，可以发布新博客</li>
<li>我，可以对博客进行分类</li>
<li>我，可以对博客打标签</li>
<li>我，可以修改博客</li>
<li>我，可以删除博客</li>
<li>我，可以根据标题，分类，标签查询博客</li>
</ul>
</li>
<li>我，可以管理博客分类
<ul>
<li>我，可以新增一个分类</li>
<li>我，可以修改一个分类</li>
<li>我，可以删除一个分类</li>
<li>我，可以根据分类名称查询分类</li>
</ul>
</li>
<li>我，可以管理标签
<ul>
<li>我，可以新增一个标签</li>
<li>我，可以修改一个标签</li>
<li>我，可以删除一个标签</li>
<li>我，可以根据名称查询标签</li>
</ul>
</li>
</ul>
<h3 id="12-功能规划">1.2 功能规划</h3>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg" alt="" /></p>
<h2 id="2页面设计与开发">2、页面设计与开发</h2>
<h3 id="21-设计">2.1 设计</h3>
<p><strong>页面规划：</strong></p>
<p>前端展示：首页、详情页、分类、标签、归档、关于我</p>
<p>后台管理：模板页</p>
<h3 id="22-页面开发">2.2 页面开发</h3>
<p><a href="https://semantic-ui.com/" target="_blank">Semantic UI官网</a></p>
<p><a href="http://www.semantic-ui.cn/" target="_blank">Semantic UI中文官网</a></p>
<p><a href="https://imcoding.me/blogs/5" target="_blank">WebStorm下载与破解</a></p>
<p><a href="https://www.toptal.com/designers/subtlepatterns/" target="_blank">背景图片资源</a></p>
<h3 id="23-插件集成拉">2.3 插件集成拉</h3>', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=14, isadmire=0, iscopyright=0, isrecommend=0, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=null, typeId=null, user=User{id=1, petname='程鑫', username='cx201125', password='dbd1a8bc623a690cd163ec0ade366995', mail='2543139363@qq.com', type=0, headportrait='/images/head.jpg', createtime=Wed Aug 26 18:02:27 CST 2020, updatetime=Wed Aug 26 18:02:30 CST 2020, blogs=[]}, type=Type{id=2, name='JAVA', blogs=[]}, tagsId='null', comments=[Comment{id=21, petname='程鑫', mail='2543139363@qq.com', headportrait='null', matter='null', createtime=null, blogId=null, blog=null, topId=null, top=null, bottom=[]}], tags=[Tag{id=1, name='mysql', Tag{id=6, name='mybaits', Tag{id=8, name='python']}}(String), blog(String)
2020-09-15 18:02:53.430 DEBUG 16504 --- [http-nio-8080-exec-9] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 18:02:53.835  INFO 16504 --- [http-nio-8080-exec-3] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/fragments/newblog', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.newblogs', args=[{}]}
2020-09-15 18:02:53.836 DEBUG 16504 --- [http-nio-8080-exec-3] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,3
2020-09-15 18:02:53.837 DEBUG 16504 --- [http-nio-8080-exec-3] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 18:02:53.840 DEBUG 16504 --- [http-nio-8080-exec-3] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 3
2020-09-15 18:02:53.841  INFO 16504 --- [http-nio-8080-exec-3] com.chenxin.blog.aspect.LogAspect        : Return ------ common/fragments :: newbloglist
2020-09-15 18:02:53.841 DEBUG 16504 --- [http-nio-8080-exec-3] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 18:02:53.842 DEBUG 16504 --- [http-nio-8080-exec-3] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/fragments/newblog(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.newblogs(String), {newblogs=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=15, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=15, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), common/fragments :: newbloglist(String)
2020-09-15 18:02:53.946 DEBUG 16504 --- [http-nio-8080-exec-3] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 18:03:17.139  INFO 16504 --- [http-nio-8080-exec-2] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/blog/21', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.BlogController.BlogPage', args=[21, {}]}
2020-09-15 18:03:17.139 DEBUG 16504 --- [http-nio-8080-exec-2] c.c.blog.mapper.BlogMapper.findBlogById  : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag, b.description,b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id, t.id t_id,t.name t_name,y.id y_id,y.name y_name,u.id u_id,u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime from cx_blog b LEFT JOIN cx_blog_tag bt ON b.id = bt.blog_id LEFT JOIN cx_type y ON b.type_id=y.id LEFT JOIN cx_tag t ON bt.tag_id=t.id LEFT JOIN cx_user u on b.user_id = u.id WHERE b.id=?
2020-09-15 18:03:17.139 DEBUG 16504 --- [http-nio-8080-exec-2] c.c.blog.mapper.BlogMapper.findBlogById  : ==> Parameters: 21(Long)
2020-09-15 18:03:17.141 DEBUG 16504 --- [http-nio-8080-exec-2] c.c.blog.mapper.BlogMapper.findBlogById  : <==      Total: 3
2020-09-15 18:03:17.144 DEBUG 16504 --- [http-nio-8080-exec-2] c.c.b.m.B.updateByPrimaryKeySelective    : ==>  Preparing: update cx_blog SET viewcount = ? where id = ?
2020-09-15 18:03:17.144 DEBUG 16504 --- [http-nio-8080-exec-2] c.c.b.m.B.updateByPrimaryKeySelective    : ==> Parameters: 16(Integer), 21(Long)
2020-09-15 18:03:17.189 DEBUG 16504 --- [http-nio-8080-exec-2] c.c.b.m.B.updateByPrimaryKeySelective    : <==    Updates: 1
2020-09-15 18:03:17.189  INFO 16504 --- [http-nio-8080-exec-2] com.chenxin.blog.aspect.LogAspect        : Return ------ blog
2020-09-15 18:03:17.189 DEBUG 16504 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 18:03:17.189 DEBUG 16504 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/blog/21(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.BlogController.BlogPage(String), 21,{blog=Blog{id=21, title='java是什么', content='<ul>
<li>作为一个招聘网站<strong>注册用户</strong>，我想<strong>查看最近3天发布的招聘信息</strong>，以便于<strong>了解最新的招聘信息</strong>。</li>
<li>作为公司，可以张贴新工作。</li>
</ul>
<p>个人博客系统的用户故事：</p>
<p>角色：<strong>普通访客</strong>，<strong>管理员（我）</strong></p>
<ul>
<li>访客，可以分页查看所有的博客</li>
<li>访客，可以快速查看博客数最多的6个分类</li>
<li>访客，可以查看所有的分类</li>
<li>访客，可以查看某个分类下的博客列表</li>
<li>访客，可以快速查看标记博客最多的10个标签</li>
<li>访客，可以查看所有的标签</li>
<li>访客，可以查看某个标签下的博客列表</li>
<li>访客，可以根据年度时间线查看博客列表</li>
<li>访客，可以快速查看最新的推荐博客</li>
<li>访客，可以用关键字全局搜索博客</li>
<li>访客，可以查看单个博客内容</li>
<li>访客，可以对博客内容进行评论</li>
<li>访客，可以赞赏博客内容</li>
<li>访客，可以微信扫码阅读博客内容</li>
<li>访客，可以在首页扫描公众号二维码关注我</li>
<li>我，可以用户名和密码登录后台管理</li>
<li>我，可以管理博客
<ul>
<li>我，可以发布新博客</li>
<li>我，可以对博客进行分类</li>
<li>我，可以对博客打标签</li>
<li>我，可以修改博客</li>
<li>我，可以删除博客</li>
<li>我，可以根据标题，分类，标签查询博客</li>
</ul>
</li>
<li>我，可以管理博客分类
<ul>
<li>我，可以新增一个分类</li>
<li>我，可以修改一个分类</li>
<li>我，可以删除一个分类</li>
<li>我，可以根据分类名称查询分类</li>
</ul>
</li>
<li>我，可以管理标签
<ul>
<li>我，可以新增一个标签</li>
<li>我，可以修改一个标签</li>
<li>我，可以删除一个标签</li>
<li>我，可以根据名称查询标签</li>
</ul>
</li>
</ul>
<h3 id="12-功能规划">1.2 功能规划</h3>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg" alt="" /></p>
<h2 id="2页面设计与开发">2、页面设计与开发</h2>
<h3 id="21-设计">2.1 设计</h3>
<p><strong>页面规划：</strong></p>
<p>前端展示：首页、详情页、分类、标签、归档、关于我</p>
<p>后台管理：模板页</p>
<h3 id="22-页面开发">2.2 页面开发</h3>
<p><a href="https://semantic-ui.com/" target="_blank">Semantic UI官网</a></p>
<p><a href="http://www.semantic-ui.cn/" target="_blank">Semantic UI中文官网</a></p>
<p><a href="https://imcoding.me/blogs/5" target="_blank">WebStorm下载与破解</a></p>
<p><a href="https://www.toptal.com/designers/subtlepatterns/" target="_blank">背景图片资源</a></p>
<h3 id="23-插件集成拉">2.3 插件集成拉</h3>', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=15, isadmire=0, iscopyright=0, isrecommend=0, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=null, typeId=null, user=User{id=1, petname='程鑫', username='cx201125', password='dbd1a8bc623a690cd163ec0ade366995', mail='2543139363@qq.com', type=0, headportrait='/images/head.jpg', createtime=Wed Aug 26 18:02:27 CST 2020, updatetime=Wed Aug 26 18:02:30 CST 2020, blogs=[]}, type=Type{id=2, name='JAVA', blogs=[]}, tagsId='null', comments=[Comment{id=21, petname='程鑫', mail='2543139363@qq.com', headportrait='null', matter='null', createtime=null, blogId=null, blog=null, topId=null, top=null, bottom=[]}], tags=[Tag{id=1, name='mysql', Tag{id=6, name='mybaits', Tag{id=8, name='python']}}(String), blog(String)
2020-09-15 18:03:17.264 DEBUG 16504 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 18:03:17.693  INFO 16504 --- [http-nio-8080-exec-10] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/fragments/newblog', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.newblogs', args=[{}]}
2020-09-15 18:03:17.695 DEBUG 16504 --- [http-nio-8080-exec-10] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,3
2020-09-15 18:03:17.695 DEBUG 16504 --- [http-nio-8080-exec-10] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 18:03:17.700 DEBUG 16504 --- [http-nio-8080-exec-10] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 3
2020-09-15 18:03:17.702  INFO 16504 --- [http-nio-8080-exec-10] com.chenxin.blog.aspect.LogAspect        : Return ------ common/fragments :: newbloglist
2020-09-15 18:03:17.702 DEBUG 16504 --- [http-nio-8080-exec-10] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 18:03:17.703 DEBUG 16504 --- [http-nio-8080-exec-10] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/fragments/newblog(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.newblogs(String), {newblogs=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=15, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=16, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), common/fragments :: newbloglist(String)
2020-09-15 18:03:17.779 DEBUG 16504 --- [http-nio-8080-exec-10] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 18:03:21.195  INFO 16504 --- [http-nio-8080-exec-2] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.indexoage', args=[null, {}]}
2020-09-15 18:03:21.202 DEBUG 16504 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByPaging_COUNT         : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0
2020-09-15 18:03:21.202 DEBUG 16504 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByPaging_COUNT         : ==> Parameters: 
2020-09-15 18:03:21.205 DEBUG 16504 --- [http-nio-8080-exec-2] c.c.b.m.B.findBlogByPaging_COUNT         : <==      Total: 1
2020-09-15 18:03:21.205 DEBUG 16504 --- [http-nio-8080-exec-2] c.c.b.m.BlogMapper.findBlogByPaging      : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 LIMIT ?
2020-09-15 18:03:21.206 DEBUG 16504 --- [http-nio-8080-exec-2] c.c.b.m.BlogMapper.findBlogByPaging      : ==> Parameters: 10(Integer)
2020-09-15 18:03:21.210 DEBUG 16504 --- [http-nio-8080-exec-2] c.c.b.m.BlogMapper.findBlogByPaging      : <==      Total: 5
2020-09-15 18:03:21.211 DEBUG 16504 --- [http-nio-8080-exec-2] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC limit 0,6
2020-09-15 18:03:21.211 DEBUG 16504 --- [http-nio-8080-exec-2] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 18:03:21.212 DEBUG 16504 --- [http-nio-8080-exec-2] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 18:03:21.212 DEBUG 16504 --- [http-nio-8080-exec-2] c.c.blog.mapper.TagMapper.findByExample  : ==>  Preparing: SELECT t.id, t.NAME, COUNT( bt.blog_id ) countBlog FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.isrecommend = 0 GROUP BY id ORDER BY countBlog DESC limit 0,10
2020-09-15 18:03:21.213 DEBUG 16504 --- [http-nio-8080-exec-2] c.c.blog.mapper.TagMapper.findByExample  : ==> Parameters: 
2020-09-15 18:03:21.214 DEBUG 16504 --- [http-nio-8080-exec-2] c.c.blog.mapper.TagMapper.findByExample  : <==      Total: 5
2020-09-15 18:03:21.215 DEBUG 16504 --- [http-nio-8080-exec-2] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,10
2020-09-15 18:03:21.215 DEBUG 16504 --- [http-nio-8080-exec-2] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 18:03:21.218 DEBUG 16504 --- [http-nio-8080-exec-2] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 5
2020-09-15 18:03:21.218  INFO 16504 --- [http-nio-8080-exec-2] com.chenxin.blog.aspect.LogAspect        : Return ------ /index
2020-09-15 18:03:21.219 DEBUG 16504 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 18:03:21.219 DEBUG 16504 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.indexoage(String), null,{page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=5, pages=1, reasonable=false, pageSizeZero=false}, toptype=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], toptag=[Tag{id=1, name='mysql', Tag{id=6, name='mybaits', Tag{id=4, name='spring', Tag{id=2, name='大数据', Tag{id=8, name='python'], topblog=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=15, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=16, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=20, title='mysql数据库的查询拉', content='**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这是一篇好博客', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:27:27 CST 2019, updatetime=Thu Sep 05 09:44:20 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=24, title='JAVA是什么', content='##java是什么&sup3; &hearts;
虹口区我说的浓氨水', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='我is单词vhuiowdecvb', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 13 11:08:48 CST 2018, updatetime=Thu Sep 13 11:08:48 CST 2018, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), /index(String)
2020-09-15 18:03:21.499 DEBUG 16504 --- [http-nio-8080-exec-2] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 18:03:21.916  INFO 16504 --- [http-nio-8080-exec-5] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/fragments/newblog', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.newblogs', args=[{}]}
2020-09-15 18:03:21.917 DEBUG 16504 --- [http-nio-8080-exec-5] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,3
2020-09-15 18:03:21.917 DEBUG 16504 --- [http-nio-8080-exec-5] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 18:03:21.921 DEBUG 16504 --- [http-nio-8080-exec-5] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 3
2020-09-15 18:03:21.921  INFO 16504 --- [http-nio-8080-exec-5] com.chenxin.blog.aspect.LogAspect        : Return ------ common/fragments :: newbloglist
2020-09-15 18:03:21.922 DEBUG 16504 --- [http-nio-8080-exec-5] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 18:03:21.922 DEBUG 16504 --- [http-nio-8080-exec-5] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/fragments/newblog(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.newblogs(String), {newblogs=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=15, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=16, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), common/fragments :: newbloglist(String)
2020-09-15 18:03:22.021 DEBUG 16504 --- [http-nio-8080-exec-5] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 18:03:23.317  INFO 16504 --- [http-nio-8080-exec-8] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/blog/19', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.BlogController.BlogPage', args=[19, {}]}
2020-09-15 18:03:23.317 DEBUG 16504 --- [http-nio-8080-exec-8] c.c.blog.mapper.BlogMapper.findBlogById  : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag, b.description,b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id, t.id t_id,t.name t_name,y.id y_id,y.name y_name,u.id u_id,u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime from cx_blog b LEFT JOIN cx_blog_tag bt ON b.id = bt.blog_id LEFT JOIN cx_type y ON b.type_id=y.id LEFT JOIN cx_tag t ON bt.tag_id=t.id LEFT JOIN cx_user u on b.user_id = u.id WHERE b.id=?
2020-09-15 18:03:23.317 DEBUG 16504 --- [http-nio-8080-exec-8] c.c.blog.mapper.BlogMapper.findBlogById  : ==> Parameters: 19(Long)
2020-09-15 18:03:23.321 DEBUG 16504 --- [http-nio-8080-exec-8] c.c.blog.mapper.BlogMapper.findBlogById  : <==      Total: 2
2020-09-15 18:03:23.325 DEBUG 16504 --- [http-nio-8080-exec-8] c.c.b.m.B.updateByPrimaryKeySelective    : ==>  Preparing: update cx_blog SET viewcount = ? where id = ?
2020-09-15 18:03:23.325 DEBUG 16504 --- [http-nio-8080-exec-8] c.c.b.m.B.updateByPrimaryKeySelective    : ==> Parameters: 16(Integer), 19(Long)
2020-09-15 18:03:23.415 DEBUG 16504 --- [http-nio-8080-exec-8] c.c.b.m.B.updateByPrimaryKeySelective    : <==    Updates: 1
2020-09-15 18:03:23.416  INFO 16504 --- [http-nio-8080-exec-8] com.chenxin.blog.aspect.LogAspect        : Return ------ blog
2020-09-15 18:03:23.416 DEBUG 16504 --- [http-nio-8080-exec-8] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 18:03:23.416 DEBUG 16504 --- [http-nio-8080-exec-8] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/blog/19(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.BlogController.BlogPage(String), 19,{blog=Blog{id=19, title='mysql数据库的查询拉', content='<h1 id="spring-boot开发小而美的个人博客">Spring Boot开发小而美的个人博客</h1>
<blockquote>
<p>作者：李仁密</p>
</blockquote>
<p><strong>个人博客功能：</strong></p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg" alt="" /></p>
<p><strong>技术组合：</strong></p>
<ul>
<li>后端：Spring Boot + JPA + thymeleaf模板</li>
<li>数据库：MySQL</li>
<li>前端UI：Semantic UI框架</li>
</ul>
<p><strong>工具与环境：</strong></p>
<ul>
<li>IDEA</li>
<li>Maven 3</li>
<li>JDK 8</li>
<li>Axure RP 8</li>
</ul>
<p><strong>课程内容模块：</strong></p>
<ul>
<li>需求分析与功能规划</li>
<li>页面设计与开发</li>
<li>技术框架搭建</li>
<li>后端管理功能实现</li>
<li>前端管理功能实现</li>
</ul>
<p><strong>你能学得什么？</strong></p>
<ul>
<li>基于Spring Boot的完整全栈式的开发套路</li>
<li>Semantic UI框架的使用</li>
<li>一套博客系统的源代码与设计</li>
</ul>
<h2 id="1需求与功能">1、需求与功能</h2>
<h3 id="11-用户故事">1.1 用户故事</h3>
<p>用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。</p>
<blockquote>
<p>用户故事最好是用户团队编写</p>
</blockquote>
<p><strong>用户故事模板</strong>：</p>
<ul>
<li>As a (role of user), I want (some feature) so that (some business value).</li>
<li>作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处</li>
</ul>
<p><strong>关键点</strong>：角色、功能、商业价值</p>
<p><strong>举例</strong>：</p>
<ul>
<li>作为一个招聘网站<strong>注册用户</strong>，我想<strong>查看最近3天发布的招聘信息</strong>，以便于<strong>了解最新的招聘信息</strong>。</li>
<li>作为公司，可以张贴新工作。</li>
</ul>
<p>个人博客系统的用户故事：</p>
<p>角色：<strong>普通访客</strong>，<strong>管理员（我）</strong></p>
<ul>
<li>访客，可以分页查看所有的博客</li>
<li>访客，可以快速查看博客数最多的6个分类</li>
<li>访客，可以查看所有的分类</li>
<li>访客，可以查看某个分类下的博客列表</li>
<li>访客，可以快速查看标记博客最多的10个标签</li>
<li>访客，可以查看所有的标签</li>
<li>访客，可以查看某个标签下的博客列表</li>
<li>访客，可以根据年度时间线查看博客列表</li>
<li>访客，可以快速查看最新的推荐博客</li>
<li>访客，可以用关键字全局搜索博客</li>
<li>访客，可以查看单个博客内容</li>
<li>访客，可以对博客内容进行评论</li>
<li>访客，可以赞赏博客内容</li>
<li>访客，可以微信扫码阅读博客内容</li>
<li>访客，可以在首页扫描公众号二维码关注我</li>
<li>我，可以用户名和密码登录后台管理</li>
<li>我，可以管理博客
<ul>
<li>我，可以发布新博客</li>
<li>我，可以对博客进行分类</li>
<li>我，可以对博客打标签</li>
<li>我，可以修改博客</li>
<li>我，可以删除博客</li>
<li>我，可以根据标题，分类，标签查询博客</li>
</ul>
</li>
<li>我，可以管理博客分类
<ul>
<li>我，可以新增一个分类</li>
<li>我，可以修改一个分类</li>
<li>我，可以删除一个分类</li>
<li>我，可以根据分类名称查询分类</li>
</ul>
</li>
<li>我，可以管理标签
<ul>
<li>我，可以新增一个标签</li>
<li>我，可以修改一个标签</li>
<li>我，可以删除一个标签</li>
<li>我，可以根据名称查询标签</li>
</ul>
</li>
</ul>
<h3 id="12-功能规划">1.2 功能规划</h3>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg" alt="" /></p>
<h2 id="2页面设计与开发">2、页面设计与开发</h2>
<h3 id="21-设计">2.1 设计</h3>
<p><strong>页面规划：</strong></p>
<p>前端展示：首页、详情页、分类、标签、归档、关于我</p>
<p>后台管理：模板页</p>
<h3 id="22-页面开发">2.2 页面开发</h3>
<p><a href="https://semantic-ui.com/" target="_blank">Semantic UI官网</a></p>
<p><a href="http://www.semantic-ui.cn/" target="_blank">Semantic UI中文官网</a></p>
<p><a href="https://imcoding.me/blogs/5" target="_blank">WebStorm下载与破解</a></p>
<p><a href="https://www.toptal.com/designers/subtlepatterns/" target="_blank">背景图片资源</a></p>
<h3 id="23-插件集成">2.3 插件集成</h3>
<p><a href="https://pandao.github.io/editor.md/" target="_blank">编辑器 Markdown</a></p>
<p><a href="https://github.com/sofish/typo.css" target="_blank">内容排版 typo.css</a></p>
<p><a href="https://daneden.github.io/animate.css/" target="_blank">动画 animate.css</a></p>
<p><a href="https://github.com/PrismJS/prism" target="_blank">代码高亮 prism</a></p>
<p><a href="https://tscanlin.github.io/tocbot/" target="_blank">目录生成 Tocbot</a></p>
<p><a href="http://imakewebthings.com/waypoints/" target="_blank">滚动侦测 waypoints</a></p>
<p><a href="https://github.com/flesler/jquery.scrollTo" target="_blank">平滑滚动 jquery.scrollTo</a></p>
<p><a href="https://davidshimjs.github.io/qrcodejs/" target="_blank">二维码生成 qrcode.js</a></p>
<h2 id="3框架搭建">3、框架搭建</h2>
<blockquote>
<p><a href="https://www.jetbrains.com/idea/" target="_blank">IDEA下载 https://www.jetbrains.com/idea/</a></p>
</blockquote>
<h3 id="31-构建与配置">3.1 构建与配置</h3>
<p><strong>1、引入Spring Boot模块：</strong></p>
<ul>
<li>web</li>
<li>Thymeleaf</li>
<li>JPA</li>
<li>MySQL</li>
<li>Aspects</li>
<li>DevTools</li>
</ul>
<p><strong>2、application.yml配置</strong></p>
<ul>
<li>
<p>使用 thymeleaf 3</p>
<p>pom.xml:</p>
</li>
</ul>
<pre><code class="language-xml">&lt;thymeleaf.version&gt;3.0.2.RELEASE&lt;/thymeleaf.version&gt;
&lt;thymeleaf-layout-dialect.version&gt;2.1.1&lt;/thymeleaf-layout-dialect.version&gt;
</code></pre>
<pre><code>application.yml:
</code></pre>
<pre><code class="language-yaml">spring:
  thymeleaf:
    mode: HTML
</code></pre>
<ul>
<li>数据库连接配置</li>
</ul>
<pre><code class="language-yaml">spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&amp;characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
</code></pre>
<ul>
<li>
<p>日志配置</p>
<p>application.yml:</p>
</li>
</ul>
<pre><code class="language-yaml">logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
</code></pre>
<p>​	logback-spring.xml：</p>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;configuration&gt;
    &lt;!--包含Spring boot对logback日志的默认配置--&gt;
    &lt;include resource=&quot;org/springframework/boot/logging/logback/defaults.xml&quot; /&gt;
    &lt;property name=&quot;LOG_FILE&quot; value=&quot;${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}&quot;/&gt;
    &lt;include resource=&quot;org/springframework/boot/logging/logback/console-appender.xml&quot; /&gt;

    &lt;!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置--&gt;
    &lt;appender name=&quot;TIME_FILE&quot;
              class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;
        &lt;encoder&gt;
            &lt;pattern&gt;${FILE_LOG_PATTERN}&lt;/pattern&gt;
        &lt;/encoder&gt;
        &lt;file&gt;${LOG_FILE}&lt;/file&gt;
        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;
            &lt;fileNamePattern&gt;${LOG_FILE}.%d{yyyy-MM-dd}.%i&lt;/fileNamePattern&gt;
            &lt;!--保留历史日志一个月的时间--&gt;
            &lt;maxHistory&gt;30&lt;/maxHistory&gt;
            &lt;!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            --&gt;
            &lt;timeBasedFileNamingAndTriggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;
                &lt;maxFileSize&gt;10MB&lt;/maxFileSize&gt;
            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;

        &lt;/rollingPolicy&gt;
    &lt;/appender&gt;

    &lt;root level=&quot;INFO&quot;&gt;
        &lt;appender-ref ref=&quot;CONSOLE&quot; /&gt;
        &lt;appender-ref ref=&quot;TIME_FILE&quot; /&gt;
    &lt;/root&gt;

&lt;/configuration&gt;
&lt;!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
--&gt;
</code></pre>
<ul>
<li>生产环境与开发环境配置
<ul>
<li>application-dev.yml</li>
<li>application-pro.yml</li>
</ul>
</li>
</ul>
<h3 id="32-异常处理">3.2 异常处理</h3>
<p><strong>1、定义错误页面</strong></p>
<ul>
<li>404</li>
<li>500</li>
<li>error</li>
</ul>
<p><strong>2、全局处理异常</strong></p>
<p>统一处理异常：</p>
<pre><code class="language-java">@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error(&quot;Request URL : {} , Exception : {}&quot;, request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject(&quot;url&quot;, request.getRequestURL());
        mav.addObject(&quot;exception&quot;, e);
        mav.setViewName(&quot;error/error&quot;);

        return mav;
    }
}
</code></pre>
<p>错误页面异常信息显示处理：</p>
<pre><code class="language-html">&lt;div&gt;
    &lt;div th:utext=&quot;'&amp;lt;!--'&quot; th:remove=&quot;tag&quot;&gt;&lt;/div&gt;
    &lt;div th:utext=&quot;'Failed Request URL : ' + ${url}&quot; th:remove=&quot;tag&quot;&gt;&lt;/div&gt;
    &lt;div th:utext=&quot;'Exception message : ' + ${exception.message}&quot; th:remove=&quot;tag&quot;&gt;&lt;/div&gt;
    &lt;ul th:remove=&quot;tag&quot;&gt;
        &lt;li th:each=&quot;st : ${exception.stackTrace}&quot; th:remove=&quot;tag&quot;&gt;&lt;span th:utext=&quot;${st}&quot; th:remove=&quot;tag&quot;&gt;&lt;/span&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;div th:utext=&quot;'--&amp;gt;'&quot; th:remove=&quot;tag&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<p><strong>3、资源找不到异常</strong></p>
<pre><code class="language-java">@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
</code></pre>
<h3 id="33-日志处理">3.3 日志处理</h3>
<p><strong>1、记录日志内容</strong></p>
<ul>
<li>请求 url</li>
<li>访问者 ip</li>
<li>调用方法 classMethod</li>
<li>参数 args</li>
<li>返回内容</li>
</ul>
<p><strong>2、记录日志类：</strong></p>
<pre><code class="language-java">@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut(&quot;execution(* com.imcoding.web.*.*(..))&quot;)
    public void log() {
    }

    @Before(&quot;log()&quot;)
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + &quot;.&quot; + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info(&quot;Rquest  ----- {}&quot;,reqeustLog);
    }

    @After(&quot;log()&quot;)
    public void doAfter() {
        //logger.info(&quot;---------- doAfter 2 ----------&quot;);
    }

    @AfterReturning(returning = &quot;result&quot;,pointcut = &quot;log()&quot;)
    public void doAtfertRturning(Object result) {
        logger.info(&quot;Return ------ {}&quot;,result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return &quot;ReqeustLog{&quot; +
                    &quot;url='&quot; + url + '\'' +
                    &quot;, ip='&quot; + ip + '\'' +
                    &quot;, classMethod='&quot; + classMethod + '\'' +
                    &quot;, args=&quot; + Arrays.toString(args) +
                    '}';
        }
    }

}
</code></pre>
<h3 id="34-页面处理">3.4 页面处理</h3>
<p><strong>1、静态页面导入project</strong></p>
<p><strong>2、thymeleaf布局</strong></p>
<ul>
<li>定义fragment</li>
<li>使用fragment布局</li>
</ul>
<p><strong>3、错误页面美化</strong></p>
<p>4、设计与规范</p>
<h3 id="41-实体设计">4.1 实体设计</h3>
<p><strong>实体类：</strong></p>
<ul>
<li>博客 Blog</li>
<li>博客分类 Type</li>
<li>博客标签 Tag</li>
<li>博客评论 Comment</li>
<li>用户 User</li>
</ul>
<p><strong>实体关系：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg" alt="" /></p>
<p><strong>评论类自关联关系：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg" alt="" /></p>
<p><strong>Blog类：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg" alt="" /></p>
<p><strong>Type类：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg" alt="" /></p>
<p><strong>Tag类：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg" alt="" /></p>
<p><strong>Comment类：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg" alt="" /></p>
<p><strong>User类：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg" alt="" /></p>
<h3 id="42-应用分层">4.2 应用分层</h3>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg" alt="" /></p>
<h3 id="43-命名约定">4.3 命名约定</h3>
<p><strong>Service/DAO层命名约定：</strong></p>
<ul>
<li>获取单个对象的方法用get做前缀。</li>
<li>获取多个对象的方法用list做前缀。</li>
<li>获取统计值的方法用count做前缀。</li>
<li>插入的方法用save(推荐)或insert做前缀。</li>
<li>删除的方法用remove(推荐)或delete做前缀。</li>
<li>修改的方法用update做前缀。</li>
</ul>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg" alt="" /></p>
<h2 id="5后台管理功能实现">5、后台管理功能实现</h2>
<h3 id="51-登录">5.1 登录</h3>
<p><strong>1、构建登录页面和后台管理首页</strong></p>
<p><strong>2、UserService和UserRepository</strong></p>
<p><strong>3、LoginController实现登录</strong></p>
<p><strong>4、MD5加密</strong></p>
<p><strong>5、登录拦截器</strong></p>
<h3 id="52-分类管理">5.2 分类管理</h3>
<p><strong>1、分类管理页面</strong></p>
<p><strong>2、分类列表分页</strong></p>
<pre><code class="language-javascript">{
  &quot;content&quot;:[
    {&quot;id&quot;:123,&quot;title&quot;:&quot;blog122&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:122,&quot;title&quot;:&quot;blog121&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:121,&quot;title&quot;:&quot;blog120&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:120,&quot;title&quot;:&quot;blog119&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:119,&quot;title&quot;:&quot;blog118&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:118,&quot;title&quot;:&quot;blog117&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:117,&quot;title&quot;:&quot;blog116&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:116,&quot;title&quot;:&quot;blog115&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:115,&quot;title&quot;:&quot;blog114&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:114,&quot;title&quot;:&quot;blog113&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:113,&quot;title&quot;:&quot;blog112&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:112,&quot;title&quot;:&quot;blog111&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:111,&quot;title&quot;:&quot;blog110&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:110,&quot;title&quot;:&quot;blog109&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:109,&quot;title&quot;:&quot;blog108&quot;,&quot;content&quot;:&quot;this is blog content&quot;}],
  &quot;last&quot;:false,
  &quot;totalPages&quot;:9,
  &quot;totalElements&quot;:123,
  &quot;size&quot;:15,
  &quot;number&quot;:0,
  &quot;first&quot;:true,
  &quot;sort&quot;:[{
    &quot;direction&quot;:&quot;DESC&quot;,
    &quot;property&quot;:&quot;id&quot;,
    &quot;ignoreCase&quot;:false,
    &quot;nullHandling&quot;:&quot;NATIVE&quot;,
    &quot;ascending&quot;:false
  }],
  &quot;numberOfElements&quot;:15
}
</code></pre>
<p><strong>3、分类新增、修改、删除</strong></p>
<h3 id="53-标签管理">5.3 标签管理</h3>
<h3 id="54-博客管理">5.4 博客管理</h3>
<p><strong>1、博客分页查询</strong></p>
<p><strong>2、博客新增</strong></p>
<p><strong>3、博客修改</strong></p>
<p><strong>4、博客删除</strong></p>
<h2 id="6前端展示功能实现">6、前端展示功能实现</h2>
<h3 id="61-首页展示">6.1 首页展示</h3>
<p><strong>1、博客列表</strong></p>
<p><strong>2、top分类</strong></p>
<p><strong>3、top标签</strong></p>
<p><strong>4、最新博客推荐</strong></p>
<p><strong>5、博客详情</strong></p>
<p><strong>1、Markdown 转换 HTML</strong></p>
<ul>
<li><a href="https://github.com/atlassian/commonmark-java" target="_blank">commonmark-java  https://github.com/atlassian/commonmark-java</a></li>
<li>pom.xml引用commonmark和扩展插件</li>
</ul>
<pre><code class="language-xml">&lt;dependency&gt;
   &lt;groupId&gt;com.atlassian.commonmark&lt;/groupId&gt;
   &lt;artifactId&gt;commonmark&lt;/artifactId&gt;
   &lt;version&gt;0.10.0&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
   &lt;groupId&gt;com.atlassian.commonmark&lt;/groupId&gt;
   &lt;artifactId&gt;commonmark-ext-heading-anchor&lt;/artifactId&gt;
   &lt;version&gt;0.10.0&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
   &lt;groupId&gt;com.atlassian.commonmark&lt;/groupId&gt;
   &lt;artifactId&gt;commonmark-ext-gfm-tables&lt;/artifactId&gt;
   &lt;version&gt;0.10.0&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<p><strong>2、评论功能</strong></p>
<ul>
<li>评论信息提交与回复功能</li>
<li>评论信息列表展示功能</li>
<li>管理员回复评论功能</li>
</ul>
<h3 id="62-分类页">6.2 分类页</h3>
<h3 id="63-标签页">6.3 标签页</h3>
<h3 id="64-归档页">6.4 归档页</h3>
<h3 id="65-关于我">6.5 关于我</h3>', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=15, isadmire=0, iscopyright=0, isrecommend=0, iscomment=1, issue=1, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=null, typeId=null, user=User{id=1, petname='程鑫', username='cx201125', password='dbd1a8bc623a690cd163ec0ade366995', mail='2543139363@qq.com', type=0, headportrait='/images/head.jpg', createtime=Wed Aug 26 18:02:27 CST 2020, updatetime=Wed Aug 26 18:02:30 CST 2020, blogs=[]}, type=Type{id=2, name='JAVA', blogs=[]}, tagsId='null', comments=[Comment{id=19, petname='程鑫', mail='2543139363@qq.com', headportrait='null', matter='null', createtime=null, blogId=null, blog=null, topId=null, top=null, bottom=[]}], tags=[Tag{id=1, name='mysql', Tag{id=4, name='spring']}}(String), blog(String)
2020-09-15 18:03:23.526 DEBUG 16504 --- [http-nio-8080-exec-8] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 18:03:23.913  INFO 16504 --- [http-nio-8080-exec-3] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/fragments/newblog', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.newblogs', args=[{}]}
2020-09-15 18:03:23.915 DEBUG 16504 --- [http-nio-8080-exec-3] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,3
2020-09-15 18:03:23.915 DEBUG 16504 --- [http-nio-8080-exec-3] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 18:03:23.918 DEBUG 16504 --- [http-nio-8080-exec-3] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 3
2020-09-15 18:03:23.920  INFO 16504 --- [http-nio-8080-exec-3] com.chenxin.blog.aspect.LogAspect        : Return ------ common/fragments :: newbloglist
2020-09-15 18:03:23.920 DEBUG 16504 --- [http-nio-8080-exec-3] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 18:03:23.921 DEBUG 16504 --- [http-nio-8080-exec-3] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/fragments/newblog(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.newblogs(String), {newblogs=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=16, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=16, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), common/fragments :: newbloglist(String)
2020-09-15 18:03:24.023 DEBUG 16504 --- [http-nio-8080-exec-3] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 18:06:10.099  INFO 16504 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/blog/19', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.BlogController.BlogPage', args=[19, {}]}
2020-09-15 18:06:10.103 DEBUG 16504 --- [http-nio-8080-exec-1] c.c.blog.mapper.BlogMapper.findBlogById  : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag, b.description,b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id, t.id t_id,t.name t_name,y.id y_id,y.name y_name,u.id u_id,u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime from cx_blog b LEFT JOIN cx_blog_tag bt ON b.id = bt.blog_id LEFT JOIN cx_type y ON b.type_id=y.id LEFT JOIN cx_tag t ON bt.tag_id=t.id LEFT JOIN cx_user u on b.user_id = u.id WHERE b.id=?
2020-09-15 18:06:10.104 DEBUG 16504 --- [http-nio-8080-exec-1] c.c.blog.mapper.BlogMapper.findBlogById  : ==> Parameters: 19(Long)
2020-09-15 18:06:10.108 DEBUG 16504 --- [http-nio-8080-exec-1] c.c.blog.mapper.BlogMapper.findBlogById  : <==      Total: 2
2020-09-15 18:06:10.113 DEBUG 16504 --- [http-nio-8080-exec-1] c.c.b.m.B.updateByPrimaryKeySelective    : ==>  Preparing: update cx_blog SET viewcount = ? where id = ?
2020-09-15 18:06:10.114 DEBUG 16504 --- [http-nio-8080-exec-1] c.c.b.m.B.updateByPrimaryKeySelective    : ==> Parameters: 17(Integer), 19(Long)
2020-09-15 18:06:10.220 DEBUG 16504 --- [http-nio-8080-exec-1] c.c.b.m.B.updateByPrimaryKeySelective    : <==    Updates: 1
2020-09-15 18:06:10.220  INFO 16504 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Return ------ blog
2020-09-15 18:06:10.220 DEBUG 16504 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 18:06:10.221 DEBUG 16504 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/blog/19(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.BlogController.BlogPage(String), 19,{blog=Blog{id=19, title='mysql数据库的查询拉', content='<h1 id="spring-boot开发小而美的个人博客">Spring Boot开发小而美的个人博客</h1>
<blockquote>
<p>作者：李仁密</p>
</blockquote>
<p><strong>个人博客功能：</strong></p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg" alt="" /></p>
<p><strong>技术组合：</strong></p>
<ul>
<li>后端：Spring Boot + JPA + thymeleaf模板</li>
<li>数据库：MySQL</li>
<li>前端UI：Semantic UI框架</li>
</ul>
<p><strong>工具与环境：</strong></p>
<ul>
<li>IDEA</li>
<li>Maven 3</li>
<li>JDK 8</li>
<li>Axure RP 8</li>
</ul>
<p><strong>课程内容模块：</strong></p>
<ul>
<li>需求分析与功能规划</li>
<li>页面设计与开发</li>
<li>技术框架搭建</li>
<li>后端管理功能实现</li>
<li>前端管理功能实现</li>
</ul>
<p><strong>你能学得什么？</strong></p>
<ul>
<li>基于Spring Boot的完整全栈式的开发套路</li>
<li>Semantic UI框架的使用</li>
<li>一套博客系统的源代码与设计</li>
</ul>
<h2 id="1需求与功能">1、需求与功能</h2>
<h3 id="11-用户故事">1.1 用户故事</h3>
<p>用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。</p>
<blockquote>
<p>用户故事最好是用户团队编写</p>
</blockquote>
<p><strong>用户故事模板</strong>：</p>
<ul>
<li>As a (role of user), I want (some feature) so that (some business value).</li>
<li>作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处</li>
</ul>
<p><strong>关键点</strong>：角色、功能、商业价值</p>
<p><strong>举例</strong>：</p>
<ul>
<li>作为一个招聘网站<strong>注册用户</strong>，我想<strong>查看最近3天发布的招聘信息</strong>，以便于<strong>了解最新的招聘信息</strong>。</li>
<li>作为公司，可以张贴新工作。</li>
</ul>
<p>个人博客系统的用户故事：</p>
<p>角色：<strong>普通访客</strong>，<strong>管理员（我）</strong></p>
<ul>
<li>访客，可以分页查看所有的博客</li>
<li>访客，可以快速查看博客数最多的6个分类</li>
<li>访客，可以查看所有的分类</li>
<li>访客，可以查看某个分类下的博客列表</li>
<li>访客，可以快速查看标记博客最多的10个标签</li>
<li>访客，可以查看所有的标签</li>
<li>访客，可以查看某个标签下的博客列表</li>
<li>访客，可以根据年度时间线查看博客列表</li>
<li>访客，可以快速查看最新的推荐博客</li>
<li>访客，可以用关键字全局搜索博客</li>
<li>访客，可以查看单个博客内容</li>
<li>访客，可以对博客内容进行评论</li>
<li>访客，可以赞赏博客内容</li>
<li>访客，可以微信扫码阅读博客内容</li>
<li>访客，可以在首页扫描公众号二维码关注我</li>
<li>我，可以用户名和密码登录后台管理</li>
<li>我，可以管理博客
<ul>
<li>我，可以发布新博客</li>
<li>我，可以对博客进行分类</li>
<li>我，可以对博客打标签</li>
<li>我，可以修改博客</li>
<li>我，可以删除博客</li>
<li>我，可以根据标题，分类，标签查询博客</li>
</ul>
</li>
<li>我，可以管理博客分类
<ul>
<li>我，可以新增一个分类</li>
<li>我，可以修改一个分类</li>
<li>我，可以删除一个分类</li>
<li>我，可以根据分类名称查询分类</li>
</ul>
</li>
<li>我，可以管理标签
<ul>
<li>我，可以新增一个标签</li>
<li>我，可以修改一个标签</li>
<li>我，可以删除一个标签</li>
<li>我，可以根据名称查询标签</li>
</ul>
</li>
</ul>
<h3 id="12-功能规划">1.2 功能规划</h3>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg" alt="" /></p>
<h2 id="2页面设计与开发">2、页面设计与开发</h2>
<h3 id="21-设计">2.1 设计</h3>
<p><strong>页面规划：</strong></p>
<p>前端展示：首页、详情页、分类、标签、归档、关于我</p>
<p>后台管理：模板页</p>
<h3 id="22-页面开发">2.2 页面开发</h3>
<p><a href="https://semantic-ui.com/" target="_blank">Semantic UI官网</a></p>
<p><a href="http://www.semantic-ui.cn/" target="_blank">Semantic UI中文官网</a></p>
<p><a href="https://imcoding.me/blogs/5" target="_blank">WebStorm下载与破解</a></p>
<p><a href="https://www.toptal.com/designers/subtlepatterns/" target="_blank">背景图片资源</a></p>
<h3 id="23-插件集成">2.3 插件集成</h3>
<p><a href="https://pandao.github.io/editor.md/" target="_blank">编辑器 Markdown</a></p>
<p><a href="https://github.com/sofish/typo.css" target="_blank">内容排版 typo.css</a></p>
<p><a href="https://daneden.github.io/animate.css/" target="_blank">动画 animate.css</a></p>
<p><a href="https://github.com/PrismJS/prism" target="_blank">代码高亮 prism</a></p>
<p><a href="https://tscanlin.github.io/tocbot/" target="_blank">目录生成 Tocbot</a></p>
<p><a href="http://imakewebthings.com/waypoints/" target="_blank">滚动侦测 waypoints</a></p>
<p><a href="https://github.com/flesler/jquery.scrollTo" target="_blank">平滑滚动 jquery.scrollTo</a></p>
<p><a href="https://davidshimjs.github.io/qrcodejs/" target="_blank">二维码生成 qrcode.js</a></p>
<h2 id="3框架搭建">3、框架搭建</h2>
<blockquote>
<p><a href="https://www.jetbrains.com/idea/" target="_blank">IDEA下载 https://www.jetbrains.com/idea/</a></p>
</blockquote>
<h3 id="31-构建与配置">3.1 构建与配置</h3>
<p><strong>1、引入Spring Boot模块：</strong></p>
<ul>
<li>web</li>
<li>Thymeleaf</li>
<li>JPA</li>
<li>MySQL</li>
<li>Aspects</li>
<li>DevTools</li>
</ul>
<p><strong>2、application.yml配置</strong></p>
<ul>
<li>
<p>使用 thymeleaf 3</p>
<p>pom.xml:</p>
</li>
</ul>
<pre><code class="language-xml">&lt;thymeleaf.version&gt;3.0.2.RELEASE&lt;/thymeleaf.version&gt;
&lt;thymeleaf-layout-dialect.version&gt;2.1.1&lt;/thymeleaf-layout-dialect.version&gt;
</code></pre>
<pre><code>application.yml:
</code></pre>
<pre><code class="language-yaml">spring:
  thymeleaf:
    mode: HTML
</code></pre>
<ul>
<li>数据库连接配置</li>
</ul>
<pre><code class="language-yaml">spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&amp;characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
</code></pre>
<ul>
<li>
<p>日志配置</p>
<p>application.yml:</p>
</li>
</ul>
<pre><code class="language-yaml">logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
</code></pre>
<p>​	logback-spring.xml：</p>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;configuration&gt;
    &lt;!--包含Spring boot对logback日志的默认配置--&gt;
    &lt;include resource=&quot;org/springframework/boot/logging/logback/defaults.xml&quot; /&gt;
    &lt;property name=&quot;LOG_FILE&quot; value=&quot;${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}&quot;/&gt;
    &lt;include resource=&quot;org/springframework/boot/logging/logback/console-appender.xml&quot; /&gt;

    &lt;!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置--&gt;
    &lt;appender name=&quot;TIME_FILE&quot;
              class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;
        &lt;encoder&gt;
            &lt;pattern&gt;${FILE_LOG_PATTERN}&lt;/pattern&gt;
        &lt;/encoder&gt;
        &lt;file&gt;${LOG_FILE}&lt;/file&gt;
        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;
            &lt;fileNamePattern&gt;${LOG_FILE}.%d{yyyy-MM-dd}.%i&lt;/fileNamePattern&gt;
            &lt;!--保留历史日志一个月的时间--&gt;
            &lt;maxHistory&gt;30&lt;/maxHistory&gt;
            &lt;!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            --&gt;
            &lt;timeBasedFileNamingAndTriggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;
                &lt;maxFileSize&gt;10MB&lt;/maxFileSize&gt;
            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;

        &lt;/rollingPolicy&gt;
    &lt;/appender&gt;

    &lt;root level=&quot;INFO&quot;&gt;
        &lt;appender-ref ref=&quot;CONSOLE&quot; /&gt;
        &lt;appender-ref ref=&quot;TIME_FILE&quot; /&gt;
    &lt;/root&gt;

&lt;/configuration&gt;
&lt;!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
--&gt;
</code></pre>
<ul>
<li>生产环境与开发环境配置
<ul>
<li>application-dev.yml</li>
<li>application-pro.yml</li>
</ul>
</li>
</ul>
<h3 id="32-异常处理">3.2 异常处理</h3>
<p><strong>1、定义错误页面</strong></p>
<ul>
<li>404</li>
<li>500</li>
<li>error</li>
</ul>
<p><strong>2、全局处理异常</strong></p>
<p>统一处理异常：</p>
<pre><code class="language-java">@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error(&quot;Request URL : {} , Exception : {}&quot;, request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject(&quot;url&quot;, request.getRequestURL());
        mav.addObject(&quot;exception&quot;, e);
        mav.setViewName(&quot;error/error&quot;);

        return mav;
    }
}
</code></pre>
<p>错误页面异常信息显示处理：</p>
<pre><code class="language-html">&lt;div&gt;
    &lt;div th:utext=&quot;'&amp;lt;!--'&quot; th:remove=&quot;tag&quot;&gt;&lt;/div&gt;
    &lt;div th:utext=&quot;'Failed Request URL : ' + ${url}&quot; th:remove=&quot;tag&quot;&gt;&lt;/div&gt;
    &lt;div th:utext=&quot;'Exception message : ' + ${exception.message}&quot; th:remove=&quot;tag&quot;&gt;&lt;/div&gt;
    &lt;ul th:remove=&quot;tag&quot;&gt;
        &lt;li th:each=&quot;st : ${exception.stackTrace}&quot; th:remove=&quot;tag&quot;&gt;&lt;span th:utext=&quot;${st}&quot; th:remove=&quot;tag&quot;&gt;&lt;/span&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;div th:utext=&quot;'--&amp;gt;'&quot; th:remove=&quot;tag&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<p><strong>3、资源找不到异常</strong></p>
<pre><code class="language-java">@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
</code></pre>
<h3 id="33-日志处理">3.3 日志处理</h3>
<p><strong>1、记录日志内容</strong></p>
<ul>
<li>请求 url</li>
<li>访问者 ip</li>
<li>调用方法 classMethod</li>
<li>参数 args</li>
<li>返回内容</li>
</ul>
<p><strong>2、记录日志类：</strong></p>
<pre><code class="language-java">@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut(&quot;execution(* com.imcoding.web.*.*(..))&quot;)
    public void log() {
    }

    @Before(&quot;log()&quot;)
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + &quot;.&quot; + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info(&quot;Rquest  ----- {}&quot;,reqeustLog);
    }

    @After(&quot;log()&quot;)
    public void doAfter() {
        //logger.info(&quot;---------- doAfter 2 ----------&quot;);
    }

    @AfterReturning(returning = &quot;result&quot;,pointcut = &quot;log()&quot;)
    public void doAtfertRturning(Object result) {
        logger.info(&quot;Return ------ {}&quot;,result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return &quot;ReqeustLog{&quot; +
                    &quot;url='&quot; + url + '\'' +
                    &quot;, ip='&quot; + ip + '\'' +
                    &quot;, classMethod='&quot; + classMethod + '\'' +
                    &quot;, args=&quot; + Arrays.toString(args) +
                    '}';
        }
    }

}
</code></pre>
<h3 id="34-页面处理">3.4 页面处理</h3>
<p><strong>1、静态页面导入project</strong></p>
<p><strong>2、thymeleaf布局</strong></p>
<ul>
<li>定义fragment</li>
<li>使用fragment布局</li>
</ul>
<p><strong>3、错误页面美化</strong></p>
<p>4、设计与规范</p>
<h3 id="41-实体设计">4.1 实体设计</h3>
<p><strong>实体类：</strong></p>
<ul>
<li>博客 Blog</li>
<li>博客分类 Type</li>
<li>博客标签 Tag</li>
<li>博客评论 Comment</li>
<li>用户 User</li>
</ul>
<p><strong>实体关系：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg" alt="" /></p>
<p><strong>评论类自关联关系：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg" alt="" /></p>
<p><strong>Blog类：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg" alt="" /></p>
<p><strong>Type类：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg" alt="" /></p>
<p><strong>Tag类：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg" alt="" /></p>
<p><strong>Comment类：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg" alt="" /></p>
<p><strong>User类：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg" alt="" /></p>
<h3 id="42-应用分层">4.2 应用分层</h3>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg" alt="" /></p>
<h3 id="43-命名约定">4.3 命名约定</h3>
<p><strong>Service/DAO层命名约定：</strong></p>
<ul>
<li>获取单个对象的方法用get做前缀。</li>
<li>获取多个对象的方法用list做前缀。</li>
<li>获取统计值的方法用count做前缀。</li>
<li>插入的方法用save(推荐)或insert做前缀。</li>
<li>删除的方法用remove(推荐)或delete做前缀。</li>
<li>修改的方法用update做前缀。</li>
</ul>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg" alt="" /></p>
<h2 id="5后台管理功能实现">5、后台管理功能实现</h2>
<h3 id="51-登录">5.1 登录</h3>
<p><strong>1、构建登录页面和后台管理首页</strong></p>
<p><strong>2、UserService和UserRepository</strong></p>
<p><strong>3、LoginController实现登录</strong></p>
<p><strong>4、MD5加密</strong></p>
<p><strong>5、登录拦截器</strong></p>
<h3 id="52-分类管理">5.2 分类管理</h3>
<p><strong>1、分类管理页面</strong></p>
<p><strong>2、分类列表分页</strong></p>
<pre><code class="language-javascript">{
  &quot;content&quot;:[
    {&quot;id&quot;:123,&quot;title&quot;:&quot;blog122&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:122,&quot;title&quot;:&quot;blog121&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:121,&quot;title&quot;:&quot;blog120&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:120,&quot;title&quot;:&quot;blog119&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:119,&quot;title&quot;:&quot;blog118&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:118,&quot;title&quot;:&quot;blog117&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:117,&quot;title&quot;:&quot;blog116&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:116,&quot;title&quot;:&quot;blog115&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:115,&quot;title&quot;:&quot;blog114&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:114,&quot;title&quot;:&quot;blog113&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:113,&quot;title&quot;:&quot;blog112&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:112,&quot;title&quot;:&quot;blog111&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:111,&quot;title&quot;:&quot;blog110&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:110,&quot;title&quot;:&quot;blog109&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:109,&quot;title&quot;:&quot;blog108&quot;,&quot;content&quot;:&quot;this is blog content&quot;}],
  &quot;last&quot;:false,
  &quot;totalPages&quot;:9,
  &quot;totalElements&quot;:123,
  &quot;size&quot;:15,
  &quot;number&quot;:0,
  &quot;first&quot;:true,
  &quot;sort&quot;:[{
    &quot;direction&quot;:&quot;DESC&quot;,
    &quot;property&quot;:&quot;id&quot;,
    &quot;ignoreCase&quot;:false,
    &quot;nullHandling&quot;:&quot;NATIVE&quot;,
    &quot;ascending&quot;:false
  }],
  &quot;numberOfElements&quot;:15
}
</code></pre>
<p><strong>3、分类新增、修改、删除</strong></p>
<h3 id="53-标签管理">5.3 标签管理</h3>
<h3 id="54-博客管理">5.4 博客管理</h3>
<p><strong>1、博客分页查询</strong></p>
<p><strong>2、博客新增</strong></p>
<p><strong>3、博客修改</strong></p>
<p><strong>4、博客删除</strong></p>
<h2 id="6前端展示功能实现">6、前端展示功能实现</h2>
<h3 id="61-首页展示">6.1 首页展示</h3>
<p><strong>1、博客列表</strong></p>
<p><strong>2、top分类</strong></p>
<p><strong>3、top标签</strong></p>
<p><strong>4、最新博客推荐</strong></p>
<p><strong>5、博客详情</strong></p>
<p><strong>1、Markdown 转换 HTML</strong></p>
<ul>
<li><a href="https://github.com/atlassian/commonmark-java" target="_blank">commonmark-java  https://github.com/atlassian/commonmark-java</a></li>
<li>pom.xml引用commonmark和扩展插件</li>
</ul>
<pre><code class="language-xml">&lt;dependency&gt;
   &lt;groupId&gt;com.atlassian.commonmark&lt;/groupId&gt;
   &lt;artifactId&gt;commonmark&lt;/artifactId&gt;
   &lt;version&gt;0.10.0&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
   &lt;groupId&gt;com.atlassian.commonmark&lt;/groupId&gt;
   &lt;artifactId&gt;commonmark-ext-heading-anchor&lt;/artifactId&gt;
   &lt;version&gt;0.10.0&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
   &lt;groupId&gt;com.atlassian.commonmark&lt;/groupId&gt;
   &lt;artifactId&gt;commonmark-ext-gfm-tables&lt;/artifactId&gt;
   &lt;version&gt;0.10.0&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<p><strong>2、评论功能</strong></p>
<ul>
<li>评论信息提交与回复功能</li>
<li>评论信息列表展示功能</li>
<li>管理员回复评论功能</li>
</ul>
<h3 id="62-分类页">6.2 分类页</h3>
<h3 id="63-标签页">6.3 标签页</h3>
<h3 id="64-归档页">6.4 归档页</h3>
<h3 id="65-关于我">6.5 关于我</h3>', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=16, isadmire=0, iscopyright=0, isrecommend=0, iscomment=1, issue=1, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=null, typeId=null, user=User{id=1, petname='程鑫', username='cx201125', password='dbd1a8bc623a690cd163ec0ade366995', mail='2543139363@qq.com', type=0, headportrait='/images/head.jpg', createtime=Wed Aug 26 18:02:27 CST 2020, updatetime=Wed Aug 26 18:02:30 CST 2020, blogs=[]}, type=Type{id=2, name='JAVA', blogs=[]}, tagsId='null', comments=[Comment{id=19, petname='程鑫', mail='2543139363@qq.com', headportrait='null', matter='null', createtime=null, blogId=null, blog=null, topId=null, top=null, bottom=[]}], tags=[Tag{id=1, name='mysql', Tag{id=4, name='spring']}}(String), blog(String)
2020-09-15 18:06:10.306 DEBUG 16504 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 18:06:10.367 ERROR 16504 --- [http-nio-8080-exec-1] org.thymeleaf.TemplateEngine             : [THYMELEAF][http-nio-8080-exec-1] Exception processing template "blog": An error happened during template parsing (template: "class path resource [templates/blog.html]" - line 565, col 7)

org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/blog.html]" - line 565, col 7)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:239)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1589)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.attoparser.ParseException: (Line = 565, Column = 7) Incomplete structure: "<a href="#comment-container" class="ui teal button" th:if="${blog.iscomment}==0>留言</a>
      <button class="ui wechat icon button"><i class="weixin icon"></i></button>
      <div id="toTop-button" class="ui icon button" ><i class="chevron up icon"></i></div>
    </div>
  </div>

  <div class="ui toc-container flowing popup transition hidden" style="width: 250px!important;">
    <ol class="js-toc">

    </ol>
  </div>

  <div id="qrcode" class="ui wechat-qr flowing popup transition hidden "style="width: 130px !important;">
    <!--<img src="./static/images/wechat.jpg" alt="" class="ui rounded image" style="width: 120px !important;">-->
  </div>



  <br>
  <br>
<!--底部footer-->
<footer th:replace="~{common/fragments::#footer}"></footer>

  <script src="../static/js/jquery-3.2.0.js"></script>
  <script src="../static/js/semantic.js"></script>
<script src="../static/js/jquery.scrollTo.js"></script>
  
<script src="../static/lib/prism/prism.js"></script>
<script src="../static/lib/tocbot/tocbot.min.js"></script>
<script src="../static/lib/qrcode/qrcode.min.js"></script>
<script src="../static/lib/waypoints/jquery.waypoints.min.js"></script>




  <script>

    $('.menu.toggle').click(function () {
      $('.m-item').toggleClass('m-mobile-hide');
    });

    $('#payButton').popup({
      popup : $('.payQR.popup'),
      on : 'click',
      position: 'bottom center'
    });

    tocbot.init({
      // Where to render the table of contents.
      tocSelector: '.js-toc',
      // Where to grab the headings to build the table of contents.
      contentSelector: '.js-toc-content',
      // Which headings to grab inside of the contentSelector element.
      headingSelector: 'h1, h2, h3',
    });

    $('.toc.button').popup({
      popup : $('.toc-container.popup'),
      on : 'click',
      position: 'left center'
    });

    $('.wechat').popup({
      popup : $('.wechat-qr'),
      position: 'left center'
    });

    var qrcode = new QRCode("qrcode", {
      text: "http://jindo.dev.naver.com/collie",
      width: 110,
      height: 110,
      colorDark : "#000000",
      colorLight : "#ffffff",
      correctLevel : QRCode.CorrectLevel.H
    });
    
    $('#toTop-button').click(function () {
      $(window).scrollTo(0,500);
    });


    var waypoint = new Waypoint({
      element: document.getElementById('waypoint'),
      handler: function(direction) {
        if (direction == 'down') {
          $('#toolbar').show(100);
        } else {
          $('#toolbar').hide(500);
        }
        console.log('Scrolled to waypoint!  ' + direction);
      }
    })
// $("#liuyan").click(function () {
//   var cc=document.getElementById("comment-container")
//   if(cc==null){
//     alert("博主关闭了留言功能")
//   }else{
//     $("#liuyan").href("#comment-container")
//   }

// })
//表单校验
    $('.ui.form').form({
      fields : {
        matter: {
          identifier: 'matter',
          rules: [{
            type: 'empty',
            prompt: '提示：请输入评论内容'
          }]
        },
        petname: {
          identifier: 'petname',
          rules: [{
            type: 'empty',
            prompt: '提示：请输入昵称'
          }]
        }
        ,
        mail: {
          identifier: 'mail',
          rules: [{
            type: 'email',
            prompt: '提示：请输入正确的邮箱'
          }]
        }

      }

    });

    $(function () {
        var blogid=[[${blog.id}]]
        var iscommend=[[${blog.iscomment}]]

      if(iscommend==0) {
        $("#commentlist").load("/comments/" + blogid);
      }
    })
    // 设置发布按钮的提交表单事件
    $('#commentsub_btn').click(function () {
      var boo= $('.ui.form').form('validate form')
      if(boo){

        postData()
      }else{

      }
    })
    // post提交数据的方法
    function postData() {
$("#commentlist").load("/comments",{
  // 提交的数据
  "topId":$("[name='topId']").val(),
  "blogId":$("[name='blogId']").val(),
  "matter":$("[name='matter']").val(),
  "petname":$("[name='petname']").val(),
  "mail":$("[name='mail']").val()
},function comeback(responseTxt,statusTxt,xhr) {
  $(window).scrollTo($('#comment-container'),500)
  $("[name='matter']").val('')
  $("[name='topId']").val(-1)
  $("[name='matter']").attr('placeholder','请输入...')
})
    }
    // 处理回复的逻辑
    function reply(obj) {
     var commentid= $(obj).data('commentid')
     var commentpetname= $(obj).data('commentpetname')
        //focus弹到对应的位置
        $("[name='matter']").attr('placeholder','@'+commentpetname).focus()
        $(window).scrollTo($('#comment-form'),500)
        //提交POST表单
        $("[name='topId']").val(commentid)

    }
  </script>
</body>
</html>"
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:366)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	... 51 common frames omitted

2020-09-15 18:06:10.392 ERROR 16504 --- [http-nio-8080-exec-1] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed; nested exception is org.thymeleaf.exceptions.TemplateInputException: An error happened during template parsing (template: "class path resource [templates/blog.html]" - line 565, col 7)] with root cause

org.attoparser.ParseException: (Line = 565, Column = 7) Incomplete structure: "<a href="#comment-container" class="ui teal button" th:if="${blog.iscomment}==0>留言</a>
      <button class="ui wechat icon button"><i class="weixin icon"></i></button>
      <div id="toTop-button" class="ui icon button" ><i class="chevron up icon"></i></div>
    </div>
  </div>

  <div class="ui toc-container flowing popup transition hidden" style="width: 250px!important;">
    <ol class="js-toc">

    </ol>
  </div>

  <div id="qrcode" class="ui wechat-qr flowing popup transition hidden "style="width: 130px !important;">
    <!--<img src="./static/images/wechat.jpg" alt="" class="ui rounded image" style="width: 120px !important;">-->
  </div>



  <br>
  <br>
<!--底部footer-->
<footer th:replace="~{common/fragments::#footer}"></footer>

  <script src="../static/js/jquery-3.2.0.js"></script>
  <script src="../static/js/semantic.js"></script>
<script src="../static/js/jquery.scrollTo.js"></script>
  
<script src="../static/lib/prism/prism.js"></script>
<script src="../static/lib/tocbot/tocbot.min.js"></script>
<script src="../static/lib/qrcode/qrcode.min.js"></script>
<script src="../static/lib/waypoints/jquery.waypoints.min.js"></script>




  <script>

    $('.menu.toggle').click(function () {
      $('.m-item').toggleClass('m-mobile-hide');
    });

    $('#payButton').popup({
      popup : $('.payQR.popup'),
      on : 'click',
      position: 'bottom center'
    });

    tocbot.init({
      // Where to render the table of contents.
      tocSelector: '.js-toc',
      // Where to grab the headings to build the table of contents.
      contentSelector: '.js-toc-content',
      // Which headings to grab inside of the contentSelector element.
      headingSelector: 'h1, h2, h3',
    });

    $('.toc.button').popup({
      popup : $('.toc-container.popup'),
      on : 'click',
      position: 'left center'
    });

    $('.wechat').popup({
      popup : $('.wechat-qr'),
      position: 'left center'
    });

    var qrcode = new QRCode("qrcode", {
      text: "http://jindo.dev.naver.com/collie",
      width: 110,
      height: 110,
      colorDark : "#000000",
      colorLight : "#ffffff",
      correctLevel : QRCode.CorrectLevel.H
    });
    
    $('#toTop-button').click(function () {
      $(window).scrollTo(0,500);
    });


    var waypoint = new Waypoint({
      element: document.getElementById('waypoint'),
      handler: function(direction) {
        if (direction == 'down') {
          $('#toolbar').show(100);
        } else {
          $('#toolbar').hide(500);
        }
        console.log('Scrolled to waypoint!  ' + direction);
      }
    })
// $("#liuyan").click(function () {
//   var cc=document.getElementById("comment-container")
//   if(cc==null){
//     alert("博主关闭了留言功能")
//   }else{
//     $("#liuyan").href("#comment-container")
//   }

// })
//表单校验
    $('.ui.form').form({
      fields : {
        matter: {
          identifier: 'matter',
          rules: [{
            type: 'empty',
            prompt: '提示：请输入评论内容'
          }]
        },
        petname: {
          identifier: 'petname',
          rules: [{
            type: 'empty',
            prompt: '提示：请输入昵称'
          }]
        }
        ,
        mail: {
          identifier: 'mail',
          rules: [{
            type: 'email',
            prompt: '提示：请输入正确的邮箱'
          }]
        }

      }

    });

    $(function () {
        var blogid=[[${blog.id}]]
        var iscommend=[[${blog.iscomment}]]

      if(iscommend==0) {
        $("#commentlist").load("/comments/" + blogid);
      }
    })
    // 设置发布按钮的提交表单事件
    $('#commentsub_btn').click(function () {
      var boo= $('.ui.form').form('validate form')
      if(boo){

        postData()
      }else{

      }
    })
    // post提交数据的方法
    function postData() {
$("#commentlist").load("/comments",{
  // 提交的数据
  "topId":$("[name='topId']").val(),
  "blogId":$("[name='blogId']").val(),
  "matter":$("[name='matter']").val(),
  "petname":$("[name='petname']").val(),
  "mail":$("[name='mail']").val()
},function comeback(responseTxt,statusTxt,xhr) {
  $(window).scrollTo($('#comment-container'),500)
  $("[name='matter']").val('')
  $("[name='topId']").val(-1)
  $("[name='matter']").attr('placeholder','请输入...')
})
    }
    // 处理回复的逻辑
    function reply(obj) {
     var commentid= $(obj).data('commentid')
     var commentpetname= $(obj).data('commentpetname')
        //focus弹到对应的位置
        $("[name='matter']").attr('placeholder','@'+commentpetname).focus()
        $(window).scrollTo($('#comment-form'),500)
        //提交POST表单
        $("[name='topId']").val(commentid)

    }
  </script>
</body>
</html>"
	at org.attoparser.MarkupParser.parseDocument(MarkupParser.java:366)
	at org.attoparser.MarkupParser.parse(MarkupParser.java:257)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parse(AbstractMarkupTemplateParser.java:230)
	at org.thymeleaf.templateparser.markup.AbstractMarkupTemplateParser.parseStandalone(AbstractMarkupTemplateParser.java:100)
	at org.thymeleaf.engine.TemplateManager.parseAndProcess(TemplateManager.java:666)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1098)
	at org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1072)
	at org.thymeleaf.spring5.view.ThymeleafView.renderFragment(ThymeleafView.java:362)
	at org.thymeleaf.spring5.view.ThymeleafView.render(ThymeleafView.java:189)
	at org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1373)
	at org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1118)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1057)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:943)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1006)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:898)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:626)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:883)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:733)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at com.alibaba.druid.support.http.WebStatFilter.doFilter(WebStatFilter.java:123)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:541)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:373)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:868)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1589)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)

2020-09-15 18:06:10.424 ERROR 16504 --- [http-nio-8080-exec-1] s.e.ErrorMvcAutoConfiguration$StaticView : Cannot render error page for request [/blog/19] and exception [An error happened during template parsing (template: "class path resource [templates/blog.html]" - line 565, col 7)] as the response has already been committed. As a result, the response may have the wrong status code.
2020-09-15 18:08:04.890  INFO 17196 --- [restartedMain] com.chenxin.blog.BlogApplication         : Starting BlogApplication on LAPTOP-UGEIKVSJ with PID 17196 (D:\Program Files\idea-workaplace\blog\target\classes started by asus in D:\Program Files\idea-workaplace\blog)
2020-09-15 18:08:04.892 DEBUG 17196 --- [restartedMain] com.chenxin.blog.BlogApplication         : Running with Spring Boot v2.3.3.RELEASE, Spring v5.2.8.RELEASE
2020-09-15 18:08:04.893  INFO 17196 --- [restartedMain] com.chenxin.blog.BlogApplication         : The following profiles are active: dev
2020-09-15 18:08:04.949  INFO 17196 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-09-15 18:08:04.949  INFO 17196 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-09-15 18:08:06.603  INFO 17196 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-09-15 18:08:06.610  INFO 17196 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-09-15 18:08:06.662  INFO 17196 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 21ms. Found 0 Redis repository interfaces.
2020-09-15 18:08:07.532  INFO 17196 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-09-15 18:08:07.539  INFO 17196 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-09-15 18:08:07.540  INFO 17196 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.37]
2020-09-15 18:08:07.630  INFO 17196 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-09-15 18:08:07.630  INFO 17196 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 2681 ms
2020-09-15 18:08:08.940  INFO 17196 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-09-15 18:08:09.033  INFO 17196 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-09-15 18:08:09.615  INFO 17196 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-09-15 18:08:09.660  INFO 17196 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-09-15 18:08:09.668  INFO 17196 --- [restartedMain] com.chenxin.blog.BlogApplication         : Started BlogApplication in 5.581 seconds (JVM running for 7.527)
2020-09-15 18:08:16.029  INFO 17196 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-09-15 18:08:16.029  INFO 17196 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-09-15 18:08:16.039  INFO 17196 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 10 ms
2020-09-15 18:08:16.067  INFO 17196 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/blog/19', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.BlogController.BlogPage', args=[19, {}]}
2020-09-15 18:08:16.905  INFO 17196 --- [http-nio-8080-exec-1] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-09-15 18:08:16.909 DEBUG 17196 --- [http-nio-8080-exec-1] c.c.blog.mapper.BlogMapper.findBlogById  : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag, b.description,b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id, t.id t_id,t.name t_name,y.id y_id,y.name y_name,u.id u_id,u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime from cx_blog b LEFT JOIN cx_blog_tag bt ON b.id = bt.blog_id LEFT JOIN cx_type y ON b.type_id=y.id LEFT JOIN cx_tag t ON bt.tag_id=t.id LEFT JOIN cx_user u on b.user_id = u.id WHERE b.id=?
2020-09-15 18:08:17.020 DEBUG 17196 --- [http-nio-8080-exec-1] c.c.blog.mapper.BlogMapper.findBlogById  : ==> Parameters: 19(Long)
2020-09-15 18:08:17.052 DEBUG 17196 --- [http-nio-8080-exec-1] c.c.blog.mapper.BlogMapper.findBlogById  : <==      Total: 2
2020-09-15 18:08:17.144 DEBUG 17196 --- [http-nio-8080-exec-1] c.c.b.m.B.updateByPrimaryKeySelective    : ==>  Preparing: update cx_blog SET viewcount = ? where id = ?
2020-09-15 18:08:17.148 DEBUG 17196 --- [http-nio-8080-exec-1] c.c.b.m.B.updateByPrimaryKeySelective    : ==> Parameters: 18(Integer), 19(Long)
2020-09-15 18:08:17.194 DEBUG 17196 --- [http-nio-8080-exec-1] c.c.b.m.B.updateByPrimaryKeySelective    : <==    Updates: 1
2020-09-15 18:08:17.195  INFO 17196 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Return ------ blog
2020-09-15 18:08:17.196 DEBUG 17196 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 18:08:17.199 DEBUG 17196 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/blog/19(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.BlogController.BlogPage(String), 19,{blog=Blog{id=19, title='mysql数据库的查询拉', content='<h1 id="spring-boot开发小而美的个人博客">Spring Boot开发小而美的个人博客</h1>
<blockquote>
<p>作者：李仁密</p>
</blockquote>
<p><strong>个人博客功能：</strong></p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg" alt="" /></p>
<p><strong>技术组合：</strong></p>
<ul>
<li>后端：Spring Boot + JPA + thymeleaf模板</li>
<li>数据库：MySQL</li>
<li>前端UI：Semantic UI框架</li>
</ul>
<p><strong>工具与环境：</strong></p>
<ul>
<li>IDEA</li>
<li>Maven 3</li>
<li>JDK 8</li>
<li>Axure RP 8</li>
</ul>
<p><strong>课程内容模块：</strong></p>
<ul>
<li>需求分析与功能规划</li>
<li>页面设计与开发</li>
<li>技术框架搭建</li>
<li>后端管理功能实现</li>
<li>前端管理功能实现</li>
</ul>
<p><strong>你能学得什么？</strong></p>
<ul>
<li>基于Spring Boot的完整全栈式的开发套路</li>
<li>Semantic UI框架的使用</li>
<li>一套博客系统的源代码与设计</li>
</ul>
<h2 id="1需求与功能">1、需求与功能</h2>
<h3 id="11-用户故事">1.1 用户故事</h3>
<p>用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。</p>
<blockquote>
<p>用户故事最好是用户团队编写</p>
</blockquote>
<p><strong>用户故事模板</strong>：</p>
<ul>
<li>As a (role of user), I want (some feature) so that (some business value).</li>
<li>作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处</li>
</ul>
<p><strong>关键点</strong>：角色、功能、商业价值</p>
<p><strong>举例</strong>：</p>
<ul>
<li>作为一个招聘网站<strong>注册用户</strong>，我想<strong>查看最近3天发布的招聘信息</strong>，以便于<strong>了解最新的招聘信息</strong>。</li>
<li>作为公司，可以张贴新工作。</li>
</ul>
<p>个人博客系统的用户故事：</p>
<p>角色：<strong>普通访客</strong>，<strong>管理员（我）</strong></p>
<ul>
<li>访客，可以分页查看所有的博客</li>
<li>访客，可以快速查看博客数最多的6个分类</li>
<li>访客，可以查看所有的分类</li>
<li>访客，可以查看某个分类下的博客列表</li>
<li>访客，可以快速查看标记博客最多的10个标签</li>
<li>访客，可以查看所有的标签</li>
<li>访客，可以查看某个标签下的博客列表</li>
<li>访客，可以根据年度时间线查看博客列表</li>
<li>访客，可以快速查看最新的推荐博客</li>
<li>访客，可以用关键字全局搜索博客</li>
<li>访客，可以查看单个博客内容</li>
<li>访客，可以对博客内容进行评论</li>
<li>访客，可以赞赏博客内容</li>
<li>访客，可以微信扫码阅读博客内容</li>
<li>访客，可以在首页扫描公众号二维码关注我</li>
<li>我，可以用户名和密码登录后台管理</li>
<li>我，可以管理博客
<ul>
<li>我，可以发布新博客</li>
<li>我，可以对博客进行分类</li>
<li>我，可以对博客打标签</li>
<li>我，可以修改博客</li>
<li>我，可以删除博客</li>
<li>我，可以根据标题，分类，标签查询博客</li>
</ul>
</li>
<li>我，可以管理博客分类
<ul>
<li>我，可以新增一个分类</li>
<li>我，可以修改一个分类</li>
<li>我，可以删除一个分类</li>
<li>我，可以根据分类名称查询分类</li>
</ul>
</li>
<li>我，可以管理标签
<ul>
<li>我，可以新增一个标签</li>
<li>我，可以修改一个标签</li>
<li>我，可以删除一个标签</li>
<li>我，可以根据名称查询标签</li>
</ul>
</li>
</ul>
<h3 id="12-功能规划">1.2 功能规划</h3>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg" alt="" /></p>
<h2 id="2页面设计与开发">2、页面设计与开发</h2>
<h3 id="21-设计">2.1 设计</h3>
<p><strong>页面规划：</strong></p>
<p>前端展示：首页、详情页、分类、标签、归档、关于我</p>
<p>后台管理：模板页</p>
<h3 id="22-页面开发">2.2 页面开发</h3>
<p><a href="https://semantic-ui.com/" target="_blank">Semantic UI官网</a></p>
<p><a href="http://www.semantic-ui.cn/" target="_blank">Semantic UI中文官网</a></p>
<p><a href="https://imcoding.me/blogs/5" target="_blank">WebStorm下载与破解</a></p>
<p><a href="https://www.toptal.com/designers/subtlepatterns/" target="_blank">背景图片资源</a></p>
<h3 id="23-插件集成">2.3 插件集成</h3>
<p><a href="https://pandao.github.io/editor.md/" target="_blank">编辑器 Markdown</a></p>
<p><a href="https://github.com/sofish/typo.css" target="_blank">内容排版 typo.css</a></p>
<p><a href="https://daneden.github.io/animate.css/" target="_blank">动画 animate.css</a></p>
<p><a href="https://github.com/PrismJS/prism" target="_blank">代码高亮 prism</a></p>
<p><a href="https://tscanlin.github.io/tocbot/" target="_blank">目录生成 Tocbot</a></p>
<p><a href="http://imakewebthings.com/waypoints/" target="_blank">滚动侦测 waypoints</a></p>
<p><a href="https://github.com/flesler/jquery.scrollTo" target="_blank">平滑滚动 jquery.scrollTo</a></p>
<p><a href="https://davidshimjs.github.io/qrcodejs/" target="_blank">二维码生成 qrcode.js</a></p>
<h2 id="3框架搭建">3、框架搭建</h2>
<blockquote>
<p><a href="https://www.jetbrains.com/idea/" target="_blank">IDEA下载 https://www.jetbrains.com/idea/</a></p>
</blockquote>
<h3 id="31-构建与配置">3.1 构建与配置</h3>
<p><strong>1、引入Spring Boot模块：</strong></p>
<ul>
<li>web</li>
<li>Thymeleaf</li>
<li>JPA</li>
<li>MySQL</li>
<li>Aspects</li>
<li>DevTools</li>
</ul>
<p><strong>2、application.yml配置</strong></p>
<ul>
<li>
<p>使用 thymeleaf 3</p>
<p>pom.xml:</p>
</li>
</ul>
<pre><code class="language-xml">&lt;thymeleaf.version&gt;3.0.2.RELEASE&lt;/thymeleaf.version&gt;
&lt;thymeleaf-layout-dialect.version&gt;2.1.1&lt;/thymeleaf-layout-dialect.version&gt;
</code></pre>
<pre><code>application.yml:
</code></pre>
<pre><code class="language-yaml">spring:
  thymeleaf:
    mode: HTML
</code></pre>
<ul>
<li>数据库连接配置</li>
</ul>
<pre><code class="language-yaml">spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&amp;characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
</code></pre>
<ul>
<li>
<p>日志配置</p>
<p>application.yml:</p>
</li>
</ul>
<pre><code class="language-yaml">logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
</code></pre>
<p>​	logback-spring.xml：</p>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;configuration&gt;
    &lt;!--包含Spring boot对logback日志的默认配置--&gt;
    &lt;include resource=&quot;org/springframework/boot/logging/logback/defaults.xml&quot; /&gt;
    &lt;property name=&quot;LOG_FILE&quot; value=&quot;${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}&quot;/&gt;
    &lt;include resource=&quot;org/springframework/boot/logging/logback/console-appender.xml&quot; /&gt;

    &lt;!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置--&gt;
    &lt;appender name=&quot;TIME_FILE&quot;
              class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;
        &lt;encoder&gt;
            &lt;pattern&gt;${FILE_LOG_PATTERN}&lt;/pattern&gt;
        &lt;/encoder&gt;
        &lt;file&gt;${LOG_FILE}&lt;/file&gt;
        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;
            &lt;fileNamePattern&gt;${LOG_FILE}.%d{yyyy-MM-dd}.%i&lt;/fileNamePattern&gt;
            &lt;!--保留历史日志一个月的时间--&gt;
            &lt;maxHistory&gt;30&lt;/maxHistory&gt;
            &lt;!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            --&gt;
            &lt;timeBasedFileNamingAndTriggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;
                &lt;maxFileSize&gt;10MB&lt;/maxFileSize&gt;
            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;

        &lt;/rollingPolicy&gt;
    &lt;/appender&gt;

    &lt;root level=&quot;INFO&quot;&gt;
        &lt;appender-ref ref=&quot;CONSOLE&quot; /&gt;
        &lt;appender-ref ref=&quot;TIME_FILE&quot; /&gt;
    &lt;/root&gt;

&lt;/configuration&gt;
&lt;!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
--&gt;
</code></pre>
<ul>
<li>生产环境与开发环境配置
<ul>
<li>application-dev.yml</li>
<li>application-pro.yml</li>
</ul>
</li>
</ul>
<h3 id="32-异常处理">3.2 异常处理</h3>
<p><strong>1、定义错误页面</strong></p>
<ul>
<li>404</li>
<li>500</li>
<li>error</li>
</ul>
<p><strong>2、全局处理异常</strong></p>
<p>统一处理异常：</p>
<pre><code class="language-java">@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error(&quot;Request URL : {} , Exception : {}&quot;, request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject(&quot;url&quot;, request.getRequestURL());
        mav.addObject(&quot;exception&quot;, e);
        mav.setViewName(&quot;error/error&quot;);

        return mav;
    }
}
</code></pre>
<p>错误页面异常信息显示处理：</p>
<pre><code class="language-html">&lt;div&gt;
    &lt;div th:utext=&quot;'&amp;lt;!--'&quot; th:remove=&quot;tag&quot;&gt;&lt;/div&gt;
    &lt;div th:utext=&quot;'Failed Request URL : ' + ${url}&quot; th:remove=&quot;tag&quot;&gt;&lt;/div&gt;
    &lt;div th:utext=&quot;'Exception message : ' + ${exception.message}&quot; th:remove=&quot;tag&quot;&gt;&lt;/div&gt;
    &lt;ul th:remove=&quot;tag&quot;&gt;
        &lt;li th:each=&quot;st : ${exception.stackTrace}&quot; th:remove=&quot;tag&quot;&gt;&lt;span th:utext=&quot;${st}&quot; th:remove=&quot;tag&quot;&gt;&lt;/span&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;div th:utext=&quot;'--&amp;gt;'&quot; th:remove=&quot;tag&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<p><strong>3、资源找不到异常</strong></p>
<pre><code class="language-java">@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
</code></pre>
<h3 id="33-日志处理">3.3 日志处理</h3>
<p><strong>1、记录日志内容</strong></p>
<ul>
<li>请求 url</li>
<li>访问者 ip</li>
<li>调用方法 classMethod</li>
<li>参数 args</li>
<li>返回内容</li>
</ul>
<p><strong>2、记录日志类：</strong></p>
<pre><code class="language-java">@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut(&quot;execution(* com.imcoding.web.*.*(..))&quot;)
    public void log() {
    }

    @Before(&quot;log()&quot;)
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + &quot;.&quot; + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info(&quot;Rquest  ----- {}&quot;,reqeustLog);
    }

    @After(&quot;log()&quot;)
    public void doAfter() {
        //logger.info(&quot;---------- doAfter 2 ----------&quot;);
    }

    @AfterReturning(returning = &quot;result&quot;,pointcut = &quot;log()&quot;)
    public void doAtfertRturning(Object result) {
        logger.info(&quot;Return ------ {}&quot;,result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return &quot;ReqeustLog{&quot; +
                    &quot;url='&quot; + url + '\'' +
                    &quot;, ip='&quot; + ip + '\'' +
                    &quot;, classMethod='&quot; + classMethod + '\'' +
                    &quot;, args=&quot; + Arrays.toString(args) +
                    '}';
        }
    }

}
</code></pre>
<h3 id="34-页面处理">3.4 页面处理</h3>
<p><strong>1、静态页面导入project</strong></p>
<p><strong>2、thymeleaf布局</strong></p>
<ul>
<li>定义fragment</li>
<li>使用fragment布局</li>
</ul>
<p><strong>3、错误页面美化</strong></p>
<p>4、设计与规范</p>
<h3 id="41-实体设计">4.1 实体设计</h3>
<p><strong>实体类：</strong></p>
<ul>
<li>博客 Blog</li>
<li>博客分类 Type</li>
<li>博客标签 Tag</li>
<li>博客评论 Comment</li>
<li>用户 User</li>
</ul>
<p><strong>实体关系：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg" alt="" /></p>
<p><strong>评论类自关联关系：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg" alt="" /></p>
<p><strong>Blog类：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg" alt="" /></p>
<p><strong>Type类：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg" alt="" /></p>
<p><strong>Tag类：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg" alt="" /></p>
<p><strong>Comment类：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg" alt="" /></p>
<p><strong>User类：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg" alt="" /></p>
<h3 id="42-应用分层">4.2 应用分层</h3>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg" alt="" /></p>
<h3 id="43-命名约定">4.3 命名约定</h3>
<p><strong>Service/DAO层命名约定：</strong></p>
<ul>
<li>获取单个对象的方法用get做前缀。</li>
<li>获取多个对象的方法用list做前缀。</li>
<li>获取统计值的方法用count做前缀。</li>
<li>插入的方法用save(推荐)或insert做前缀。</li>
<li>删除的方法用remove(推荐)或delete做前缀。</li>
<li>修改的方法用update做前缀。</li>
</ul>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg" alt="" /></p>
<h2 id="5后台管理功能实现">5、后台管理功能实现</h2>
<h3 id="51-登录">5.1 登录</h3>
<p><strong>1、构建登录页面和后台管理首页</strong></p>
<p><strong>2、UserService和UserRepository</strong></p>
<p><strong>3、LoginController实现登录</strong></p>
<p><strong>4、MD5加密</strong></p>
<p><strong>5、登录拦截器</strong></p>
<h3 id="52-分类管理">5.2 分类管理</h3>
<p><strong>1、分类管理页面</strong></p>
<p><strong>2、分类列表分页</strong></p>
<pre><code class="language-javascript">{
  &quot;content&quot;:[
    {&quot;id&quot;:123,&quot;title&quot;:&quot;blog122&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:122,&quot;title&quot;:&quot;blog121&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:121,&quot;title&quot;:&quot;blog120&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:120,&quot;title&quot;:&quot;blog119&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:119,&quot;title&quot;:&quot;blog118&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:118,&quot;title&quot;:&quot;blog117&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:117,&quot;title&quot;:&quot;blog116&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:116,&quot;title&quot;:&quot;blog115&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:115,&quot;title&quot;:&quot;blog114&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:114,&quot;title&quot;:&quot;blog113&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:113,&quot;title&quot;:&quot;blog112&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:112,&quot;title&quot;:&quot;blog111&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:111,&quot;title&quot;:&quot;blog110&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:110,&quot;title&quot;:&quot;blog109&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:109,&quot;title&quot;:&quot;blog108&quot;,&quot;content&quot;:&quot;this is blog content&quot;}],
  &quot;last&quot;:false,
  &quot;totalPages&quot;:9,
  &quot;totalElements&quot;:123,
  &quot;size&quot;:15,
  &quot;number&quot;:0,
  &quot;first&quot;:true,
  &quot;sort&quot;:[{
    &quot;direction&quot;:&quot;DESC&quot;,
    &quot;property&quot;:&quot;id&quot;,
    &quot;ignoreCase&quot;:false,
    &quot;nullHandling&quot;:&quot;NATIVE&quot;,
    &quot;ascending&quot;:false
  }],
  &quot;numberOfElements&quot;:15
}
</code></pre>
<p><strong>3、分类新增、修改、删除</strong></p>
<h3 id="53-标签管理">5.3 标签管理</h3>
<h3 id="54-博客管理">5.4 博客管理</h3>
<p><strong>1、博客分页查询</strong></p>
<p><strong>2、博客新增</strong></p>
<p><strong>3、博客修改</strong></p>
<p><strong>4、博客删除</strong></p>
<h2 id="6前端展示功能实现">6、前端展示功能实现</h2>
<h3 id="61-首页展示">6.1 首页展示</h3>
<p><strong>1、博客列表</strong></p>
<p><strong>2、top分类</strong></p>
<p><strong>3、top标签</strong></p>
<p><strong>4、最新博客推荐</strong></p>
<p><strong>5、博客详情</strong></p>
<p><strong>1、Markdown 转换 HTML</strong></p>
<ul>
<li><a href="https://github.com/atlassian/commonmark-java" target="_blank">commonmark-java  https://github.com/atlassian/commonmark-java</a></li>
<li>pom.xml引用commonmark和扩展插件</li>
</ul>
<pre><code class="language-xml">&lt;dependency&gt;
   &lt;groupId&gt;com.atlassian.commonmark&lt;/groupId&gt;
   &lt;artifactId&gt;commonmark&lt;/artifactId&gt;
   &lt;version&gt;0.10.0&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
   &lt;groupId&gt;com.atlassian.commonmark&lt;/groupId&gt;
   &lt;artifactId&gt;commonmark-ext-heading-anchor&lt;/artifactId&gt;
   &lt;version&gt;0.10.0&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
   &lt;groupId&gt;com.atlassian.commonmark&lt;/groupId&gt;
   &lt;artifactId&gt;commonmark-ext-gfm-tables&lt;/artifactId&gt;
   &lt;version&gt;0.10.0&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<p><strong>2、评论功能</strong></p>
<ul>
<li>评论信息提交与回复功能</li>
<li>评论信息列表展示功能</li>
<li>管理员回复评论功能</li>
</ul>
<h3 id="62-分类页">6.2 分类页</h3>
<h3 id="63-标签页">6.3 标签页</h3>
<h3 id="64-归档页">6.4 归档页</h3>
<h3 id="65-关于我">6.5 关于我</h3>', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=17, isadmire=0, iscopyright=0, isrecommend=0, iscomment=1, issue=1, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=null, typeId=null, user=User{id=1, petname='程鑫', username='cx201125', password='dbd1a8bc623a690cd163ec0ade366995', mail='2543139363@qq.com', type=0, headportrait='/images/head.jpg', createtime=Wed Aug 26 18:02:27 CST 2020, updatetime=Wed Aug 26 18:02:30 CST 2020, blogs=[]}, type=Type{id=2, name='JAVA', blogs=[]}, tagsId='null', comments=[Comment{id=19, petname='程鑫', mail='2543139363@qq.com', headportrait='null', matter='null', createtime=null, blogId=null, blog=null, topId=null, top=null, bottom=[]}], tags=[Tag{id=1, name='mysql', Tag{id=4, name='spring']}}(String), blog(String)
2020-09-15 18:08:17.261 DEBUG 17196 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 18:08:18.169  INFO 17196 --- [http-nio-8080-exec-7] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/fragments/newblog', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.newblogs', args=[{}]}
2020-09-15 18:08:18.184 DEBUG 17196 --- [http-nio-8080-exec-7] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,3
2020-09-15 18:08:18.188 DEBUG 17196 --- [http-nio-8080-exec-7] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 18:08:18.195 DEBUG 17196 --- [http-nio-8080-exec-7] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 3
2020-09-15 18:08:18.196  INFO 17196 --- [http-nio-8080-exec-7] com.chenxin.blog.aspect.LogAspect        : Return ------ common/fragments :: newbloglist
2020-09-15 18:08:18.197 DEBUG 17196 --- [http-nio-8080-exec-7] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 18:08:18.199 DEBUG 17196 --- [http-nio-8080-exec-7] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/fragments/newblog(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.newblogs(String), {newblogs=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=18, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=16, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), common/fragments :: newbloglist(String)
2020-09-15 18:08:18.270 DEBUG 17196 --- [http-nio-8080-exec-7] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 18:10:31.809  INFO 17196 --- [http-nio-8080-exec-10] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/about', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.AboutController.about', args=[{}]}
2020-09-15 18:10:31.813  INFO 17196 --- [http-nio-8080-exec-10] com.chenxin.blog.aspect.LogAspect        : Return ------ about
2020-09-15 18:10:31.820 DEBUG 17196 --- [http-nio-8080-exec-10] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 18:10:31.820 DEBUG 17196 --- [http-nio-8080-exec-10] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/about(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.AboutController.about(String), {about=About{petname='程鑫', intro_1='一个独立开发者，折腾在 0 和 1 世界的大叔；一个终身学习者，誓将学习无限循环. 希望结识可以共同成长的小伙伴.', intro_2='热爱编程，喜欢折腾，正在探索高效学习编程技术的方法...', loves=[篮球, 编程, 跑步, 王者], skill=[java, javaScript, Node, mysql, spring, Redis, Linux]}}(String), about(String)
2020-09-15 18:10:31.892 DEBUG 17196 --- [http-nio-8080-exec-10] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 18:10:32.332  INFO 17196 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/fragments/newblog', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.newblogs', args=[{}]}
2020-09-15 18:10:32.334 DEBUG 17196 --- [http-nio-8080-exec-1] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,3
2020-09-15 18:10:32.334 DEBUG 17196 --- [http-nio-8080-exec-1] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 18:10:32.340 DEBUG 17196 --- [http-nio-8080-exec-1] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 3
2020-09-15 18:10:32.344  INFO 17196 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Return ------ common/fragments :: newbloglist
2020-09-15 18:10:32.345 DEBUG 17196 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 18:10:32.348 DEBUG 17196 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/fragments/newblog(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.newblogs(String), {newblogs=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=18, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=16, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), common/fragments :: newbloglist(String)
2020-09-15 18:10:32.394 DEBUG 17196 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 18:12:41.313  INFO 17196 --- [http-nio-8080-exec-9] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://192.168.246.1:8080/about', ip='192.168.246.1', classMethod='com.chenxin.blog.controller.AboutController.about', args=[{}]}
2020-09-15 18:12:41.313  INFO 17196 --- [http-nio-8080-exec-9] com.chenxin.blog.aspect.LogAspect        : Return ------ about
2020-09-15 18:12:41.317 DEBUG 17196 --- [http-nio-8080-exec-9] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 18:12:41.318 DEBUG 17196 --- [http-nio-8080-exec-9] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://192.168.246.1:8080/about(String), 192.168.246.1(String), com.chenxin.blog.controller.AboutController.about(String), {about=About{petname='程鑫', intro_1='一个独立开发者，折腾在 0 和 1 世界的大叔；一个终身学习者，誓将学习无限循环. 希望结识可以共同成长的小伙伴.', intro_2='热爱编程，喜欢折腾，正在探索高效学习编程技术的方法...', loves=[篮球, 编程, 跑步, 王者], skill=[java, javaScript, Node, mysql, spring, Redis, Linux]}}(String), about(String)
2020-09-15 18:12:41.400 DEBUG 17196 --- [http-nio-8080-exec-9] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 18:12:41.918  INFO 17196 --- [http-nio-8080-exec-4] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://192.168.246.1:8080/fragments/newblog', ip='192.168.246.1', classMethod='com.chenxin.blog.controller.IndexController.newblogs', args=[{}]}
2020-09-15 18:12:41.919 DEBUG 17196 --- [http-nio-8080-exec-4] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,3
2020-09-15 18:12:41.919 DEBUG 17196 --- [http-nio-8080-exec-4] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 18:12:41.926 DEBUG 17196 --- [http-nio-8080-exec-4] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 3
2020-09-15 18:12:41.927  INFO 17196 --- [http-nio-8080-exec-4] com.chenxin.blog.aspect.LogAspect        : Return ------ common/fragments :: newbloglist
2020-09-15 18:12:41.928 DEBUG 17196 --- [http-nio-8080-exec-4] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 18:12:41.930 DEBUG 17196 --- [http-nio-8080-exec-4] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://192.168.246.1:8080/fragments/newblog(String), 192.168.246.1(String), com.chenxin.blog.controller.IndexController.newblogs(String), {newblogs=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=18, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=16, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), common/fragments :: newbloglist(String)
2020-09-15 18:12:42.067 DEBUG 17196 --- [http-nio-8080-exec-4] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 18:13:45.808  INFO 17196 --- [http-nio-8080-exec-7] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://192.168.246.1:8080/', ip='192.168.246.1', classMethod='com.chenxin.blog.controller.IndexController.indexoage', args=[null, {}]}
2020-09-15 18:13:45.880 DEBUG 17196 --- [http-nio-8080-exec-7] c.c.b.m.B.findBlogByPaging_COUNT         : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0
2020-09-15 18:13:45.881 DEBUG 17196 --- [http-nio-8080-exec-7] c.c.b.m.B.findBlogByPaging_COUNT         : ==> Parameters: 
2020-09-15 18:13:45.883 DEBUG 17196 --- [http-nio-8080-exec-7] c.c.b.m.B.findBlogByPaging_COUNT         : <==      Total: 1
2020-09-15 18:13:45.884 DEBUG 17196 --- [http-nio-8080-exec-7] c.c.b.m.BlogMapper.findBlogByPaging      : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 LIMIT ?
2020-09-15 18:13:45.885 DEBUG 17196 --- [http-nio-8080-exec-7] c.c.b.m.BlogMapper.findBlogByPaging      : ==> Parameters: 10(Integer)
2020-09-15 18:13:45.890 DEBUG 17196 --- [http-nio-8080-exec-7] c.c.b.m.BlogMapper.findBlogByPaging      : <==      Total: 5
2020-09-15 18:13:45.901 DEBUG 17196 --- [http-nio-8080-exec-7] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC limit 0,6
2020-09-15 18:13:45.903 DEBUG 17196 --- [http-nio-8080-exec-7] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 18:13:45.911 DEBUG 17196 --- [http-nio-8080-exec-7] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 18:13:45.926 DEBUG 17196 --- [http-nio-8080-exec-7] c.c.blog.mapper.TagMapper.findByExample  : ==>  Preparing: SELECT t.id, t.NAME, COUNT( bt.blog_id ) countBlog FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.isrecommend = 0 GROUP BY id ORDER BY countBlog DESC limit 0,10
2020-09-15 18:13:45.927 DEBUG 17196 --- [http-nio-8080-exec-7] c.c.blog.mapper.TagMapper.findByExample  : ==> Parameters: 
2020-09-15 18:13:45.929 DEBUG 17196 --- [http-nio-8080-exec-7] c.c.blog.mapper.TagMapper.findByExample  : <==      Total: 5
2020-09-15 18:13:45.930 DEBUG 17196 --- [http-nio-8080-exec-7] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,10
2020-09-15 18:13:45.931 DEBUG 17196 --- [http-nio-8080-exec-7] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 18:13:45.939 DEBUG 17196 --- [http-nio-8080-exec-7] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 5
2020-09-15 18:13:45.940  INFO 17196 --- [http-nio-8080-exec-7] com.chenxin.blog.aspect.LogAspect        : Return ------ /index
2020-09-15 18:13:45.941 DEBUG 17196 --- [http-nio-8080-exec-7] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 18:13:45.943 DEBUG 17196 --- [http-nio-8080-exec-7] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://192.168.246.1:8080/(String), 192.168.246.1(String), com.chenxin.blog.controller.IndexController.indexoage(String), null,{page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=5, pages=1, reasonable=false, pageSizeZero=false}, toptype=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], toptag=[Tag{id=1, name='mysql', Tag{id=6, name='mybaits', Tag{id=4, name='spring', Tag{id=2, name='大数据', Tag{id=8, name='python'], topblog=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=18, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=16, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=20, title='mysql数据库的查询拉', content='**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这是一篇好博客', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:27:27 CST 2019, updatetime=Thu Sep 05 09:44:20 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=24, title='JAVA是什么', content='##java是什么&sup3; &hearts;
虹口区我说的浓氨水', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='我is单词vhuiowdecvb', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 13 11:08:48 CST 2018, updatetime=Thu Sep 13 11:08:48 CST 2018, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), /index(String)
2020-09-15 18:13:46.007 DEBUG 17196 --- [http-nio-8080-exec-7] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 18:13:46.485  INFO 17196 --- [http-nio-8080-exec-6] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://192.168.246.1:8080/fragments/newblog', ip='192.168.246.1', classMethod='com.chenxin.blog.controller.IndexController.newblogs', args=[{}]}
2020-09-15 18:13:46.486 DEBUG 17196 --- [http-nio-8080-exec-6] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,3
2020-09-15 18:13:46.486 DEBUG 17196 --- [http-nio-8080-exec-6] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 18:13:46.491 DEBUG 17196 --- [http-nio-8080-exec-6] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 3
2020-09-15 18:13:46.492  INFO 17196 --- [http-nio-8080-exec-6] com.chenxin.blog.aspect.LogAspect        : Return ------ common/fragments :: newbloglist
2020-09-15 18:13:46.494 DEBUG 17196 --- [http-nio-8080-exec-6] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 18:13:46.495 DEBUG 17196 --- [http-nio-8080-exec-6] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://192.168.246.1:8080/fragments/newblog(String), 192.168.246.1(String), com.chenxin.blog.controller.IndexController.newblogs(String), {newblogs=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=18, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=16, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), common/fragments :: newbloglist(String)
2020-09-15 18:13:46.624 DEBUG 17196 --- [http-nio-8080-exec-6] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 18:13:47.779  INFO 17196 --- [http-nio-8080-exec-8] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://192.168.246.1:8080/blog/19', ip='192.168.246.1', classMethod='com.chenxin.blog.controller.BlogController.BlogPage', args=[19, {}]}
2020-09-15 18:13:47.779 DEBUG 17196 --- [http-nio-8080-exec-8] c.c.blog.mapper.BlogMapper.findBlogById  : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag, b.description,b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id, t.id t_id,t.name t_name,y.id y_id,y.name y_name,u.id u_id,u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime from cx_blog b LEFT JOIN cx_blog_tag bt ON b.id = bt.blog_id LEFT JOIN cx_type y ON b.type_id=y.id LEFT JOIN cx_tag t ON bt.tag_id=t.id LEFT JOIN cx_user u on b.user_id = u.id WHERE b.id=?
2020-09-15 18:13:47.780 DEBUG 17196 --- [http-nio-8080-exec-8] c.c.blog.mapper.BlogMapper.findBlogById  : ==> Parameters: 19(Long)
2020-09-15 18:13:47.786 DEBUG 17196 --- [http-nio-8080-exec-8] c.c.blog.mapper.BlogMapper.findBlogById  : <==      Total: 2
2020-09-15 18:13:47.795 DEBUG 17196 --- [http-nio-8080-exec-8] c.c.b.m.B.updateByPrimaryKeySelective    : ==>  Preparing: update cx_blog SET viewcount = ? where id = ?
2020-09-15 18:13:47.795 DEBUG 17196 --- [http-nio-8080-exec-8] c.c.b.m.B.updateByPrimaryKeySelective    : ==> Parameters: 19(Integer), 19(Long)
2020-09-15 18:13:47.858 DEBUG 17196 --- [http-nio-8080-exec-8] c.c.b.m.B.updateByPrimaryKeySelective    : <==    Updates: 1
2020-09-15 18:13:47.859  INFO 17196 --- [http-nio-8080-exec-8] com.chenxin.blog.aspect.LogAspect        : Return ------ blog
2020-09-15 18:13:47.860 DEBUG 17196 --- [http-nio-8080-exec-8] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 18:13:47.863 DEBUG 17196 --- [http-nio-8080-exec-8] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://192.168.246.1:8080/blog/19(String), 192.168.246.1(String), com.chenxin.blog.controller.BlogController.BlogPage(String), 19,{blog=Blog{id=19, title='mysql数据库的查询拉', content='<h1 id="spring-boot开发小而美的个人博客">Spring Boot开发小而美的个人博客</h1>
<blockquote>
<p>作者：李仁密</p>
</blockquote>
<p><strong>个人博客功能：</strong></p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg" alt="" /></p>
<p><strong>技术组合：</strong></p>
<ul>
<li>后端：Spring Boot + JPA + thymeleaf模板</li>
<li>数据库：MySQL</li>
<li>前端UI：Semantic UI框架</li>
</ul>
<p><strong>工具与环境：</strong></p>
<ul>
<li>IDEA</li>
<li>Maven 3</li>
<li>JDK 8</li>
<li>Axure RP 8</li>
</ul>
<p><strong>课程内容模块：</strong></p>
<ul>
<li>需求分析与功能规划</li>
<li>页面设计与开发</li>
<li>技术框架搭建</li>
<li>后端管理功能实现</li>
<li>前端管理功能实现</li>
</ul>
<p><strong>你能学得什么？</strong></p>
<ul>
<li>基于Spring Boot的完整全栈式的开发套路</li>
<li>Semantic UI框架的使用</li>
<li>一套博客系统的源代码与设计</li>
</ul>
<h2 id="1需求与功能">1、需求与功能</h2>
<h3 id="11-用户故事">1.1 用户故事</h3>
<p>用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。</p>
<blockquote>
<p>用户故事最好是用户团队编写</p>
</blockquote>
<p><strong>用户故事模板</strong>：</p>
<ul>
<li>As a (role of user), I want (some feature) so that (some business value).</li>
<li>作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处</li>
</ul>
<p><strong>关键点</strong>：角色、功能、商业价值</p>
<p><strong>举例</strong>：</p>
<ul>
<li>作为一个招聘网站<strong>注册用户</strong>，我想<strong>查看最近3天发布的招聘信息</strong>，以便于<strong>了解最新的招聘信息</strong>。</li>
<li>作为公司，可以张贴新工作。</li>
</ul>
<p>个人博客系统的用户故事：</p>
<p>角色：<strong>普通访客</strong>，<strong>管理员（我）</strong></p>
<ul>
<li>访客，可以分页查看所有的博客</li>
<li>访客，可以快速查看博客数最多的6个分类</li>
<li>访客，可以查看所有的分类</li>
<li>访客，可以查看某个分类下的博客列表</li>
<li>访客，可以快速查看标记博客最多的10个标签</li>
<li>访客，可以查看所有的标签</li>
<li>访客，可以查看某个标签下的博客列表</li>
<li>访客，可以根据年度时间线查看博客列表</li>
<li>访客，可以快速查看最新的推荐博客</li>
<li>访客，可以用关键字全局搜索博客</li>
<li>访客，可以查看单个博客内容</li>
<li>访客，可以对博客内容进行评论</li>
<li>访客，可以赞赏博客内容</li>
<li>访客，可以微信扫码阅读博客内容</li>
<li>访客，可以在首页扫描公众号二维码关注我</li>
<li>我，可以用户名和密码登录后台管理</li>
<li>我，可以管理博客
<ul>
<li>我，可以发布新博客</li>
<li>我，可以对博客进行分类</li>
<li>我，可以对博客打标签</li>
<li>我，可以修改博客</li>
<li>我，可以删除博客</li>
<li>我，可以根据标题，分类，标签查询博客</li>
</ul>
</li>
<li>我，可以管理博客分类
<ul>
<li>我，可以新增一个分类</li>
<li>我，可以修改一个分类</li>
<li>我，可以删除一个分类</li>
<li>我，可以根据分类名称查询分类</li>
</ul>
</li>
<li>我，可以管理标签
<ul>
<li>我，可以新增一个标签</li>
<li>我，可以修改一个标签</li>
<li>我，可以删除一个标签</li>
<li>我，可以根据名称查询标签</li>
</ul>
</li>
</ul>
<h3 id="12-功能规划">1.2 功能规划</h3>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg" alt="" /></p>
<h2 id="2页面设计与开发">2、页面设计与开发</h2>
<h3 id="21-设计">2.1 设计</h3>
<p><strong>页面规划：</strong></p>
<p>前端展示：首页、详情页、分类、标签、归档、关于我</p>
<p>后台管理：模板页</p>
<h3 id="22-页面开发">2.2 页面开发</h3>
<p><a href="https://semantic-ui.com/" target="_blank">Semantic UI官网</a></p>
<p><a href="http://www.semantic-ui.cn/" target="_blank">Semantic UI中文官网</a></p>
<p><a href="https://imcoding.me/blogs/5" target="_blank">WebStorm下载与破解</a></p>
<p><a href="https://www.toptal.com/designers/subtlepatterns/" target="_blank">背景图片资源</a></p>
<h3 id="23-插件集成">2.3 插件集成</h3>
<p><a href="https://pandao.github.io/editor.md/" target="_blank">编辑器 Markdown</a></p>
<p><a href="https://github.com/sofish/typo.css" target="_blank">内容排版 typo.css</a></p>
<p><a href="https://daneden.github.io/animate.css/" target="_blank">动画 animate.css</a></p>
<p><a href="https://github.com/PrismJS/prism" target="_blank">代码高亮 prism</a></p>
<p><a href="https://tscanlin.github.io/tocbot/" target="_blank">目录生成 Tocbot</a></p>
<p><a href="http://imakewebthings.com/waypoints/" target="_blank">滚动侦测 waypoints</a></p>
<p><a href="https://github.com/flesler/jquery.scrollTo" target="_blank">平滑滚动 jquery.scrollTo</a></p>
<p><a href="https://davidshimjs.github.io/qrcodejs/" target="_blank">二维码生成 qrcode.js</a></p>
<h2 id="3框架搭建">3、框架搭建</h2>
<blockquote>
<p><a href="https://www.jetbrains.com/idea/" target="_blank">IDEA下载 https://www.jetbrains.com/idea/</a></p>
</blockquote>
<h3 id="31-构建与配置">3.1 构建与配置</h3>
<p><strong>1、引入Spring Boot模块：</strong></p>
<ul>
<li>web</li>
<li>Thymeleaf</li>
<li>JPA</li>
<li>MySQL</li>
<li>Aspects</li>
<li>DevTools</li>
</ul>
<p><strong>2、application.yml配置</strong></p>
<ul>
<li>
<p>使用 thymeleaf 3</p>
<p>pom.xml:</p>
</li>
</ul>
<pre><code class="language-xml">&lt;thymeleaf.version&gt;3.0.2.RELEASE&lt;/thymeleaf.version&gt;
&lt;thymeleaf-layout-dialect.version&gt;2.1.1&lt;/thymeleaf-layout-dialect.version&gt;
</code></pre>
<pre><code>application.yml:
</code></pre>
<pre><code class="language-yaml">spring:
  thymeleaf:
    mode: HTML
</code></pre>
<ul>
<li>数据库连接配置</li>
</ul>
<pre><code class="language-yaml">spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&amp;characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
</code></pre>
<ul>
<li>
<p>日志配置</p>
<p>application.yml:</p>
</li>
</ul>
<pre><code class="language-yaml">logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
</code></pre>
<p>​	logback-spring.xml：</p>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;configuration&gt;
    &lt;!--包含Spring boot对logback日志的默认配置--&gt;
    &lt;include resource=&quot;org/springframework/boot/logging/logback/defaults.xml&quot; /&gt;
    &lt;property name=&quot;LOG_FILE&quot; value=&quot;${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}&quot;/&gt;
    &lt;include resource=&quot;org/springframework/boot/logging/logback/console-appender.xml&quot; /&gt;

    &lt;!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置--&gt;
    &lt;appender name=&quot;TIME_FILE&quot;
              class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;
        &lt;encoder&gt;
            &lt;pattern&gt;${FILE_LOG_PATTERN}&lt;/pattern&gt;
        &lt;/encoder&gt;
        &lt;file&gt;${LOG_FILE}&lt;/file&gt;
        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;
            &lt;fileNamePattern&gt;${LOG_FILE}.%d{yyyy-MM-dd}.%i&lt;/fileNamePattern&gt;
            &lt;!--保留历史日志一个月的时间--&gt;
            &lt;maxHistory&gt;30&lt;/maxHistory&gt;
            &lt;!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            --&gt;
            &lt;timeBasedFileNamingAndTriggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;
                &lt;maxFileSize&gt;10MB&lt;/maxFileSize&gt;
            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;

        &lt;/rollingPolicy&gt;
    &lt;/appender&gt;

    &lt;root level=&quot;INFO&quot;&gt;
        &lt;appender-ref ref=&quot;CONSOLE&quot; /&gt;
        &lt;appender-ref ref=&quot;TIME_FILE&quot; /&gt;
    &lt;/root&gt;

&lt;/configuration&gt;
&lt;!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
--&gt;
</code></pre>
<ul>
<li>生产环境与开发环境配置
<ul>
<li>application-dev.yml</li>
<li>application-pro.yml</li>
</ul>
</li>
</ul>
<h3 id="32-异常处理">3.2 异常处理</h3>
<p><strong>1、定义错误页面</strong></p>
<ul>
<li>404</li>
<li>500</li>
<li>error</li>
</ul>
<p><strong>2、全局处理异常</strong></p>
<p>统一处理异常：</p>
<pre><code class="language-java">@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error(&quot;Request URL : {} , Exception : {}&quot;, request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject(&quot;url&quot;, request.getRequestURL());
        mav.addObject(&quot;exception&quot;, e);
        mav.setViewName(&quot;error/error&quot;);

        return mav;
    }
}
</code></pre>
<p>错误页面异常信息显示处理：</p>
<pre><code class="language-html">&lt;div&gt;
    &lt;div th:utext=&quot;'&amp;lt;!--'&quot; th:remove=&quot;tag&quot;&gt;&lt;/div&gt;
    &lt;div th:utext=&quot;'Failed Request URL : ' + ${url}&quot; th:remove=&quot;tag&quot;&gt;&lt;/div&gt;
    &lt;div th:utext=&quot;'Exception message : ' + ${exception.message}&quot; th:remove=&quot;tag&quot;&gt;&lt;/div&gt;
    &lt;ul th:remove=&quot;tag&quot;&gt;
        &lt;li th:each=&quot;st : ${exception.stackTrace}&quot; th:remove=&quot;tag&quot;&gt;&lt;span th:utext=&quot;${st}&quot; th:remove=&quot;tag&quot;&gt;&lt;/span&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;div th:utext=&quot;'--&amp;gt;'&quot; th:remove=&quot;tag&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<p><strong>3、资源找不到异常</strong></p>
<pre><code class="language-java">@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
</code></pre>
<h3 id="33-日志处理">3.3 日志处理</h3>
<p><strong>1、记录日志内容</strong></p>
<ul>
<li>请求 url</li>
<li>访问者 ip</li>
<li>调用方法 classMethod</li>
<li>参数 args</li>
<li>返回内容</li>
</ul>
<p><strong>2、记录日志类：</strong></p>
<pre><code class="language-java">@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut(&quot;execution(* com.imcoding.web.*.*(..))&quot;)
    public void log() {
    }

    @Before(&quot;log()&quot;)
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + &quot;.&quot; + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info(&quot;Rquest  ----- {}&quot;,reqeustLog);
    }

    @After(&quot;log()&quot;)
    public void doAfter() {
        //logger.info(&quot;---------- doAfter 2 ----------&quot;);
    }

    @AfterReturning(returning = &quot;result&quot;,pointcut = &quot;log()&quot;)
    public void doAtfertRturning(Object result) {
        logger.info(&quot;Return ------ {}&quot;,result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return &quot;ReqeustLog{&quot; +
                    &quot;url='&quot; + url + '\'' +
                    &quot;, ip='&quot; + ip + '\'' +
                    &quot;, classMethod='&quot; + classMethod + '\'' +
                    &quot;, args=&quot; + Arrays.toString(args) +
                    '}';
        }
    }

}
</code></pre>
<h3 id="34-页面处理">3.4 页面处理</h3>
<p><strong>1、静态页面导入project</strong></p>
<p><strong>2、thymeleaf布局</strong></p>
<ul>
<li>定义fragment</li>
<li>使用fragment布局</li>
</ul>
<p><strong>3、错误页面美化</strong></p>
<p>4、设计与规范</p>
<h3 id="41-实体设计">4.1 实体设计</h3>
<p><strong>实体类：</strong></p>
<ul>
<li>博客 Blog</li>
<li>博客分类 Type</li>
<li>博客标签 Tag</li>
<li>博客评论 Comment</li>
<li>用户 User</li>
</ul>
<p><strong>实体关系：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg" alt="" /></p>
<p><strong>评论类自关联关系：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg" alt="" /></p>
<p><strong>Blog类：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg" alt="" /></p>
<p><strong>Type类：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg" alt="" /></p>
<p><strong>Tag类：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg" alt="" /></p>
<p><strong>Comment类：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg" alt="" /></p>
<p><strong>User类：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg" alt="" /></p>
<h3 id="42-应用分层">4.2 应用分层</h3>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg" alt="" /></p>
<h3 id="43-命名约定">4.3 命名约定</h3>
<p><strong>Service/DAO层命名约定：</strong></p>
<ul>
<li>获取单个对象的方法用get做前缀。</li>
<li>获取多个对象的方法用list做前缀。</li>
<li>获取统计值的方法用count做前缀。</li>
<li>插入的方法用save(推荐)或insert做前缀。</li>
<li>删除的方法用remove(推荐)或delete做前缀。</li>
<li>修改的方法用update做前缀。</li>
</ul>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg" alt="" /></p>
<h2 id="5后台管理功能实现">5、后台管理功能实现</h2>
<h3 id="51-登录">5.1 登录</h3>
<p><strong>1、构建登录页面和后台管理首页</strong></p>
<p><strong>2、UserService和UserRepository</strong></p>
<p><strong>3、LoginController实现登录</strong></p>
<p><strong>4、MD5加密</strong></p>
<p><strong>5、登录拦截器</strong></p>
<h3 id="52-分类管理">5.2 分类管理</h3>
<p><strong>1、分类管理页面</strong></p>
<p><strong>2、分类列表分页</strong></p>
<pre><code class="language-javascript">{
  &quot;content&quot;:[
    {&quot;id&quot;:123,&quot;title&quot;:&quot;blog122&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:122,&quot;title&quot;:&quot;blog121&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:121,&quot;title&quot;:&quot;blog120&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:120,&quot;title&quot;:&quot;blog119&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:119,&quot;title&quot;:&quot;blog118&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:118,&quot;title&quot;:&quot;blog117&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:117,&quot;title&quot;:&quot;blog116&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:116,&quot;title&quot;:&quot;blog115&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:115,&quot;title&quot;:&quot;blog114&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:114,&quot;title&quot;:&quot;blog113&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:113,&quot;title&quot;:&quot;blog112&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:112,&quot;title&quot;:&quot;blog111&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:111,&quot;title&quot;:&quot;blog110&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:110,&quot;title&quot;:&quot;blog109&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:109,&quot;title&quot;:&quot;blog108&quot;,&quot;content&quot;:&quot;this is blog content&quot;}],
  &quot;last&quot;:false,
  &quot;totalPages&quot;:9,
  &quot;totalElements&quot;:123,
  &quot;size&quot;:15,
  &quot;number&quot;:0,
  &quot;first&quot;:true,
  &quot;sort&quot;:[{
    &quot;direction&quot;:&quot;DESC&quot;,
    &quot;property&quot;:&quot;id&quot;,
    &quot;ignoreCase&quot;:false,
    &quot;nullHandling&quot;:&quot;NATIVE&quot;,
    &quot;ascending&quot;:false
  }],
  &quot;numberOfElements&quot;:15
}
</code></pre>
<p><strong>3、分类新增、修改、删除</strong></p>
<h3 id="53-标签管理">5.3 标签管理</h3>
<h3 id="54-博客管理">5.4 博客管理</h3>
<p><strong>1、博客分页查询</strong></p>
<p><strong>2、博客新增</strong></p>
<p><strong>3、博客修改</strong></p>
<p><strong>4、博客删除</strong></p>
<h2 id="6前端展示功能实现">6、前端展示功能实现</h2>
<h3 id="61-首页展示">6.1 首页展示</h3>
<p><strong>1、博客列表</strong></p>
<p><strong>2、top分类</strong></p>
<p><strong>3、top标签</strong></p>
<p><strong>4、最新博客推荐</strong></p>
<p><strong>5、博客详情</strong></p>
<p><strong>1、Markdown 转换 HTML</strong></p>
<ul>
<li><a href="https://github.com/atlassian/commonmark-java" target="_blank">commonmark-java  https://github.com/atlassian/commonmark-java</a></li>
<li>pom.xml引用commonmark和扩展插件</li>
</ul>
<pre><code class="language-xml">&lt;dependency&gt;
   &lt;groupId&gt;com.atlassian.commonmark&lt;/groupId&gt;
   &lt;artifactId&gt;commonmark&lt;/artifactId&gt;
   &lt;version&gt;0.10.0&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
   &lt;groupId&gt;com.atlassian.commonmark&lt;/groupId&gt;
   &lt;artifactId&gt;commonmark-ext-heading-anchor&lt;/artifactId&gt;
   &lt;version&gt;0.10.0&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
   &lt;groupId&gt;com.atlassian.commonmark&lt;/groupId&gt;
   &lt;artifactId&gt;commonmark-ext-gfm-tables&lt;/artifactId&gt;
   &lt;version&gt;0.10.0&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<p><strong>2、评论功能</strong></p>
<ul>
<li>评论信息提交与回复功能</li>
<li>评论信息列表展示功能</li>
<li>管理员回复评论功能</li>
</ul>
<h3 id="62-分类页">6.2 分类页</h3>
<h3 id="63-标签页">6.3 标签页</h3>
<h3 id="64-归档页">6.4 归档页</h3>
<h3 id="65-关于我">6.5 关于我</h3>', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=18, isadmire=0, iscopyright=0, isrecommend=0, iscomment=1, issue=1, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=null, typeId=null, user=User{id=1, petname='程鑫', username='cx201125', password='dbd1a8bc623a690cd163ec0ade366995', mail='2543139363@qq.com', type=0, headportrait='/images/head.jpg', createtime=Wed Aug 26 18:02:27 CST 2020, updatetime=Wed Aug 26 18:02:30 CST 2020, blogs=[]}, type=Type{id=2, name='JAVA', blogs=[]}, tagsId='null', comments=[Comment{id=19, petname='程鑫', mail='2543139363@qq.com', headportrait='null', matter='null', createtime=null, blogId=null, blog=null, topId=null, top=null, bottom=[]}], tags=[Tag{id=1, name='mysql', Tag{id=4, name='spring']}}(String), blog(String)
2020-09-15 18:13:47.916 DEBUG 17196 --- [http-nio-8080-exec-8] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 18:13:48.567  INFO 17196 --- [http-nio-8080-exec-8] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://192.168.246.1:8080/fragments/newblog', ip='192.168.246.1', classMethod='com.chenxin.blog.controller.IndexController.newblogs', args=[{}]}
2020-09-15 18:13:48.568 DEBUG 17196 --- [http-nio-8080-exec-8] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,3
2020-09-15 18:13:48.568 DEBUG 17196 --- [http-nio-8080-exec-8] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 18:13:48.573 DEBUG 17196 --- [http-nio-8080-exec-8] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 3
2020-09-15 18:13:48.574  INFO 17196 --- [http-nio-8080-exec-8] com.chenxin.blog.aspect.LogAspect        : Return ------ common/fragments :: newbloglist
2020-09-15 18:13:48.576 DEBUG 17196 --- [http-nio-8080-exec-8] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 18:13:48.576 DEBUG 17196 --- [http-nio-8080-exec-8] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://192.168.246.1:8080/fragments/newblog(String), 192.168.246.1(String), com.chenxin.blog.controller.IndexController.newblogs(String), {newblogs=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=19, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=16, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), common/fragments :: newbloglist(String)
2020-09-15 18:13:48.650 DEBUG 17196 --- [http-nio-8080-exec-8] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 18:15:14.992  INFO 17196 --- [http-nio-8080-exec-7] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://192.168.198.1:8080/blog/19', ip='192.168.198.1', classMethod='com.chenxin.blog.controller.BlogController.BlogPage', args=[19, {}]}
2020-09-15 18:15:14.998 DEBUG 17196 --- [http-nio-8080-exec-7] c.c.blog.mapper.BlogMapper.findBlogById  : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag, b.description,b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id, t.id t_id,t.name t_name,y.id y_id,y.name y_name,u.id u_id,u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime from cx_blog b LEFT JOIN cx_blog_tag bt ON b.id = bt.blog_id LEFT JOIN cx_type y ON b.type_id=y.id LEFT JOIN cx_tag t ON bt.tag_id=t.id LEFT JOIN cx_user u on b.user_id = u.id WHERE b.id=?
2020-09-15 18:15:14.998 DEBUG 17196 --- [http-nio-8080-exec-7] c.c.blog.mapper.BlogMapper.findBlogById  : ==> Parameters: 19(Long)
2020-09-15 18:15:15.007 DEBUG 17196 --- [http-nio-8080-exec-7] c.c.blog.mapper.BlogMapper.findBlogById  : <==      Total: 2
2020-09-15 18:15:15.012 DEBUG 17196 --- [http-nio-8080-exec-7] c.c.b.m.B.updateByPrimaryKeySelective    : ==>  Preparing: update cx_blog SET viewcount = ? where id = ?
2020-09-15 18:15:15.012 DEBUG 17196 --- [http-nio-8080-exec-7] c.c.b.m.B.updateByPrimaryKeySelective    : ==> Parameters: 20(Integer), 19(Long)
2020-09-15 18:15:15.433 DEBUG 17196 --- [http-nio-8080-exec-7] c.c.b.m.B.updateByPrimaryKeySelective    : <==    Updates: 1
2020-09-15 18:15:15.433  INFO 17196 --- [http-nio-8080-exec-7] com.chenxin.blog.aspect.LogAspect        : Return ------ blog
2020-09-15 18:15:15.434 DEBUG 17196 --- [http-nio-8080-exec-7] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 18:15:15.434 DEBUG 17196 --- [http-nio-8080-exec-7] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://192.168.198.1:8080/blog/19(String), 192.168.198.1(String), com.chenxin.blog.controller.BlogController.BlogPage(String), 19,{blog=Blog{id=19, title='mysql数据库的查询拉', content='<h1 id="spring-boot开发小而美的个人博客">Spring Boot开发小而美的个人博客</h1>
<blockquote>
<p>作者：李仁密</p>
</blockquote>
<p><strong>个人博客功能：</strong></p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg" alt="" /></p>
<p><strong>技术组合：</strong></p>
<ul>
<li>后端：Spring Boot + JPA + thymeleaf模板</li>
<li>数据库：MySQL</li>
<li>前端UI：Semantic UI框架</li>
</ul>
<p><strong>工具与环境：</strong></p>
<ul>
<li>IDEA</li>
<li>Maven 3</li>
<li>JDK 8</li>
<li>Axure RP 8</li>
</ul>
<p><strong>课程内容模块：</strong></p>
<ul>
<li>需求分析与功能规划</li>
<li>页面设计与开发</li>
<li>技术框架搭建</li>
<li>后端管理功能实现</li>
<li>前端管理功能实现</li>
</ul>
<p><strong>你能学得什么？</strong></p>
<ul>
<li>基于Spring Boot的完整全栈式的开发套路</li>
<li>Semantic UI框架的使用</li>
<li>一套博客系统的源代码与设计</li>
</ul>
<h2 id="1需求与功能">1、需求与功能</h2>
<h3 id="11-用户故事">1.1 用户故事</h3>
<p>用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。</p>
<blockquote>
<p>用户故事最好是用户团队编写</p>
</blockquote>
<p><strong>用户故事模板</strong>：</p>
<ul>
<li>As a (role of user), I want (some feature) so that (some business value).</li>
<li>作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处</li>
</ul>
<p><strong>关键点</strong>：角色、功能、商业价值</p>
<p><strong>举例</strong>：</p>
<ul>
<li>作为一个招聘网站<strong>注册用户</strong>，我想<strong>查看最近3天发布的招聘信息</strong>，以便于<strong>了解最新的招聘信息</strong>。</li>
<li>作为公司，可以张贴新工作。</li>
</ul>
<p>个人博客系统的用户故事：</p>
<p>角色：<strong>普通访客</strong>，<strong>管理员（我）</strong></p>
<ul>
<li>访客，可以分页查看所有的博客</li>
<li>访客，可以快速查看博客数最多的6个分类</li>
<li>访客，可以查看所有的分类</li>
<li>访客，可以查看某个分类下的博客列表</li>
<li>访客，可以快速查看标记博客最多的10个标签</li>
<li>访客，可以查看所有的标签</li>
<li>访客，可以查看某个标签下的博客列表</li>
<li>访客，可以根据年度时间线查看博客列表</li>
<li>访客，可以快速查看最新的推荐博客</li>
<li>访客，可以用关键字全局搜索博客</li>
<li>访客，可以查看单个博客内容</li>
<li>访客，可以对博客内容进行评论</li>
<li>访客，可以赞赏博客内容</li>
<li>访客，可以微信扫码阅读博客内容</li>
<li>访客，可以在首页扫描公众号二维码关注我</li>
<li>我，可以用户名和密码登录后台管理</li>
<li>我，可以管理博客
<ul>
<li>我，可以发布新博客</li>
<li>我，可以对博客进行分类</li>
<li>我，可以对博客打标签</li>
<li>我，可以修改博客</li>
<li>我，可以删除博客</li>
<li>我，可以根据标题，分类，标签查询博客</li>
</ul>
</li>
<li>我，可以管理博客分类
<ul>
<li>我，可以新增一个分类</li>
<li>我，可以修改一个分类</li>
<li>我，可以删除一个分类</li>
<li>我，可以根据分类名称查询分类</li>
</ul>
</li>
<li>我，可以管理标签
<ul>
<li>我，可以新增一个标签</li>
<li>我，可以修改一个标签</li>
<li>我，可以删除一个标签</li>
<li>我，可以根据名称查询标签</li>
</ul>
</li>
</ul>
<h3 id="12-功能规划">1.2 功能规划</h3>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg" alt="" /></p>
<h2 id="2页面设计与开发">2、页面设计与开发</h2>
<h3 id="21-设计">2.1 设计</h3>
<p><strong>页面规划：</strong></p>
<p>前端展示：首页、详情页、分类、标签、归档、关于我</p>
<p>后台管理：模板页</p>
<h3 id="22-页面开发">2.2 页面开发</h3>
<p><a href="https://semantic-ui.com/" target="_blank">Semantic UI官网</a></p>
<p><a href="http://www.semantic-ui.cn/" target="_blank">Semantic UI中文官网</a></p>
<p><a href="https://imcoding.me/blogs/5" target="_blank">WebStorm下载与破解</a></p>
<p><a href="https://www.toptal.com/designers/subtlepatterns/" target="_blank">背景图片资源</a></p>
<h3 id="23-插件集成">2.3 插件集成</h3>
<p><a href="https://pandao.github.io/editor.md/" target="_blank">编辑器 Markdown</a></p>
<p><a href="https://github.com/sofish/typo.css" target="_blank">内容排版 typo.css</a></p>
<p><a href="https://daneden.github.io/animate.css/" target="_blank">动画 animate.css</a></p>
<p><a href="https://github.com/PrismJS/prism" target="_blank">代码高亮 prism</a></p>
<p><a href="https://tscanlin.github.io/tocbot/" target="_blank">目录生成 Tocbot</a></p>
<p><a href="http://imakewebthings.com/waypoints/" target="_blank">滚动侦测 waypoints</a></p>
<p><a href="https://github.com/flesler/jquery.scrollTo" target="_blank">平滑滚动 jquery.scrollTo</a></p>
<p><a href="https://davidshimjs.github.io/qrcodejs/" target="_blank">二维码生成 qrcode.js</a></p>
<h2 id="3框架搭建">3、框架搭建</h2>
<blockquote>
<p><a href="https://www.jetbrains.com/idea/" target="_blank">IDEA下载 https://www.jetbrains.com/idea/</a></p>
</blockquote>
<h3 id="31-构建与配置">3.1 构建与配置</h3>
<p><strong>1、引入Spring Boot模块：</strong></p>
<ul>
<li>web</li>
<li>Thymeleaf</li>
<li>JPA</li>
<li>MySQL</li>
<li>Aspects</li>
<li>DevTools</li>
</ul>
<p><strong>2、application.yml配置</strong></p>
<ul>
<li>
<p>使用 thymeleaf 3</p>
<p>pom.xml:</p>
</li>
</ul>
<pre><code class="language-xml">&lt;thymeleaf.version&gt;3.0.2.RELEASE&lt;/thymeleaf.version&gt;
&lt;thymeleaf-layout-dialect.version&gt;2.1.1&lt;/thymeleaf-layout-dialect.version&gt;
</code></pre>
<pre><code>application.yml:
</code></pre>
<pre><code class="language-yaml">spring:
  thymeleaf:
    mode: HTML
</code></pre>
<ul>
<li>数据库连接配置</li>
</ul>
<pre><code class="language-yaml">spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&amp;characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
</code></pre>
<ul>
<li>
<p>日志配置</p>
<p>application.yml:</p>
</li>
</ul>
<pre><code class="language-yaml">logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
</code></pre>
<p>​	logback-spring.xml：</p>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;configuration&gt;
    &lt;!--包含Spring boot对logback日志的默认配置--&gt;
    &lt;include resource=&quot;org/springframework/boot/logging/logback/defaults.xml&quot; /&gt;
    &lt;property name=&quot;LOG_FILE&quot; value=&quot;${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}&quot;/&gt;
    &lt;include resource=&quot;org/springframework/boot/logging/logback/console-appender.xml&quot; /&gt;

    &lt;!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置--&gt;
    &lt;appender name=&quot;TIME_FILE&quot;
              class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;
        &lt;encoder&gt;
            &lt;pattern&gt;${FILE_LOG_PATTERN}&lt;/pattern&gt;
        &lt;/encoder&gt;
        &lt;file&gt;${LOG_FILE}&lt;/file&gt;
        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;
            &lt;fileNamePattern&gt;${LOG_FILE}.%d{yyyy-MM-dd}.%i&lt;/fileNamePattern&gt;
            &lt;!--保留历史日志一个月的时间--&gt;
            &lt;maxHistory&gt;30&lt;/maxHistory&gt;
            &lt;!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            --&gt;
            &lt;timeBasedFileNamingAndTriggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;
                &lt;maxFileSize&gt;10MB&lt;/maxFileSize&gt;
            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;

        &lt;/rollingPolicy&gt;
    &lt;/appender&gt;

    &lt;root level=&quot;INFO&quot;&gt;
        &lt;appender-ref ref=&quot;CONSOLE&quot; /&gt;
        &lt;appender-ref ref=&quot;TIME_FILE&quot; /&gt;
    &lt;/root&gt;

&lt;/configuration&gt;
&lt;!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
--&gt;
</code></pre>
<ul>
<li>生产环境与开发环境配置
<ul>
<li>application-dev.yml</li>
<li>application-pro.yml</li>
</ul>
</li>
</ul>
<h3 id="32-异常处理">3.2 异常处理</h3>
<p><strong>1、定义错误页面</strong></p>
<ul>
<li>404</li>
<li>500</li>
<li>error</li>
</ul>
<p><strong>2、全局处理异常</strong></p>
<p>统一处理异常：</p>
<pre><code class="language-java">@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error(&quot;Request URL : {} , Exception : {}&quot;, request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject(&quot;url&quot;, request.getRequestURL());
        mav.addObject(&quot;exception&quot;, e);
        mav.setViewName(&quot;error/error&quot;);

        return mav;
    }
}
</code></pre>
<p>错误页面异常信息显示处理：</p>
<pre><code class="language-html">&lt;div&gt;
    &lt;div th:utext=&quot;'&amp;lt;!--'&quot; th:remove=&quot;tag&quot;&gt;&lt;/div&gt;
    &lt;div th:utext=&quot;'Failed Request URL : ' + ${url}&quot; th:remove=&quot;tag&quot;&gt;&lt;/div&gt;
    &lt;div th:utext=&quot;'Exception message : ' + ${exception.message}&quot; th:remove=&quot;tag&quot;&gt;&lt;/div&gt;
    &lt;ul th:remove=&quot;tag&quot;&gt;
        &lt;li th:each=&quot;st : ${exception.stackTrace}&quot; th:remove=&quot;tag&quot;&gt;&lt;span th:utext=&quot;${st}&quot; th:remove=&quot;tag&quot;&gt;&lt;/span&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;div th:utext=&quot;'--&amp;gt;'&quot; th:remove=&quot;tag&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<p><strong>3、资源找不到异常</strong></p>
<pre><code class="language-java">@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
</code></pre>
<h3 id="33-日志处理">3.3 日志处理</h3>
<p><strong>1、记录日志内容</strong></p>
<ul>
<li>请求 url</li>
<li>访问者 ip</li>
<li>调用方法 classMethod</li>
<li>参数 args</li>
<li>返回内容</li>
</ul>
<p><strong>2、记录日志类：</strong></p>
<pre><code class="language-java">@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut(&quot;execution(* com.imcoding.web.*.*(..))&quot;)
    public void log() {
    }

    @Before(&quot;log()&quot;)
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + &quot;.&quot; + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info(&quot;Rquest  ----- {}&quot;,reqeustLog);
    }

    @After(&quot;log()&quot;)
    public void doAfter() {
        //logger.info(&quot;---------- doAfter 2 ----------&quot;);
    }

    @AfterReturning(returning = &quot;result&quot;,pointcut = &quot;log()&quot;)
    public void doAtfertRturning(Object result) {
        logger.info(&quot;Return ------ {}&quot;,result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return &quot;ReqeustLog{&quot; +
                    &quot;url='&quot; + url + '\'' +
                    &quot;, ip='&quot; + ip + '\'' +
                    &quot;, classMethod='&quot; + classMethod + '\'' +
                    &quot;, args=&quot; + Arrays.toString(args) +
                    '}';
        }
    }

}
</code></pre>
<h3 id="34-页面处理">3.4 页面处理</h3>
<p><strong>1、静态页面导入project</strong></p>
<p><strong>2、thymeleaf布局</strong></p>
<ul>
<li>定义fragment</li>
<li>使用fragment布局</li>
</ul>
<p><strong>3、错误页面美化</strong></p>
<p>4、设计与规范</p>
<h3 id="41-实体设计">4.1 实体设计</h3>
<p><strong>实体类：</strong></p>
<ul>
<li>博客 Blog</li>
<li>博客分类 Type</li>
<li>博客标签 Tag</li>
<li>博客评论 Comment</li>
<li>用户 User</li>
</ul>
<p><strong>实体关系：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg" alt="" /></p>
<p><strong>评论类自关联关系：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg" alt="" /></p>
<p><strong>Blog类：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg" alt="" /></p>
<p><strong>Type类：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg" alt="" /></p>
<p><strong>Tag类：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg" alt="" /></p>
<p><strong>Comment类：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg" alt="" /></p>
<p><strong>User类：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg" alt="" /></p>
<h3 id="42-应用分层">4.2 应用分层</h3>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg" alt="" /></p>
<h3 id="43-命名约定">4.3 命名约定</h3>
<p><strong>Service/DAO层命名约定：</strong></p>
<ul>
<li>获取单个对象的方法用get做前缀。</li>
<li>获取多个对象的方法用list做前缀。</li>
<li>获取统计值的方法用count做前缀。</li>
<li>插入的方法用save(推荐)或insert做前缀。</li>
<li>删除的方法用remove(推荐)或delete做前缀。</li>
<li>修改的方法用update做前缀。</li>
</ul>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg" alt="" /></p>
<h2 id="5后台管理功能实现">5、后台管理功能实现</h2>
<h3 id="51-登录">5.1 登录</h3>
<p><strong>1、构建登录页面和后台管理首页</strong></p>
<p><strong>2、UserService和UserRepository</strong></p>
<p><strong>3、LoginController实现登录</strong></p>
<p><strong>4、MD5加密</strong></p>
<p><strong>5、登录拦截器</strong></p>
<h3 id="52-分类管理">5.2 分类管理</h3>
<p><strong>1、分类管理页面</strong></p>
<p><strong>2、分类列表分页</strong></p>
<pre><code class="language-javascript">{
  &quot;content&quot;:[
    {&quot;id&quot;:123,&quot;title&quot;:&quot;blog122&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:122,&quot;title&quot;:&quot;blog121&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:121,&quot;title&quot;:&quot;blog120&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:120,&quot;title&quot;:&quot;blog119&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:119,&quot;title&quot;:&quot;blog118&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:118,&quot;title&quot;:&quot;blog117&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:117,&quot;title&quot;:&quot;blog116&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:116,&quot;title&quot;:&quot;blog115&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:115,&quot;title&quot;:&quot;blog114&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:114,&quot;title&quot;:&quot;blog113&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:113,&quot;title&quot;:&quot;blog112&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:112,&quot;title&quot;:&quot;blog111&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:111,&quot;title&quot;:&quot;blog110&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:110,&quot;title&quot;:&quot;blog109&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:109,&quot;title&quot;:&quot;blog108&quot;,&quot;content&quot;:&quot;this is blog content&quot;}],
  &quot;last&quot;:false,
  &quot;totalPages&quot;:9,
  &quot;totalElements&quot;:123,
  &quot;size&quot;:15,
  &quot;number&quot;:0,
  &quot;first&quot;:true,
  &quot;sort&quot;:[{
    &quot;direction&quot;:&quot;DESC&quot;,
    &quot;property&quot;:&quot;id&quot;,
    &quot;ignoreCase&quot;:false,
    &quot;nullHandling&quot;:&quot;NATIVE&quot;,
    &quot;ascending&quot;:false
  }],
  &quot;numberOfElements&quot;:15
}
</code></pre>
<p><strong>3、分类新增、修改、删除</strong></p>
<h3 id="53-标签管理">5.3 标签管理</h3>
<h3 id="54-博客管理">5.4 博客管理</h3>
<p><strong>1、博客分页查询</strong></p>
<p><strong>2、博客新增</strong></p>
<p><strong>3、博客修改</strong></p>
<p><strong>4、博客删除</strong></p>
<h2 id="6前端展示功能实现">6、前端展示功能实现</h2>
<h3 id="61-首页展示">6.1 首页展示</h3>
<p><strong>1、博客列表</strong></p>
<p><strong>2、top分类</strong></p>
<p><strong>3、top标签</strong></p>
<p><strong>4、最新博客推荐</strong></p>
<p><strong>5、博客详情</strong></p>
<p><strong>1、Markdown 转换 HTML</strong></p>
<ul>
<li><a href="https://github.com/atlassian/commonmark-java" target="_blank">commonmark-java  https://github.com/atlassian/commonmark-java</a></li>
<li>pom.xml引用commonmark和扩展插件</li>
</ul>
<pre><code class="language-xml">&lt;dependency&gt;
   &lt;groupId&gt;com.atlassian.commonmark&lt;/groupId&gt;
   &lt;artifactId&gt;commonmark&lt;/artifactId&gt;
   &lt;version&gt;0.10.0&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
   &lt;groupId&gt;com.atlassian.commonmark&lt;/groupId&gt;
   &lt;artifactId&gt;commonmark-ext-heading-anchor&lt;/artifactId&gt;
   &lt;version&gt;0.10.0&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
   &lt;groupId&gt;com.atlassian.commonmark&lt;/groupId&gt;
   &lt;artifactId&gt;commonmark-ext-gfm-tables&lt;/artifactId&gt;
   &lt;version&gt;0.10.0&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<p><strong>2、评论功能</strong></p>
<ul>
<li>评论信息提交与回复功能</li>
<li>评论信息列表展示功能</li>
<li>管理员回复评论功能</li>
</ul>
<h3 id="62-分类页">6.2 分类页</h3>
<h3 id="63-标签页">6.3 标签页</h3>
<h3 id="64-归档页">6.4 归档页</h3>
<h3 id="65-关于我">6.5 关于我</h3>', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=19, isadmire=0, iscopyright=0, isrecommend=0, iscomment=1, issue=1, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=null, typeId=null, user=User{id=1, petname='程鑫', username='cx201125', password='dbd1a8bc623a690cd163ec0ade366995', mail='2543139363@qq.com', type=0, headportrait='/images/head.jpg', createtime=Wed Aug 26 18:02:27 CST 2020, updatetime=Wed Aug 26 18:02:30 CST 2020, blogs=[]}, type=Type{id=2, name='JAVA', blogs=[]}, tagsId='null', comments=[Comment{id=19, petname='程鑫', mail='2543139363@qq.com', headportrait='null', matter='null', createtime=null, blogId=null, blog=null, topId=null, top=null, bottom=[]}], tags=[Tag{id=1, name='mysql', Tag{id=4, name='spring']}}(String), blog(String)
2020-09-15 18:15:15.569 DEBUG 17196 --- [http-nio-8080-exec-7] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 18:15:16.177  INFO 17196 --- [http-nio-8080-exec-6] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://192.168.198.1:8080/fragments/newblog', ip='192.168.198.1', classMethod='com.chenxin.blog.controller.IndexController.newblogs', args=[{}]}
2020-09-15 18:15:16.178 DEBUG 17196 --- [http-nio-8080-exec-6] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,3
2020-09-15 18:15:16.179 DEBUG 17196 --- [http-nio-8080-exec-6] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 18:15:16.183 DEBUG 17196 --- [http-nio-8080-exec-6] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 3
2020-09-15 18:15:16.187  INFO 17196 --- [http-nio-8080-exec-6] com.chenxin.blog.aspect.LogAspect        : Return ------ common/fragments :: newbloglist
2020-09-15 18:15:16.188 DEBUG 17196 --- [http-nio-8080-exec-6] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 18:15:16.189 DEBUG 17196 --- [http-nio-8080-exec-6] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://192.168.198.1:8080/fragments/newblog(String), 192.168.198.1(String), com.chenxin.blog.controller.IndexController.newblogs(String), {newblogs=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=20, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=16, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), common/fragments :: newbloglist(String)
2020-09-15 18:15:16.314 DEBUG 17196 --- [http-nio-8080-exec-6] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 18:15:18.644  INFO 17196 --- [http-nio-8080-exec-9] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://192.168.198.1:8080/about', ip='192.168.198.1', classMethod='com.chenxin.blog.controller.AboutController.about', args=[{}]}
2020-09-15 18:15:18.644  INFO 17196 --- [http-nio-8080-exec-9] com.chenxin.blog.aspect.LogAspect        : Return ------ about
2020-09-15 18:15:18.645 DEBUG 17196 --- [http-nio-8080-exec-9] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 18:15:18.645 DEBUG 17196 --- [http-nio-8080-exec-9] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://192.168.198.1:8080/about(String), 192.168.198.1(String), com.chenxin.blog.controller.AboutController.about(String), {about=About{petname='程鑫', intro_1='一个独立开发者，折腾在 0 和 1 世界的大叔；一个终身学习者，誓将学习无限循环. 希望结识可以共同成长的小伙伴.', intro_2='热爱编程，喜欢折腾，正在探索高效学习编程技术的方法...', loves=[篮球, 编程, 跑步, 王者], skill=[java, javaScript, Node, mysql, spring, Redis, Linux]}}(String), about(String)
2020-09-15 18:15:18.690 DEBUG 17196 --- [http-nio-8080-exec-9] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 18:15:19.103  INFO 17196 --- [http-nio-8080-exec-8] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://192.168.198.1:8080/fragments/newblog', ip='192.168.198.1', classMethod='com.chenxin.blog.controller.IndexController.newblogs', args=[{}]}
2020-09-15 18:15:19.104 DEBUG 17196 --- [http-nio-8080-exec-8] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,3
2020-09-15 18:15:19.104 DEBUG 17196 --- [http-nio-8080-exec-8] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 18:15:19.107 DEBUG 17196 --- [http-nio-8080-exec-8] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 3
2020-09-15 18:15:19.107  INFO 17196 --- [http-nio-8080-exec-8] com.chenxin.blog.aspect.LogAspect        : Return ------ common/fragments :: newbloglist
2020-09-15 18:15:19.108 DEBUG 17196 --- [http-nio-8080-exec-8] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 18:15:19.109 DEBUG 17196 --- [http-nio-8080-exec-8] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://192.168.198.1:8080/fragments/newblog(String), 192.168.198.1(String), com.chenxin.blog.controller.IndexController.newblogs(String), {newblogs=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=20, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=16, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), common/fragments :: newbloglist(String)
2020-09-15 18:15:19.266 DEBUG 17196 --- [http-nio-8080-exec-8] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 18:16:45.368  INFO 17196 --- [http-nio-8080-exec-10] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://119.86.50.152:8080/about', ip='119.86.50.152', classMethod='com.chenxin.blog.controller.AboutController.about', args=[{}]}
2020-09-15 18:16:45.368  INFO 17196 --- [http-nio-8080-exec-10] com.chenxin.blog.aspect.LogAspect        : Return ------ about
2020-09-15 18:16:45.373 DEBUG 17196 --- [http-nio-8080-exec-10] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 18:16:45.374 DEBUG 17196 --- [http-nio-8080-exec-10] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://119.86.50.152:8080/about(String), 119.86.50.152(String), com.chenxin.blog.controller.AboutController.about(String), {about=About{petname='程鑫', intro_1='一个独立开发者，折腾在 0 和 1 世界的大叔；一个终身学习者，誓将学习无限循环. 希望结识可以共同成长的小伙伴.', intro_2='热爱编程，喜欢折腾，正在探索高效学习编程技术的方法...', loves=[篮球, 编程, 跑步, 王者], skill=[java, javaScript, Node, mysql, spring, Redis, Linux]}}(String), about(String)
2020-09-15 18:16:45.697 DEBUG 17196 --- [http-nio-8080-exec-10] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 18:16:46.125  INFO 17196 --- [http-nio-8080-exec-10] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://119.86.50.152:8080/fragments/newblog', ip='119.86.50.152', classMethod='com.chenxin.blog.controller.IndexController.newblogs', args=[{}]}
2020-09-15 18:16:46.127 DEBUG 17196 --- [http-nio-8080-exec-10] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,3
2020-09-15 18:16:46.127 DEBUG 17196 --- [http-nio-8080-exec-10] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 18:16:46.133 DEBUG 17196 --- [http-nio-8080-exec-10] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 3
2020-09-15 18:16:46.136  INFO 17196 --- [http-nio-8080-exec-10] com.chenxin.blog.aspect.LogAspect        : Return ------ common/fragments :: newbloglist
2020-09-15 18:16:46.137 DEBUG 17196 --- [http-nio-8080-exec-10] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 18:16:46.138 DEBUG 17196 --- [http-nio-8080-exec-10] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://119.86.50.152:8080/fragments/newblog(String), 119.86.50.152(String), com.chenxin.blog.controller.IndexController.newblogs(String), {newblogs=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=20, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=16, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), common/fragments :: newbloglist(String)
2020-09-15 18:16:46.190 DEBUG 17196 --- [http-nio-8080-exec-10] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 18:20:37.471  INFO 19640 --- [restartedMain] com.chenxin.blog.BlogApplication         : Starting BlogApplication on LAPTOP-UGEIKVSJ with PID 19640 (D:\Program Files\idea-workaplace\blog\target\classes started by asus in D:\Program Files\idea-workaplace\blog)
2020-09-15 18:20:37.474 DEBUG 19640 --- [restartedMain] com.chenxin.blog.BlogApplication         : Running with Spring Boot v2.3.3.RELEASE, Spring v5.2.8.RELEASE
2020-09-15 18:20:37.475  INFO 19640 --- [restartedMain] com.chenxin.blog.BlogApplication         : The following profiles are active: dev
2020-09-15 18:20:37.537  INFO 19640 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-09-15 18:20:37.537  INFO 19640 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-09-15 18:20:38.679  INFO 19640 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-09-15 18:20:38.687  INFO 19640 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-09-15 18:20:38.767  INFO 19640 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 54ms. Found 0 Redis repository interfaces.
2020-09-15 18:20:39.885  INFO 19640 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-09-15 18:20:39.897  INFO 19640 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-09-15 18:20:39.898  INFO 19640 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.37]
2020-09-15 18:20:40.019  INFO 19640 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-09-15 18:20:40.020  INFO 19640 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 2483 ms
2020-09-15 18:20:41.646  INFO 19640 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-09-15 18:20:41.753  INFO 19640 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-09-15 18:20:42.517  INFO 19640 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-09-15 18:20:42.586  INFO 19640 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-09-15 18:20:42.594  INFO 19640 --- [restartedMain] com.chenxin.blog.BlogApplication         : Started BlogApplication in 5.788 seconds (JVM running for 7.418)
2020-09-15 18:20:43.057  INFO 19640 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-09-15 18:20:43.057  INFO 19640 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-09-15 18:20:43.066  INFO 19640 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 9 ms
2020-09-15 18:20:43.091  INFO 19640 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.indexoage', args=[null, {}]}
2020-09-15 18:20:43.990  INFO 19640 --- [http-nio-8080-exec-1] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-09-15 18:20:44.029 DEBUG 19640 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByPaging_COUNT         : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0
2020-09-15 18:20:44.151 DEBUG 19640 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByPaging_COUNT         : ==> Parameters: 
2020-09-15 18:20:44.178 DEBUG 19640 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByPaging_COUNT         : <==      Total: 1
2020-09-15 18:20:44.182 DEBUG 19640 --- [http-nio-8080-exec-1] c.c.b.m.BlogMapper.findBlogByPaging      : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 LIMIT ?
2020-09-15 18:20:44.185 DEBUG 19640 --- [http-nio-8080-exec-1] c.c.b.m.BlogMapper.findBlogByPaging      : ==> Parameters: 10(Integer)
2020-09-15 18:20:44.198 DEBUG 19640 --- [http-nio-8080-exec-1] c.c.b.m.BlogMapper.findBlogByPaging      : <==      Total: 5
2020-09-15 18:20:44.230 DEBUG 19640 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC limit 0,6
2020-09-15 18:20:44.233 DEBUG 19640 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 18:20:44.237 DEBUG 19640 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 18:20:44.246 DEBUG 19640 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByExample  : ==>  Preparing: SELECT t.id, t.NAME, COUNT( bt.blog_id ) countBlog FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.isrecommend = 0 GROUP BY id ORDER BY countBlog DESC limit 0,10
2020-09-15 18:20:44.248 DEBUG 19640 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByExample  : ==> Parameters: 
2020-09-15 18:20:44.255 DEBUG 19640 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByExample  : <==      Total: 5
2020-09-15 18:20:44.264 DEBUG 19640 --- [http-nio-8080-exec-1] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,10
2020-09-15 18:20:44.265 DEBUG 19640 --- [http-nio-8080-exec-1] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 18:20:44.269 DEBUG 19640 --- [http-nio-8080-exec-1] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 5
2020-09-15 18:20:44.270  INFO 19640 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Return ------ /index
2020-09-15 18:20:44.270 DEBUG 19640 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 18:20:44.280 DEBUG 19640 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.indexoage(String), null,{page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=5, pages=1, reasonable=false, pageSizeZero=false}, toptype=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], toptag=[Tag{id=1, name='mysql', Tag{id=6, name='mybaits', Tag{id=4, name='spring', Tag{id=2, name='大数据', Tag{id=8, name='python'], topblog=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=20, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=16, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=20, title='mysql数据库的查询拉', content='**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这是一篇好博客', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:27:27 CST 2019, updatetime=Thu Sep 05 09:44:20 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=24, title='JAVA是什么', content='##java是什么&sup3; &hearts;
虹口区我说的浓氨水', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='我is单词vhuiowdecvb', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 13 11:08:48 CST 2018, updatetime=Thu Sep 13 11:08:48 CST 2018, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), /index(String)
2020-09-15 18:20:44.354 DEBUG 19640 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 18:20:45.588  INFO 19640 --- [http-nio-8080-exec-8] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/fragments/newblog', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.newblogs', args=[{}]}
2020-09-15 18:20:45.590 DEBUG 19640 --- [http-nio-8080-exec-8] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,3
2020-09-15 18:20:45.591 DEBUG 19640 --- [http-nio-8080-exec-8] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 18:20:45.597 DEBUG 19640 --- [http-nio-8080-exec-8] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 3
2020-09-15 18:20:45.598  INFO 19640 --- [http-nio-8080-exec-8] com.chenxin.blog.aspect.LogAspect        : Return ------ common/fragments :: newbloglist
2020-09-15 18:20:45.599 DEBUG 19640 --- [http-nio-8080-exec-8] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 18:20:45.600 DEBUG 19640 --- [http-nio-8080-exec-8] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/fragments/newblog(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.newblogs(String), {newblogs=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=20, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=16, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), common/fragments :: newbloglist(String)
2020-09-15 18:20:45.712 DEBUG 19640 --- [http-nio-8080-exec-8] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 18:20:47.191  INFO 19640 --- [http-nio-8080-exec-6] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/blog/19', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.BlogController.BlogPage', args=[19, {}]}
2020-09-15 18:20:47.195 DEBUG 19640 --- [http-nio-8080-exec-6] c.c.blog.mapper.BlogMapper.findBlogById  : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag, b.description,b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id, t.id t_id,t.name t_name,y.id y_id,y.name y_name,u.id u_id,u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime from cx_blog b LEFT JOIN cx_blog_tag bt ON b.id = bt.blog_id LEFT JOIN cx_type y ON b.type_id=y.id LEFT JOIN cx_tag t ON bt.tag_id=t.id LEFT JOIN cx_user u on b.user_id = u.id WHERE b.id=?
2020-09-15 18:20:47.197 DEBUG 19640 --- [http-nio-8080-exec-6] c.c.blog.mapper.BlogMapper.findBlogById  : ==> Parameters: 19(Long)
2020-09-15 18:20:47.213 DEBUG 19640 --- [http-nio-8080-exec-6] c.c.blog.mapper.BlogMapper.findBlogById  : <==      Total: 2
2020-09-15 18:20:47.259 DEBUG 19640 --- [http-nio-8080-exec-6] c.c.b.m.B.updateByPrimaryKeySelective    : ==>  Preparing: update cx_blog SET viewcount = ? where id = ?
2020-09-15 18:20:47.261 DEBUG 19640 --- [http-nio-8080-exec-6] c.c.b.m.B.updateByPrimaryKeySelective    : ==> Parameters: 21(Integer), 19(Long)
2020-09-15 18:20:47.313 DEBUG 19640 --- [http-nio-8080-exec-6] c.c.b.m.B.updateByPrimaryKeySelective    : <==    Updates: 1
2020-09-15 18:20:47.314  INFO 19640 --- [http-nio-8080-exec-6] com.chenxin.blog.aspect.LogAspect        : Return ------ blog
2020-09-15 18:20:47.314 DEBUG 19640 --- [http-nio-8080-exec-6] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 18:20:47.316 DEBUG 19640 --- [http-nio-8080-exec-6] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/blog/19(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.BlogController.BlogPage(String), 19,{blog=Blog{id=19, title='mysql数据库的查询拉', content='<h1 id="spring-boot开发小而美的个人博客">Spring Boot开发小而美的个人博客</h1>
<blockquote>
<p>作者：李仁密</p>
</blockquote>
<p><strong>个人博客功能：</strong></p>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg" alt="" /></p>
<p><strong>技术组合：</strong></p>
<ul>
<li>后端：Spring Boot + JPA + thymeleaf模板</li>
<li>数据库：MySQL</li>
<li>前端UI：Semantic UI框架</li>
</ul>
<p><strong>工具与环境：</strong></p>
<ul>
<li>IDEA</li>
<li>Maven 3</li>
<li>JDK 8</li>
<li>Axure RP 8</li>
</ul>
<p><strong>课程内容模块：</strong></p>
<ul>
<li>需求分析与功能规划</li>
<li>页面设计与开发</li>
<li>技术框架搭建</li>
<li>后端管理功能实现</li>
<li>前端管理功能实现</li>
</ul>
<p><strong>你能学得什么？</strong></p>
<ul>
<li>基于Spring Boot的完整全栈式的开发套路</li>
<li>Semantic UI框架的使用</li>
<li>一套博客系统的源代码与设计</li>
</ul>
<h2 id="1需求与功能">1、需求与功能</h2>
<h3 id="11-用户故事">1.1 用户故事</h3>
<p>用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。</p>
<blockquote>
<p>用户故事最好是用户团队编写</p>
</blockquote>
<p><strong>用户故事模板</strong>：</p>
<ul>
<li>As a (role of user), I want (some feature) so that (some business value).</li>
<li>作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处</li>
</ul>
<p><strong>关键点</strong>：角色、功能、商业价值</p>
<p><strong>举例</strong>：</p>
<ul>
<li>作为一个招聘网站<strong>注册用户</strong>，我想<strong>查看最近3天发布的招聘信息</strong>，以便于<strong>了解最新的招聘信息</strong>。</li>
<li>作为公司，可以张贴新工作。</li>
</ul>
<p>个人博客系统的用户故事：</p>
<p>角色：<strong>普通访客</strong>，<strong>管理员（我）</strong></p>
<ul>
<li>访客，可以分页查看所有的博客</li>
<li>访客，可以快速查看博客数最多的6个分类</li>
<li>访客，可以查看所有的分类</li>
<li>访客，可以查看某个分类下的博客列表</li>
<li>访客，可以快速查看标记博客最多的10个标签</li>
<li>访客，可以查看所有的标签</li>
<li>访客，可以查看某个标签下的博客列表</li>
<li>访客，可以根据年度时间线查看博客列表</li>
<li>访客，可以快速查看最新的推荐博客</li>
<li>访客，可以用关键字全局搜索博客</li>
<li>访客，可以查看单个博客内容</li>
<li>访客，可以对博客内容进行评论</li>
<li>访客，可以赞赏博客内容</li>
<li>访客，可以微信扫码阅读博客内容</li>
<li>访客，可以在首页扫描公众号二维码关注我</li>
<li>我，可以用户名和密码登录后台管理</li>
<li>我，可以管理博客
<ul>
<li>我，可以发布新博客</li>
<li>我，可以对博客进行分类</li>
<li>我，可以对博客打标签</li>
<li>我，可以修改博客</li>
<li>我，可以删除博客</li>
<li>我，可以根据标题，分类，标签查询博客</li>
</ul>
</li>
<li>我，可以管理博客分类
<ul>
<li>我，可以新增一个分类</li>
<li>我，可以修改一个分类</li>
<li>我，可以删除一个分类</li>
<li>我，可以根据分类名称查询分类</li>
</ul>
</li>
<li>我，可以管理标签
<ul>
<li>我，可以新增一个标签</li>
<li>我，可以修改一个标签</li>
<li>我，可以删除一个标签</li>
<li>我，可以根据名称查询标签</li>
</ul>
</li>
</ul>
<h3 id="12-功能规划">1.2 功能规划</h3>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg" alt="" /></p>
<h2 id="2页面设计与开发">2、页面设计与开发</h2>
<h3 id="21-设计">2.1 设计</h3>
<p><strong>页面规划：</strong></p>
<p>前端展示：首页、详情页、分类、标签、归档、关于我</p>
<p>后台管理：模板页</p>
<h3 id="22-页面开发">2.2 页面开发</h3>
<p><a href="https://semantic-ui.com/" target="_blank">Semantic UI官网</a></p>
<p><a href="http://www.semantic-ui.cn/" target="_blank">Semantic UI中文官网</a></p>
<p><a href="https://imcoding.me/blogs/5" target="_blank">WebStorm下载与破解</a></p>
<p><a href="https://www.toptal.com/designers/subtlepatterns/" target="_blank">背景图片资源</a></p>
<h3 id="23-插件集成">2.3 插件集成</h3>
<p><a href="https://pandao.github.io/editor.md/" target="_blank">编辑器 Markdown</a></p>
<p><a href="https://github.com/sofish/typo.css" target="_blank">内容排版 typo.css</a></p>
<p><a href="https://daneden.github.io/animate.css/" target="_blank">动画 animate.css</a></p>
<p><a href="https://github.com/PrismJS/prism" target="_blank">代码高亮 prism</a></p>
<p><a href="https://tscanlin.github.io/tocbot/" target="_blank">目录生成 Tocbot</a></p>
<p><a href="http://imakewebthings.com/waypoints/" target="_blank">滚动侦测 waypoints</a></p>
<p><a href="https://github.com/flesler/jquery.scrollTo" target="_blank">平滑滚动 jquery.scrollTo</a></p>
<p><a href="https://davidshimjs.github.io/qrcodejs/" target="_blank">二维码生成 qrcode.js</a></p>
<h2 id="3框架搭建">3、框架搭建</h2>
<blockquote>
<p><a href="https://www.jetbrains.com/idea/" target="_blank">IDEA下载 https://www.jetbrains.com/idea/</a></p>
</blockquote>
<h3 id="31-构建与配置">3.1 构建与配置</h3>
<p><strong>1、引入Spring Boot模块：</strong></p>
<ul>
<li>web</li>
<li>Thymeleaf</li>
<li>JPA</li>
<li>MySQL</li>
<li>Aspects</li>
<li>DevTools</li>
</ul>
<p><strong>2、application.yml配置</strong></p>
<ul>
<li>
<p>使用 thymeleaf 3</p>
<p>pom.xml:</p>
</li>
</ul>
<pre><code class="language-xml">&lt;thymeleaf.version&gt;3.0.2.RELEASE&lt;/thymeleaf.version&gt;
&lt;thymeleaf-layout-dialect.version&gt;2.1.1&lt;/thymeleaf-layout-dialect.version&gt;
</code></pre>
<pre><code>application.yml:
</code></pre>
<pre><code class="language-yaml">spring:
  thymeleaf:
    mode: HTML
</code></pre>
<ul>
<li>数据库连接配置</li>
</ul>
<pre><code class="language-yaml">spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&amp;characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
</code></pre>
<ul>
<li>
<p>日志配置</p>
<p>application.yml:</p>
</li>
</ul>
<pre><code class="language-yaml">logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
</code></pre>
<p>​	logback-spring.xml：</p>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;
&lt;configuration&gt;
    &lt;!--包含Spring boot对logback日志的默认配置--&gt;
    &lt;include resource=&quot;org/springframework/boot/logging/logback/defaults.xml&quot; /&gt;
    &lt;property name=&quot;LOG_FILE&quot; value=&quot;${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}&quot;/&gt;
    &lt;include resource=&quot;org/springframework/boot/logging/logback/console-appender.xml&quot; /&gt;

    &lt;!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置--&gt;
    &lt;appender name=&quot;TIME_FILE&quot;
              class=&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;&gt;
        &lt;encoder&gt;
            &lt;pattern&gt;${FILE_LOG_PATTERN}&lt;/pattern&gt;
        &lt;/encoder&gt;
        &lt;file&gt;${LOG_FILE}&lt;/file&gt;
        &lt;rollingPolicy class=&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;&gt;
            &lt;fileNamePattern&gt;${LOG_FILE}.%d{yyyy-MM-dd}.%i&lt;/fileNamePattern&gt;
            &lt;!--保留历史日志一个月的时间--&gt;
            &lt;maxHistory&gt;30&lt;/maxHistory&gt;
            &lt;!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            --&gt;
            &lt;timeBasedFileNamingAndTriggeringPolicy class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;
                &lt;maxFileSize&gt;10MB&lt;/maxFileSize&gt;
            &lt;/timeBasedFileNamingAndTriggeringPolicy&gt;

        &lt;/rollingPolicy&gt;
    &lt;/appender&gt;

    &lt;root level=&quot;INFO&quot;&gt;
        &lt;appender-ref ref=&quot;CONSOLE&quot; /&gt;
        &lt;appender-ref ref=&quot;TIME_FILE&quot; /&gt;
    &lt;/root&gt;

&lt;/configuration&gt;
&lt;!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
--&gt;
</code></pre>
<ul>
<li>生产环境与开发环境配置
<ul>
<li>application-dev.yml</li>
<li>application-pro.yml</li>
</ul>
</li>
</ul>
<h3 id="32-异常处理">3.2 异常处理</h3>
<p><strong>1、定义错误页面</strong></p>
<ul>
<li>404</li>
<li>500</li>
<li>error</li>
</ul>
<p><strong>2、全局处理异常</strong></p>
<p>统一处理异常：</p>
<pre><code class="language-java">@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error(&quot;Request URL : {} , Exception : {}&quot;, request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject(&quot;url&quot;, request.getRequestURL());
        mav.addObject(&quot;exception&quot;, e);
        mav.setViewName(&quot;error/error&quot;);

        return mav;
    }
}
</code></pre>
<p>错误页面异常信息显示处理：</p>
<pre><code class="language-html">&lt;div&gt;
    &lt;div th:utext=&quot;'&amp;lt;!--'&quot; th:remove=&quot;tag&quot;&gt;&lt;/div&gt;
    &lt;div th:utext=&quot;'Failed Request URL : ' + ${url}&quot; th:remove=&quot;tag&quot;&gt;&lt;/div&gt;
    &lt;div th:utext=&quot;'Exception message : ' + ${exception.message}&quot; th:remove=&quot;tag&quot;&gt;&lt;/div&gt;
    &lt;ul th:remove=&quot;tag&quot;&gt;
        &lt;li th:each=&quot;st : ${exception.stackTrace}&quot; th:remove=&quot;tag&quot;&gt;&lt;span th:utext=&quot;${st}&quot; th:remove=&quot;tag&quot;&gt;&lt;/span&gt;&lt;/li&gt;
    &lt;/ul&gt;
    &lt;div th:utext=&quot;'--&amp;gt;'&quot; th:remove=&quot;tag&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<p><strong>3、资源找不到异常</strong></p>
<pre><code class="language-java">@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
</code></pre>
<h3 id="33-日志处理">3.3 日志处理</h3>
<p><strong>1、记录日志内容</strong></p>
<ul>
<li>请求 url</li>
<li>访问者 ip</li>
<li>调用方法 classMethod</li>
<li>参数 args</li>
<li>返回内容</li>
</ul>
<p><strong>2、记录日志类：</strong></p>
<pre><code class="language-java">@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut(&quot;execution(* com.imcoding.web.*.*(..))&quot;)
    public void log() {
    }

    @Before(&quot;log()&quot;)
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + &quot;.&quot; + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info(&quot;Rquest  ----- {}&quot;,reqeustLog);
    }

    @After(&quot;log()&quot;)
    public void doAfter() {
        //logger.info(&quot;---------- doAfter 2 ----------&quot;);
    }

    @AfterReturning(returning = &quot;result&quot;,pointcut = &quot;log()&quot;)
    public void doAtfertRturning(Object result) {
        logger.info(&quot;Return ------ {}&quot;,result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return &quot;ReqeustLog{&quot; +
                    &quot;url='&quot; + url + '\'' +
                    &quot;, ip='&quot; + ip + '\'' +
                    &quot;, classMethod='&quot; + classMethod + '\'' +
                    &quot;, args=&quot; + Arrays.toString(args) +
                    '}';
        }
    }

}
</code></pre>
<h3 id="34-页面处理">3.4 页面处理</h3>
<p><strong>1、静态页面导入project</strong></p>
<p><strong>2、thymeleaf布局</strong></p>
<ul>
<li>定义fragment</li>
<li>使用fragment布局</li>
</ul>
<p><strong>3、错误页面美化</strong></p>
<p>4、设计与规范</p>
<h3 id="41-实体设计">4.1 实体设计</h3>
<p><strong>实体类：</strong></p>
<ul>
<li>博客 Blog</li>
<li>博客分类 Type</li>
<li>博客标签 Tag</li>
<li>博客评论 Comment</li>
<li>用户 User</li>
</ul>
<p><strong>实体关系：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg" alt="" /></p>
<p><strong>评论类自关联关系：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg" alt="" /></p>
<p><strong>Blog类：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg" alt="" /></p>
<p><strong>Type类：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg" alt="" /></p>
<p><strong>Tag类：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg" alt="" /></p>
<p><strong>Comment类：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg" alt="" /></p>
<p><strong>User类：</strong></p>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg" alt="" /></p>
<h3 id="42-应用分层">4.2 应用分层</h3>
<p><img src="http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg" alt="" /></p>
<h3 id="43-命名约定">4.3 命名约定</h3>
<p><strong>Service/DAO层命名约定：</strong></p>
<ul>
<li>获取单个对象的方法用get做前缀。</li>
<li>获取多个对象的方法用list做前缀。</li>
<li>获取统计值的方法用count做前缀。</li>
<li>插入的方法用save(推荐)或insert做前缀。</li>
<li>删除的方法用remove(推荐)或delete做前缀。</li>
<li>修改的方法用update做前缀。</li>
</ul>
<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg" alt="" /></p>
<h2 id="5后台管理功能实现">5、后台管理功能实现</h2>
<h3 id="51-登录">5.1 登录</h3>
<p><strong>1、构建登录页面和后台管理首页</strong></p>
<p><strong>2、UserService和UserRepository</strong></p>
<p><strong>3、LoginController实现登录</strong></p>
<p><strong>4、MD5加密</strong></p>
<p><strong>5、登录拦截器</strong></p>
<h3 id="52-分类管理">5.2 分类管理</h3>
<p><strong>1、分类管理页面</strong></p>
<p><strong>2、分类列表分页</strong></p>
<pre><code class="language-javascript">{
  &quot;content&quot;:[
    {&quot;id&quot;:123,&quot;title&quot;:&quot;blog122&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:122,&quot;title&quot;:&quot;blog121&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:121,&quot;title&quot;:&quot;blog120&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:120,&quot;title&quot;:&quot;blog119&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:119,&quot;title&quot;:&quot;blog118&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:118,&quot;title&quot;:&quot;blog117&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:117,&quot;title&quot;:&quot;blog116&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:116,&quot;title&quot;:&quot;blog115&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:115,&quot;title&quot;:&quot;blog114&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:114,&quot;title&quot;:&quot;blog113&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:113,&quot;title&quot;:&quot;blog112&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:112,&quot;title&quot;:&quot;blog111&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:111,&quot;title&quot;:&quot;blog110&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:110,&quot;title&quot;:&quot;blog109&quot;,&quot;content&quot;:&quot;this is blog content&quot;},
    {&quot;id&quot;:109,&quot;title&quot;:&quot;blog108&quot;,&quot;content&quot;:&quot;this is blog content&quot;}],
  &quot;last&quot;:false,
  &quot;totalPages&quot;:9,
  &quot;totalElements&quot;:123,
  &quot;size&quot;:15,
  &quot;number&quot;:0,
  &quot;first&quot;:true,
  &quot;sort&quot;:[{
    &quot;direction&quot;:&quot;DESC&quot;,
    &quot;property&quot;:&quot;id&quot;,
    &quot;ignoreCase&quot;:false,
    &quot;nullHandling&quot;:&quot;NATIVE&quot;,
    &quot;ascending&quot;:false
  }],
  &quot;numberOfElements&quot;:15
}
</code></pre>
<p><strong>3、分类新增、修改、删除</strong></p>
<h3 id="53-标签管理">5.3 标签管理</h3>
<h3 id="54-博客管理">5.4 博客管理</h3>
<p><strong>1、博客分页查询</strong></p>
<p><strong>2、博客新增</strong></p>
<p><strong>3、博客修改</strong></p>
<p><strong>4、博客删除</strong></p>
<h2 id="6前端展示功能实现">6、前端展示功能实现</h2>
<h3 id="61-首页展示">6.1 首页展示</h3>
<p><strong>1、博客列表</strong></p>
<p><strong>2、top分类</strong></p>
<p><strong>3、top标签</strong></p>
<p><strong>4、最新博客推荐</strong></p>
<p><strong>5、博客详情</strong></p>
<p><strong>1、Markdown 转换 HTML</strong></p>
<ul>
<li><a href="https://github.com/atlassian/commonmark-java" target="_blank">commonmark-java  https://github.com/atlassian/commonmark-java</a></li>
<li>pom.xml引用commonmark和扩展插件</li>
</ul>
<pre><code class="language-xml">&lt;dependency&gt;
   &lt;groupId&gt;com.atlassian.commonmark&lt;/groupId&gt;
   &lt;artifactId&gt;commonmark&lt;/artifactId&gt;
   &lt;version&gt;0.10.0&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
   &lt;groupId&gt;com.atlassian.commonmark&lt;/groupId&gt;
   &lt;artifactId&gt;commonmark-ext-heading-anchor&lt;/artifactId&gt;
   &lt;version&gt;0.10.0&lt;/version&gt;
&lt;/dependency&gt;
&lt;dependency&gt;
   &lt;groupId&gt;com.atlassian.commonmark&lt;/groupId&gt;
   &lt;artifactId&gt;commonmark-ext-gfm-tables&lt;/artifactId&gt;
   &lt;version&gt;0.10.0&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>
<p><strong>2、评论功能</strong></p>
<ul>
<li>评论信息提交与回复功能</li>
<li>评论信息列表展示功能</li>
<li>管理员回复评论功能</li>
</ul>
<h3 id="62-分类页">6.2 分类页</h3>
<h3 id="63-标签页">6.3 标签页</h3>
<h3 id="64-归档页">6.4 归档页</h3>
<h3 id="65-关于我">6.5 关于我</h3>', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=20, isadmire=0, iscopyright=0, isrecommend=0, iscomment=1, issue=1, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=null, typeId=null, user=User{id=1, petname='程鑫', username='cx201125', password='dbd1a8bc623a690cd163ec0ade366995', mail='2543139363@qq.com', type=0, headportrait='/images/head.jpg', createtime=Wed Aug 26 18:02:27 CST 2020, updatetime=Wed Aug 26 18:02:30 CST 2020, blogs=[]}, type=Type{id=2, name='JAVA', blogs=[]}, tagsId='null', comments=[Comment{id=19, petname='程鑫', mail='2543139363@qq.com', headportrait='null', matter='null', createtime=null, blogId=null, blog=null, topId=null, top=null, bottom=[]}], tags=[Tag{id=1, name='mysql', Tag{id=4, name='spring']}}(String), blog(String)
2020-09-15 18:20:47.385 DEBUG 19640 --- [http-nio-8080-exec-6] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 18:20:47.887  INFO 19640 --- [http-nio-8080-exec-9] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/fragments/newblog', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.newblogs', args=[{}]}
2020-09-15 18:20:47.888 DEBUG 19640 --- [http-nio-8080-exec-9] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,3
2020-09-15 18:20:47.888 DEBUG 19640 --- [http-nio-8080-exec-9] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 18:20:47.896 DEBUG 19640 --- [http-nio-8080-exec-9] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 3
2020-09-15 18:20:47.897  INFO 19640 --- [http-nio-8080-exec-9] com.chenxin.blog.aspect.LogAspect        : Return ------ common/fragments :: newbloglist
2020-09-15 18:20:47.898 DEBUG 19640 --- [http-nio-8080-exec-9] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 18:20:47.900 DEBUG 19640 --- [http-nio-8080-exec-9] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/fragments/newblog(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.newblogs(String), {newblogs=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=21, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=16, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), common/fragments :: newbloglist(String)
2020-09-15 18:20:47.996 DEBUG 19640 --- [http-nio-8080-exec-9] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 18:25:50.589  INFO 18340 --- [restartedMain] com.chenxin.blog.BlogApplication         : Starting BlogApplication on LAPTOP-UGEIKVSJ with PID 18340 (D:\Program Files\idea-workaplace\blog\target\classes started by asus in D:\Program Files\idea-workaplace\blog)
2020-09-15 18:25:50.592 DEBUG 18340 --- [restartedMain] com.chenxin.blog.BlogApplication         : Running with Spring Boot v2.3.3.RELEASE, Spring v5.2.8.RELEASE
2020-09-15 18:25:50.592  INFO 18340 --- [restartedMain] com.chenxin.blog.BlogApplication         : The following profiles are active: dev
2020-09-15 18:25:50.651  INFO 18340 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-09-15 18:25:50.652  INFO 18340 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-09-15 18:25:51.464  INFO 18340 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-09-15 18:25:51.466  INFO 18340 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-09-15 18:25:51.496  INFO 18340 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 19ms. Found 0 Redis repository interfaces.
2020-09-15 18:25:52.175  INFO 18340 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-09-15 18:25:52.182  INFO 18340 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-09-15 18:25:52.182  INFO 18340 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.37]
2020-09-15 18:25:52.274  INFO 18340 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-09-15 18:25:52.274  INFO 18340 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1622 ms
2020-09-15 18:25:53.451  INFO 18340 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-09-15 18:25:53.561  INFO 18340 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-09-15 18:25:54.095  INFO 18340 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-09-15 18:25:54.134  INFO 18340 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-09-15 18:25:54.145  INFO 18340 --- [restartedMain] com.chenxin.blog.BlogApplication         : Started BlogApplication in 4.036 seconds (JVM running for 5.197)
2020-09-15 18:25:59.125  INFO 18340 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-09-15 18:25:59.125  INFO 18340 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-09-15 18:25:59.133  INFO 18340 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 8 ms
2020-09-15 18:25:59.156  INFO 18340 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://169.254.169.255:8080/', ip='169.254.169.255', classMethod='com.chenxin.blog.controller.IndexController.indexoage', args=[null, {}]}
2020-09-15 18:25:59.812  INFO 18340 --- [http-nio-8080-exec-1] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-09-15 18:25:59.840 DEBUG 18340 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByPaging_COUNT         : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0
2020-09-15 18:25:59.919 DEBUG 18340 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByPaging_COUNT         : ==> Parameters: 
2020-09-15 18:25:59.940 DEBUG 18340 --- [http-nio-8080-exec-1] c.c.b.m.B.findBlogByPaging_COUNT         : <==      Total: 1
2020-09-15 18:25:59.943 DEBUG 18340 --- [http-nio-8080-exec-1] c.c.b.m.BlogMapper.findBlogByPaging      : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 LIMIT ?
2020-09-15 18:25:59.946 DEBUG 18340 --- [http-nio-8080-exec-1] c.c.b.m.BlogMapper.findBlogByPaging      : ==> Parameters: 10(Integer)
2020-09-15 18:25:59.955 DEBUG 18340 --- [http-nio-8080-exec-1] c.c.b.m.BlogMapper.findBlogByPaging      : <==      Total: 5
2020-09-15 18:25:59.973 DEBUG 18340 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC limit 0,6
2020-09-15 18:25:59.975 DEBUG 18340 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 18:25:59.978 DEBUG 18340 --- [http-nio-8080-exec-1] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 18:25:59.982 DEBUG 18340 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByExample  : ==>  Preparing: SELECT t.id, t.NAME, COUNT( bt.blog_id ) countBlog FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.isrecommend = 0 GROUP BY id ORDER BY countBlog DESC limit 0,10
2020-09-15 18:25:59.983 DEBUG 18340 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByExample  : ==> Parameters: 
2020-09-15 18:25:59.987 DEBUG 18340 --- [http-nio-8080-exec-1] c.c.blog.mapper.TagMapper.findByExample  : <==      Total: 5
2020-09-15 18:25:59.991 DEBUG 18340 --- [http-nio-8080-exec-1] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,10
2020-09-15 18:25:59.992 DEBUG 18340 --- [http-nio-8080-exec-1] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 18:25:59.996 DEBUG 18340 --- [http-nio-8080-exec-1] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 5
2020-09-15 18:25:59.996  INFO 18340 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Return ------ /index
2020-09-15 18:25:59.997 DEBUG 18340 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 18:26:00.002 DEBUG 18340 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://169.254.169.255:8080/(String), 169.254.169.255(String), com.chenxin.blog.controller.IndexController.indexoage(String), null,{page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=5, pages=1, reasonable=false, pageSizeZero=false}, toptype=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], toptag=[Tag{id=1, name='mysql', Tag{id=6, name='mybaits', Tag{id=4, name='spring', Tag{id=2, name='大数据', Tag{id=8, name='python'], topblog=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=21, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=16, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=20, title='mysql数据库的查询拉', content='**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这是一篇好博客', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:27:27 CST 2019, updatetime=Thu Sep 05 09:44:20 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=24, title='JAVA是什么', content='##java是什么&sup3; &hearts;
虹口区我说的浓氨水', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='我is单词vhuiowdecvb', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 13 11:08:48 CST 2018, updatetime=Thu Sep 13 11:08:48 CST 2018, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), /index(String)
2020-09-15 18:26:00.102 DEBUG 18340 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 18:26:01.055  INFO 18340 --- [http-nio-8080-exec-5] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://169.254.169.255:8080/fragments/newblog', ip='169.254.169.255', classMethod='com.chenxin.blog.controller.IndexController.newblogs', args=[{}]}
2020-09-15 18:26:01.056 DEBUG 18340 --- [http-nio-8080-exec-5] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,3
2020-09-15 18:26:01.057 DEBUG 18340 --- [http-nio-8080-exec-5] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 18:26:01.062 DEBUG 18340 --- [http-nio-8080-exec-5] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 3
2020-09-15 18:26:01.064  INFO 18340 --- [http-nio-8080-exec-5] com.chenxin.blog.aspect.LogAspect        : Return ------ common/fragments :: newbloglist
2020-09-15 18:26:01.065 DEBUG 18340 --- [http-nio-8080-exec-5] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 18:26:01.067 DEBUG 18340 --- [http-nio-8080-exec-5] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://169.254.169.255:8080/fragments/newblog(String), 169.254.169.255(String), com.chenxin.blog.controller.IndexController.newblogs(String), {newblogs=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=21, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=16, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), common/fragments :: newbloglist(String)
2020-09-15 18:26:01.160 DEBUG 18340 --- [http-nio-8080-exec-5] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 18:26:55.594  INFO 18340 --- [http-nio-8080-exec-9] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://119.86.50.152:8080/', ip='119.86.50.152', classMethod='com.chenxin.blog.controller.IndexController.indexoage', args=[null, {}]}
2020-09-15 18:26:55.597 DEBUG 18340 --- [http-nio-8080-exec-9] c.c.b.m.B.findBlogByPaging_COUNT         : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0
2020-09-15 18:26:55.597 DEBUG 18340 --- [http-nio-8080-exec-9] c.c.b.m.B.findBlogByPaging_COUNT         : ==> Parameters: 
2020-09-15 18:26:55.599 DEBUG 18340 --- [http-nio-8080-exec-9] c.c.b.m.B.findBlogByPaging_COUNT         : <==      Total: 1
2020-09-15 18:26:55.601 DEBUG 18340 --- [http-nio-8080-exec-9] c.c.b.m.BlogMapper.findBlogByPaging      : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 LIMIT ?
2020-09-15 18:26:55.601 DEBUG 18340 --- [http-nio-8080-exec-9] c.c.b.m.BlogMapper.findBlogByPaging      : ==> Parameters: 10(Integer)
2020-09-15 18:26:55.616 DEBUG 18340 --- [http-nio-8080-exec-9] c.c.b.m.BlogMapper.findBlogByPaging      : <==      Total: 5
2020-09-15 18:26:55.617 DEBUG 18340 --- [http-nio-8080-exec-9] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC limit 0,6
2020-09-15 18:26:55.618 DEBUG 18340 --- [http-nio-8080-exec-9] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 18:26:55.620 DEBUG 18340 --- [http-nio-8080-exec-9] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 18:26:55.621 DEBUG 18340 --- [http-nio-8080-exec-9] c.c.blog.mapper.TagMapper.findByExample  : ==>  Preparing: SELECT t.id, t.NAME, COUNT( bt.blog_id ) countBlog FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.isrecommend = 0 GROUP BY id ORDER BY countBlog DESC limit 0,10
2020-09-15 18:26:55.621 DEBUG 18340 --- [http-nio-8080-exec-9] c.c.blog.mapper.TagMapper.findByExample  : ==> Parameters: 
2020-09-15 18:26:55.623 DEBUG 18340 --- [http-nio-8080-exec-9] c.c.blog.mapper.TagMapper.findByExample  : <==      Total: 5
2020-09-15 18:26:55.624 DEBUG 18340 --- [http-nio-8080-exec-9] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,10
2020-09-15 18:26:55.624 DEBUG 18340 --- [http-nio-8080-exec-9] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 18:26:55.630 DEBUG 18340 --- [http-nio-8080-exec-9] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 5
2020-09-15 18:26:55.630  INFO 18340 --- [http-nio-8080-exec-9] com.chenxin.blog.aspect.LogAspect        : Return ------ /index
2020-09-15 18:26:55.631 DEBUG 18340 --- [http-nio-8080-exec-9] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 18:26:55.632 DEBUG 18340 --- [http-nio-8080-exec-9] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://119.86.50.152:8080/(String), 119.86.50.152(String), com.chenxin.blog.controller.IndexController.indexoage(String), null,{page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=5, pages=1, reasonable=false, pageSizeZero=false}, toptype=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], toptag=[Tag{id=1, name='mysql', Tag{id=6, name='mybaits', Tag{id=4, name='spring', Tag{id=2, name='大数据', Tag{id=8, name='python'], topblog=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=21, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=16, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=20, title='mysql数据库的查询拉', content='**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这是一篇好博客', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:27:27 CST 2019, updatetime=Thu Sep 05 09:44:20 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=24, title='JAVA是什么', content='##java是什么&sup3; &hearts;
虹口区我说的浓氨水', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='我is单词vhuiowdecvb', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 13 11:08:48 CST 2018, updatetime=Thu Sep 13 11:08:48 CST 2018, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), /index(String)
2020-09-15 18:26:55.710 DEBUG 18340 --- [http-nio-8080-exec-9] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 18:26:56.172  INFO 18340 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://119.86.50.152:8080/fragments/newblog', ip='119.86.50.152', classMethod='com.chenxin.blog.controller.IndexController.newblogs', args=[{}]}
2020-09-15 18:26:56.172 DEBUG 18340 --- [http-nio-8080-exec-1] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,3
2020-09-15 18:26:56.172 DEBUG 18340 --- [http-nio-8080-exec-1] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 18:26:56.176 DEBUG 18340 --- [http-nio-8080-exec-1] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 3
2020-09-15 18:26:56.177  INFO 18340 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Return ------ common/fragments :: newbloglist
2020-09-15 18:26:56.178 DEBUG 18340 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 18:26:56.181 DEBUG 18340 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://119.86.50.152:8080/fragments/newblog(String), 119.86.50.152(String), com.chenxin.blog.controller.IndexController.newblogs(String), {newblogs=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=21, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=16, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), common/fragments :: newbloglist(String)
2020-09-15 18:26:56.318 DEBUG 18340 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 18:39:43.580  INFO 7624 --- [main] com.chenxin.blog.BlogApplicationTests    : Starting BlogApplicationTests on LAPTOP-UGEIKVSJ with PID 7624 (started by asus in D:\Program Files\idea-workaplace\blog)
2020-09-15 18:39:43.594 DEBUG 7624 --- [main] com.chenxin.blog.BlogApplicationTests    : Running with Spring Boot v2.3.3.RELEASE, Spring v5.2.8.RELEASE
2020-09-15 18:39:43.594  INFO 7624 --- [main] com.chenxin.blog.BlogApplicationTests    : The following profiles are active: dev
2020-09-15 18:39:44.938  INFO 7624 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-09-15 18:39:44.941  INFO 7624 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-09-15 18:39:45.056  INFO 7624 --- [main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 36ms. Found 0 Redis repository interfaces.
2020-09-15 18:39:49.416  INFO 7624 --- [main] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-09-15 18:39:49.657  INFO 7624 --- [main] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-09-15 18:39:50.865  INFO 7624 --- [main] com.chenxin.blog.BlogApplicationTests    : Started BlogApplicationTests in 8.026 seconds (JVM running for 9.424)
2020-09-15 18:39:53.392  INFO 7624 --- [main] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-09-15 18:39:53.401 DEBUG 7624 --- [main] c.c.b.m.TagMapper.selectByPrimaryKey     : ==>  Preparing: select id, name from cx_tag where id = ?
2020-09-15 18:39:53.605 DEBUG 7624 --- [main] c.c.b.m.TagMapper.selectByPrimaryKey     : ==> Parameters: 1(Long)
2020-09-15 18:39:53.674 DEBUG 7624 --- [main] c.c.b.m.TagMapper.selectByPrimaryKey     : <==      Total: 1
2020-09-15 18:39:53.815 DEBUG 7624 --- [main] c.c.b.m.TypeMapper.findByPaging_COUNT    : ==>  Preparing: SELECT count(0) FROM cx_type
2020-09-15 18:39:53.817 DEBUG 7624 --- [main] c.c.b.m.TypeMapper.findByPaging_COUNT    : ==> Parameters: 
2020-09-15 18:39:53.881 DEBUG 7624 --- [main] c.c.b.m.TypeMapper.findByPaging_COUNT    : <==      Total: 1
2020-09-15 18:39:53.883 DEBUG 7624 --- [main] c.c.blog.mapper.TypeMapper.findByPaging  : ==>  Preparing: select id, name from cx_type LIMIT ?
2020-09-15 18:39:53.899 DEBUG 7624 --- [main] c.c.blog.mapper.TypeMapper.findByPaging  : ==> Parameters: 10(Integer)
2020-09-15 18:39:53.905 DEBUG 7624 --- [main] c.c.blog.mapper.TypeMapper.findByPaging  : <==      Total: 5
2020-09-15 18:39:53.928 DEBUG 7624 --- [main] c.c.blog.mapper.BlogMapper.getBlogById   : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag, b.description,b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id, t.id t_id,t.name t_name,y.id y_id,y.name y_name from cx_blog b LEFT JOIN cx_blog_tag bt ON b.id = bt.blog_id LEFT JOIN cx_type y ON b.type_id=y.id LEFT JOIN cx_tag t ON bt.tag_id=t.id WHERE b.id=?
2020-09-15 18:39:53.937 DEBUG 7624 --- [main] c.c.blog.mapper.BlogMapper.getBlogById   : ==> Parameters: 15(Long)
2020-09-15 18:39:53.955 DEBUG 7624 --- [main] c.c.blog.mapper.BlogMapper.getBlogById   : <==      Total: 0
2020-09-15 18:39:54.062 DEBUG 7624 --- [main] c.c.b.m.CommentMapper.selectByExample    : ==>  Preparing: select id, petname, mail, headportrait, matter, createtime,isadmain,blog_id, top_id from cx_comment WHERE ( blog_id = ? and top_id is null ) order by createtime desc
2020-09-15 18:39:54.076 DEBUG 7624 --- [main] c.c.b.m.CommentMapper.selectByExample    : ==> Parameters: 19(Long)
2020-09-15 18:39:54.098 DEBUG 7624 --- [main] c.c.b.m.CommentMapper.selectByExample    : <==      Total: 7
2020-09-15 18:39:54.100 DEBUG 7624 --- [main] c.c.b.m.CommentMapper.selectByExample    : ==>  Preparing: select id, petname, mail, headportrait, matter, createtime,isadmain,blog_id, top_id from cx_comment WHERE ( top_id = ? ) order by createtime desc
2020-09-15 18:39:54.101 DEBUG 7624 --- [main] c.c.b.m.CommentMapper.selectByExample    : ==> Parameters: 40(Long)
2020-09-15 18:39:54.102 DEBUG 7624 --- [main] c.c.b.m.CommentMapper.selectByExample    : <==      Total: 0
2020-09-15 18:39:54.103 DEBUG 7624 --- [main] c.c.b.m.CommentMapper.selectByExample    : ==>  Preparing: select id, petname, mail, headportrait, matter, createtime,isadmain,blog_id, top_id from cx_comment WHERE ( top_id = ? ) order by createtime desc
2020-09-15 18:39:54.104 DEBUG 7624 --- [main] c.c.b.m.CommentMapper.selectByExample    : ==> Parameters: 34(Long)
2020-09-15 18:39:54.107 DEBUG 7624 --- [main] c.c.b.m.CommentMapper.selectByExample    : <==      Total: 4
2020-09-15 18:39:54.108 DEBUG 7624 --- [main] c.c.b.m.CommentMapper.selectByExample    : ==>  Preparing: select id, petname, mail, headportrait, matter, createtime,isadmain,blog_id, top_id from cx_comment WHERE ( top_id = ? ) order by createtime desc
2020-09-15 18:39:54.109 DEBUG 7624 --- [main] c.c.b.m.CommentMapper.selectByExample    : ==> Parameters: 39(Long)
2020-09-15 18:39:54.111 DEBUG 7624 --- [main] c.c.b.m.CommentMapper.selectByExample    : <==      Total: 0
2020-09-15 18:39:54.114 DEBUG 7624 --- [main] c.c.b.m.CommentMapper.selectByExample    : ==>  Preparing: select id, petname, mail, headportrait, matter, createtime,isadmain,blog_id, top_id from cx_comment WHERE ( top_id = ? ) order by createtime desc
2020-09-15 18:39:54.115 DEBUG 7624 --- [main] c.c.b.m.CommentMapper.selectByExample    : ==> Parameters: 35(Long)
2020-09-15 18:39:54.117 DEBUG 7624 --- [main] c.c.b.m.CommentMapper.selectByExample    : <==      Total: 2
2020-09-15 18:39:54.119 DEBUG 7624 --- [main] c.c.b.m.CommentMapper.selectByExample    : ==>  Preparing: select id, petname, mail, headportrait, matter, createtime,isadmain,blog_id, top_id from cx_comment WHERE ( top_id = ? ) order by createtime desc
2020-09-15 18:39:54.120 DEBUG 7624 --- [main] c.c.b.m.CommentMapper.selectByExample    : ==> Parameters: 36(Long)
2020-09-15 18:39:54.121 DEBUG 7624 --- [main] c.c.b.m.CommentMapper.selectByExample    : <==      Total: 0
2020-09-15 18:39:54.122 DEBUG 7624 --- [main] c.c.b.m.CommentMapper.selectByExample    : ==>  Preparing: select id, petname, mail, headportrait, matter, createtime,isadmain,blog_id, top_id from cx_comment WHERE ( top_id = ? ) order by createtime desc
2020-09-15 18:39:54.123 DEBUG 7624 --- [main] c.c.b.m.CommentMapper.selectByExample    : ==> Parameters: 6(Long)
2020-09-15 18:39:54.124 DEBUG 7624 --- [main] c.c.b.m.CommentMapper.selectByExample    : <==      Total: 1
2020-09-15 18:39:54.126 DEBUG 7624 --- [main] c.c.b.m.CommentMapper.selectByExample    : ==>  Preparing: select id, petname, mail, headportrait, matter, createtime,isadmain,blog_id, top_id from cx_comment WHERE ( top_id = ? ) order by createtime desc
2020-09-15 18:39:54.127 DEBUG 7624 --- [main] c.c.b.m.CommentMapper.selectByExample    : ==> Parameters: 37(Long)
2020-09-15 18:39:54.130 DEBUG 7624 --- [main] c.c.b.m.CommentMapper.selectByExample    : <==      Total: 1
2020-09-15 18:39:54.131 DEBUG 7624 --- [main] c.c.b.m.CommentMapper.selectByExample    : ==>  Preparing: select id, petname, mail, headportrait, matter, createtime,isadmain,blog_id, top_id from cx_comment WHERE ( top_id = ? ) order by createtime desc
2020-09-15 18:39:54.132 DEBUG 7624 --- [main] c.c.b.m.CommentMapper.selectByExample    : ==> Parameters: 38(Long)
2020-09-15 18:39:54.133 DEBUG 7624 --- [main] c.c.b.m.CommentMapper.selectByExample    : <==      Total: 0
2020-09-15 18:39:54.134 DEBUG 7624 --- [main] c.c.b.m.CommentMapper.selectByExample    : ==>  Preparing: select id, petname, mail, headportrait, matter, createtime,isadmain,blog_id, top_id from cx_comment WHERE ( top_id = ? ) order by createtime desc
2020-09-15 18:39:54.134 DEBUG 7624 --- [main] c.c.b.m.CommentMapper.selectByExample    : ==> Parameters: 8(Long)
2020-09-15 18:39:54.135 DEBUG 7624 --- [main] c.c.b.m.CommentMapper.selectByExample    : <==      Total: 0
2020-09-15 18:39:54.137 DEBUG 7624 --- [main] c.c.b.m.CommentMapper.selectByExample    : ==>  Preparing: select id, petname, mail, headportrait, matter, createtime,isadmain,blog_id, top_id from cx_comment WHERE ( top_id = ? ) order by createtime desc
2020-09-15 18:39:54.137 DEBUG 7624 --- [main] c.c.b.m.CommentMapper.selectByExample    : ==> Parameters: 7(Long)
2020-09-15 18:39:54.138 DEBUG 7624 --- [main] c.c.b.m.CommentMapper.selectByExample    : <==      Total: 0
2020-09-15 18:39:54.140 DEBUG 7624 --- [main] c.c.b.m.CommentMapper.selectByExample    : ==>  Preparing: select id, petname, mail, headportrait, matter, createtime,isadmain,blog_id, top_id from cx_comment WHERE ( top_id = ? ) order by createtime desc
2020-09-15 18:39:54.141 DEBUG 7624 --- [main] c.c.b.m.CommentMapper.selectByExample    : ==> Parameters: 5(Long)
2020-09-15 18:39:54.145 DEBUG 7624 --- [main] c.c.b.m.CommentMapper.selectByExample    : <==      Total: 1
2020-09-15 18:39:54.147 DEBUG 7624 --- [main] c.c.b.m.CommentMapper.selectByExample    : ==>  Preparing: select id, petname, mail, headportrait, matter, createtime,isadmain,blog_id, top_id from cx_comment WHERE ( top_id = ? ) order by createtime desc
2020-09-15 18:39:54.148 DEBUG 7624 --- [main] c.c.b.m.CommentMapper.selectByExample    : ==> Parameters: 41(Long)
2020-09-15 18:39:54.149 DEBUG 7624 --- [main] c.c.b.m.CommentMapper.selectByExample    : <==      Total: 0
2020-09-15 18:39:54.151 DEBUG 7624 --- [main] c.c.b.m.CommentMapper.selectByExample    : ==>  Preparing: select id, petname, mail, headportrait, matter, createtime,isadmain,blog_id, top_id from cx_comment WHERE ( top_id = ? ) order by createtime desc
2020-09-15 18:39:54.151 DEBUG 7624 --- [main] c.c.b.m.CommentMapper.selectByExample    : ==> Parameters: 4(Long)
2020-09-15 18:39:54.153 DEBUG 7624 --- [main] c.c.b.m.CommentMapper.selectByExample    : <==      Total: 1
2020-09-15 18:39:54.155 DEBUG 7624 --- [main] c.c.b.m.CommentMapper.selectByExample    : ==>  Preparing: select id, petname, mail, headportrait, matter, createtime,isadmain,blog_id, top_id from cx_comment WHERE ( top_id = ? ) order by createtime desc
2020-09-15 18:39:54.155 DEBUG 7624 --- [main] c.c.b.m.CommentMapper.selectByExample    : ==> Parameters: 42(Long)
2020-09-15 18:39:54.156 DEBUG 7624 --- [main] c.c.b.m.CommentMapper.selectByExample    : <==      Total: 0
2020-09-15 18:39:54.159 DEBUG 7624 --- [main] c.c.b.m.CommentMapper.selectByExample    : ==>  Preparing: select id, petname, mail, headportrait, matter, createtime,isadmain,blog_id, top_id from cx_comment WHERE ( top_id = ? ) order by createtime desc
2020-09-15 18:39:54.159 DEBUG 7624 --- [main] c.c.b.m.CommentMapper.selectByExample    : ==> Parameters: 3(Long)
2020-09-15 18:39:54.161 DEBUG 7624 --- [main] c.c.b.m.CommentMapper.selectByExample    : <==      Total: 0
2020-09-15 18:39:54.163 DEBUG 7624 --- [main] c.c.b.m.CommentMapper.selectByExample    : ==>  Preparing: select id, petname, mail, headportrait, matter, createtime,isadmain,blog_id, top_id from cx_comment WHERE ( top_id = ? ) order by createtime desc
2020-09-15 18:39:54.163 DEBUG 7624 --- [main] c.c.b.m.CommentMapper.selectByExample    : ==> Parameters: 2(Long)
2020-09-15 18:39:54.165 DEBUG 7624 --- [main] c.c.b.m.CommentMapper.selectByExample    : <==      Total: 0
2020-09-15 18:39:54.166 DEBUG 7624 --- [main] c.c.b.m.CommentMapper.selectByExample    : ==>  Preparing: select id, petname, mail, headportrait, matter, createtime,isadmain,blog_id, top_id from cx_comment WHERE ( top_id = ? ) order by createtime desc
2020-09-15 18:39:54.166 DEBUG 7624 --- [main] c.c.b.m.CommentMapper.selectByExample    : ==> Parameters: 1(Long)
2020-09-15 18:39:54.167 DEBUG 7624 --- [main] c.c.b.m.CommentMapper.selectByExample    : <==      Total: 0
2020-09-15 18:39:54.226  INFO 7624 --- [SpringContextShutdownHook] o.s.s.concurrent.ThreadPoolTaskExecutor  : Shutting down ExecutorService 'applicationTaskExecutor'
2020-09-15 18:39:54.354  INFO 7624 --- [SpringContextShutdownHook] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} closed
2020-09-15 18:58:11.187  INFO 18476 --- [restartedMain] com.chenxin.blog.BlogApplication         : Starting BlogApplication on LAPTOP-UGEIKVSJ with PID 18476 (D:\Program Files\idea-workaplace\blog\target\classes started by asus in D:\Program Files\idea-workaplace\blog)
2020-09-15 18:58:11.201 DEBUG 18476 --- [restartedMain] com.chenxin.blog.BlogApplication         : Running with Spring Boot v2.3.3.RELEASE, Spring v5.2.8.RELEASE
2020-09-15 18:58:11.201  INFO 18476 --- [restartedMain] com.chenxin.blog.BlogApplication         : The following profiles are active: dev
2020-09-15 18:58:11.271  INFO 18476 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-09-15 18:58:11.271  INFO 18476 --- [restartedMain] .e.DevToolsPropertyDefaultsPostProcessor : For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
2020-09-15 18:58:13.097  INFO 18476 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode!
2020-09-15 18:58:13.100  INFO 18476 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data Redis repositories in DEFAULT mode.
2020-09-15 18:58:13.205  INFO 18476 --- [restartedMain] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 36ms. Found 0 Redis repository interfaces.
2020-09-15 18:58:14.382  INFO 18476 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat initialized with port(s): 8080 (http)
2020-09-15 18:58:14.390  INFO 18476 --- [restartedMain] o.apache.catalina.core.StandardService   : Starting service [Tomcat]
2020-09-15 18:58:14.391  INFO 18476 --- [restartedMain] org.apache.catalina.core.StandardEngine  : Starting Servlet engine: [Apache Tomcat/9.0.37]
2020-09-15 18:58:14.486  INFO 18476 --- [restartedMain] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext
2020-09-15 18:58:14.486  INFO 18476 --- [restartedMain] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 3215 ms
2020-09-15 18:58:16.008  INFO 18476 --- [restartedMain] o.s.s.concurrent.ThreadPoolTaskExecutor  : Initializing ExecutorService 'applicationTaskExecutor'
2020-09-15 18:58:16.104  INFO 18476 --- [restartedMain] o.s.b.a.w.s.WelcomePageHandlerMapping    : Adding welcome page template: index
2020-09-15 18:58:17.421  INFO 18476 --- [restartedMain] o.s.b.d.a.OptionalLiveReloadServer       : LiveReload server is running on port 35729
2020-09-15 18:58:17.510  INFO 18476 --- [restartedMain] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path ''
2020-09-15 18:58:17.521  INFO 18476 --- [restartedMain] com.chenxin.blog.BlogApplication         : Started BlogApplication in 7.058 seconds (JVM running for 8.545)
2020-09-15 18:58:20.631  INFO 18476 --- [http-nio-8080-exec-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring DispatcherServlet 'dispatcherServlet'
2020-09-15 18:58:20.631  INFO 18476 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Initializing Servlet 'dispatcherServlet'
2020-09-15 18:58:20.641  INFO 18476 --- [http-nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed initialization in 10 ms
2020-09-15 18:58:20.688  INFO 18476 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/about', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.AboutController.about', args=[{}]}
2020-09-15 18:58:20.691  INFO 18476 --- [http-nio-8080-exec-1] com.chenxin.blog.aspect.LogAspect        : Return ------ about
2020-09-15 18:58:21.487  INFO 18476 --- [http-nio-8080-exec-1] com.alibaba.druid.pool.DruidDataSource   : {dataSource-1} inited
2020-09-15 18:58:21.491 DEBUG 18476 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 18:58:21.639 DEBUG 18476 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/about(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.AboutController.about(String), {about=About{petname='程鑫', intro_1='一个独立开发者，折腾在 0 和 1 世界的大叔；一个终身学习者，誓将学习无限循环. 希望结识可以共同成长的小伙伴.', intro_2='热爱编程，喜欢折腾，正在探索高效学习编程技术的方法...', loves=[篮球, 编程, 跑步, 王者], skill=[java, javaScript, Node, mysql, spring, Redis, Linux]}}(String), about(String)
2020-09-15 18:58:21.677 DEBUG 18476 --- [http-nio-8080-exec-1] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 18:58:22.588  INFO 18476 --- [http-nio-8080-exec-10] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/fragments/newblog', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.newblogs', args=[{}]}
2020-09-15 18:58:22.692 DEBUG 18476 --- [http-nio-8080-exec-10] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,3
2020-09-15 18:58:22.780 DEBUG 18476 --- [http-nio-8080-exec-10] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 18:58:22.825 DEBUG 18476 --- [http-nio-8080-exec-10] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 3
2020-09-15 18:58:22.831  INFO 18476 --- [http-nio-8080-exec-10] com.chenxin.blog.aspect.LogAspect        : Return ------ common/fragments :: newbloglist
2020-09-15 18:58:22.831 DEBUG 18476 --- [http-nio-8080-exec-10] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 18:58:22.834 DEBUG 18476 --- [http-nio-8080-exec-10] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/fragments/newblog(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.newblogs(String), {newblogs=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=21, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=16, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), common/fragments :: newbloglist(String)
2020-09-15 18:58:22.910 DEBUG 18476 --- [http-nio-8080-exec-10] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 18:58:26.842  INFO 18476 --- [http-nio-8080-exec-3] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.indexoage', args=[null, {}]}
2020-09-15 18:58:27.092 DEBUG 18476 --- [http-nio-8080-exec-3] c.c.b.m.B.findBlogByPaging_COUNT         : ==>  Preparing: SELECT count(0) FROM cx_blog b LEFT JOIN cx_type y ON b.type_id = y.id LEFT JOIN cx_user u ON b.user_id = u.id WHERE b.isrecommend = 0
2020-09-15 18:58:27.134 DEBUG 18476 --- [http-nio-8080-exec-3] c.c.b.m.B.findBlogByPaging_COUNT         : ==> Parameters: 
2020-09-15 18:58:27.137 DEBUG 18476 --- [http-nio-8080-exec-3] c.c.b.m.B.findBlogByPaging_COUNT         : <==      Total: 1
2020-09-15 18:58:27.139 DEBUG 18476 --- [http-nio-8080-exec-3] c.c.b.m.BlogMapper.findBlogByPaging      : ==>  Preparing: SELECT b.id, b.title, b.content, b.firstPicture, b.flag,b.description, b.viewcount, b.isadmire, b.iscopyright, b.iscomment,b.isrecommend, b.issue, b.createtime, b.updatetime, b.user_id, b.type_id,y.id y_id,y.name y_name,u.id u_id, u.petname, u.username, u.password, u.mail, u.type, u.headportrait u_headportrait, u.createtime u_createtime, u.updatetime u_updatetime FROM cx_blog b left join cx_type y on b.type_id=y.id left join cx_user u on b.user_id=u.id WHERE b.isrecommend=0 LIMIT ?
2020-09-15 18:58:27.142 DEBUG 18476 --- [http-nio-8080-exec-3] c.c.b.m.BlogMapper.findBlogByPaging      : ==> Parameters: 10(Integer)
2020-09-15 18:58:27.150 DEBUG 18476 --- [http-nio-8080-exec-3] c.c.b.m.BlogMapper.findBlogByPaging      : <==      Total: 5
2020-09-15 18:58:27.156 DEBUG 18476 --- [http-nio-8080-exec-3] c.c.b.mapper.TypeMapper.findByExample    : ==>  Preparing: SELECT y.id, y.NAME, COUNT(b.id) countBlog FROM cx_type y LEFT JOIN cx_blog b ON y.id = b.type_id WHERE b.isrecommend=0 GROUP BY id ORDER BY countBlog DESC limit 0,6
2020-09-15 18:58:27.158 DEBUG 18476 --- [http-nio-8080-exec-3] c.c.b.mapper.TypeMapper.findByExample    : ==> Parameters: 
2020-09-15 18:58:27.161 DEBUG 18476 --- [http-nio-8080-exec-3] c.c.b.mapper.TypeMapper.findByExample    : <==      Total: 2
2020-09-15 18:58:27.165 DEBUG 18476 --- [http-nio-8080-exec-3] c.c.blog.mapper.TagMapper.findByExample  : ==>  Preparing: SELECT t.id, t.NAME, COUNT( bt.blog_id ) countBlog FROM cx_tag t LEFT JOIN cx_blog_tag bt ON t.id = bt.tag_id LEFT JOIN cx_blog b ON b.id = bt.blog_id WHERE b.isrecommend = 0 GROUP BY id ORDER BY countBlog DESC limit 0,10
2020-09-15 18:58:27.166 DEBUG 18476 --- [http-nio-8080-exec-3] c.c.blog.mapper.TagMapper.findByExample  : ==> Parameters: 
2020-09-15 18:58:27.169 DEBUG 18476 --- [http-nio-8080-exec-3] c.c.blog.mapper.TagMapper.findByExample  : <==      Total: 5
2020-09-15 18:58:27.170 DEBUG 18476 --- [http-nio-8080-exec-3] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,10
2020-09-15 18:58:27.171 DEBUG 18476 --- [http-nio-8080-exec-3] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 18:58:27.175 DEBUG 18476 --- [http-nio-8080-exec-3] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 5
2020-09-15 18:58:27.175  INFO 18476 --- [http-nio-8080-exec-3] com.chenxin.blog.aspect.LogAspect        : Return ------ /index
2020-09-15 18:58:27.176 DEBUG 18476 --- [http-nio-8080-exec-3] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 18:58:27.177 DEBUG 18476 --- [http-nio-8080-exec-3] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.indexoage(String), null,{page=Page{count=true, pageNum=1, pageSize=10, startRow=0, endRow=10, total=5, pages=1, reasonable=false, pageSizeZero=false}, toptype=[Type{id=2, name='JAVA', blogs=[]}, Type{id=1, name='CSS', blogs=[]}], toptag=[Tag{id=1, name='mysql', Tag{id=6, name='mybaits', Tag{id=4, name='spring', Tag{id=2, name='大数据', Tag{id=8, name='python'], topblog=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=21, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=16, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=20, title='mysql数据库的查询拉', content='**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这是一篇好博客', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:27:27 CST 2019, updatetime=Thu Sep 05 09:44:20 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=24, title='JAVA是什么', content='##java是什么&sup3; &hearts;
虹口区我说的浓氨水', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='我is单词vhuiowdecvb', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 13 11:08:48 CST 2018, updatetime=Thu Sep 13 11:08:48 CST 2018, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), /index(String)
2020-09-15 18:58:27.219 DEBUG 18476 --- [http-nio-8080-exec-3] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
2020-09-15 18:58:27.655  INFO 18476 --- [http-nio-8080-exec-7] com.chenxin.blog.aspect.LogAspect        : Rquest  ----- RequestLog{url='http://localhost:8080/fragments/newblog', ip='0:0:0:0:0:0:0:1', classMethod='com.chenxin.blog.controller.IndexController.newblogs', args=[{}]}
2020-09-15 18:58:27.656 DEBUG 18476 --- [http-nio-8080-exec-7] c.c.b.mapper.BlogMapper.selectByExample  : ==>  Preparing: select id, title, content, firstPicture, flag, description,viewcount, isadmire, iscopyright, iscomment, isrecommend issue, createtime, updatetime, user_id, type_id from cx_blog order by updatetime DESC limit 0,3
2020-09-15 18:58:27.656 DEBUG 18476 --- [http-nio-8080-exec-7] c.c.b.mapper.BlogMapper.selectByExample  : ==> Parameters: 
2020-09-15 18:58:27.664 DEBUG 18476 --- [http-nio-8080-exec-7] c.c.b.mapper.BlogMapper.selectByExample  : <==      Total: 3
2020-09-15 18:58:27.666  INFO 18476 --- [http-nio-8080-exec-7] com.chenxin.blog.aspect.LogAspect        : Return ------ common/fragments :: newbloglist
2020-09-15 18:58:27.667 DEBUG 18476 --- [http-nio-8080-exec-7] c.c.blog.mapper.LogMapper.insertLog      : ==>  Preparing: insert into log values(?,?,?,?,?,?)
2020-09-15 18:58:27.669 DEBUG 18476 --- [http-nio-8080-exec-7] c.c.blog.mapper.LogMapper.insertLog      : ==> Parameters: null, http://localhost:8080/fragments/newblog(String), 0:0:0:0:0:0:0:1(String), com.chenxin.blog.controller.IndexController.newblogs(String), {newblogs=[Blog{id=19, title='mysql数据库的查询拉', content='# Spring Boot开发小而美的个人博客

>  作者：李仁密



**个人博客功能：**

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

**技术组合：**

*  后端：Spring Boot + JPA + thymeleaf模板
*  数据库：MySQL
*  前端UI：Semantic UI框架

**工具与环境：**

*  IDEA
*  Maven 3
*  JDK 8
*  Axure RP 8

**课程内容模块：**

*  需求分析与功能规划
*  页面设计与开发
*  技术框架搭建
*  后端管理功能实现
*  前端管理功能实现

**你能学得什么？**

*  基于Spring Boot的完整全栈式的开发套路
*  Semantic UI框架的使用
*  一套博客系统的源代码与设计

## 1、需求与功能

### 1.1 用户故事

用户故事是敏捷框架中的一种开发方法。可以帮助开发者转换视角，以用户的角度更好的把握需求，从而实现具有商业价值的功能。

>  用户故事最好是用户团队编写

**用户故事模板**：

-  As a (role of user), I want (some feature) so that (some business value).
-  作为一个(某个角色) 使用者，我可以做(某个功能) 事情，如此可以有(某个商业价值) 的好处

**关键点**：角色、功能、商业价值

**举例**：

-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成



[编辑器 Markdown](https://pandao.github.io/editor.md/)

[内容排版 typo.css](https://github.com/sofish/typo.css)

[动画 animate.css](https://daneden.github.io/animate.css/)

[代码高亮 prism](https://github.com/PrismJS/prism)

[目录生成 Tocbot](https://tscanlin.github.io/tocbot/)

[滚动侦测 waypoints](http://imakewebthings.com/waypoints/)

[平滑滚动 jquery.scrollTo](https://github.com/flesler/jquery.scrollTo)

[二维码生成 qrcode.js](https://davidshimjs.github.io/qrcodejs/)

## 3、框架搭建

>  [IDEA下载 https://www.jetbrains.com/idea/](https://www.jetbrains.com/idea/)

### 3.1 构建与配置

**1、引入Spring Boot模块：**

*  web
*  Thymeleaf
*  JPA
*  MySQL
*  Aspects
*  DevTools

**2、application.yml配置**

*  使用 thymeleaf 3

   pom.xml:

```xml
<thymeleaf.version>3.0.2.RELEASE</thymeleaf.version>
<thymeleaf-layout-dialect.version>2.1.1</thymeleaf-layout-dialect.version>
```


  	application.yml:

```yaml
spring:
  thymeleaf:
    mode: HTML
```

*  数据库连接配置

```yaml
spring:
  datasource:
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://localhost:3306/blog?useUnicode=true&characterEncoding=utf-8
    username: root
    password: root
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
```

*  日志配置

   application.yml:

```yaml
logging:
  level:
    root: info
    com.imcoding: debug
  file: log/imcoding.log
```

​	logback-spring.xml：

```xml
<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <!--包含Spring boot对logback日志的默认配置-->
    <include resource="org/springframework/boot/logging/logback/defaults.xml" />
    <property name="LOG_FILE" value="${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}"/>
    <include resource="org/springframework/boot/logging/logback/console-appender.xml" />

    <!--重写了Spring Boot框架 org/springframework/boot/logging/logback/file-appender.xml 配置-->
    <appender name="TIME_FILE"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <encoder>
            <pattern>${FILE_LOG_PATTERN}</pattern>
        </encoder>
        <file>${LOG_FILE}</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_FILE}.%d{yyyy-MM-dd}.%i</fileNamePattern>
            <!--保留历史日志一个月的时间-->
            <maxHistory>30</maxHistory>
            <!--
            Spring Boot默认情况下，日志文件10M时，会切分日志文件,这样设置日志文件会在100M时切分日志
            -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

        </rollingPolicy>
    </appender>

    <root level="INFO">
        <appender-ref ref="CONSOLE" />
        <appender-ref ref="TIME_FILE" />
    </root>

</configuration>
<!--
    1、继承Spring boot logback设置（可以在appliaction.yml或者application.properties设置logging.*属性）
    2、重写了默认配置，设置日志文件大小在100MB时，按日期切分日志，切分后目录：

        my.2017-08-01.0   80MB
        my.2017-08-01.1   10MB
        my.2017-08-02.0   56MB
        my.2017-08-03.0   53MB
        ......
-->
```

*  生产环境与开发环境配置
   *  application-dev.yml
   *  application-pro.yml

### 3.2 异常处理

**1、定义错误页面**

*  404
*  500
*  error

**2、全局处理异常**

统一处理异常：

```java
@ControllerAdvice
public class ControllerExceptionHandler {

    private final Logger logger = LoggerFactory.getLogger(ControllerExceptionHandler.class);
    /**
     * 异常处理
     * @param request
     * @param e
     * @return
     */
    @ExceptionHandler({Exception.class})
    public ModelAndView handleException(HttpServletRequest request, Exception e) throws Exception {

        logger.error("Request URL : {} , Exception : {}", request.getRequestURL(), e);

        if (AnnotationUtils.findAnnotation(e.getClass(), ResponseStatus.class) != null) {
            throw e;
        }
        ModelAndView mav = new ModelAndView();
        mav.addObject("url", request.getRequestURL());
        mav.addObject("exception", e);
        mav.setViewName("error/error");

        return mav;
    }
}
```



错误页面异常信息显示处理：

```html
<div>
    <div th:utext="'&lt;!--'" th:remove="tag"></div>
    <div th:utext="'Failed Request URL : ' + ${url}" th:remove="tag"></div>
    <div th:utext="'Exception message : ' + ${exception.message}" th:remove="tag"></div>
    <ul th:remove="tag">
        <li th:each="st : ${exception.stackTrace}" th:remove="tag"><span th:utext="${st}" th:remove="tag"></span></li>
    </ul>
    <div th:utext="'--&gt;'" th:remove="tag"></div>
</div>
```



**3、资源找不到异常**

```java
@ResponseStatus(HttpStatus.NOT_FOUND)
public class NotFoundExcepiton extends RuntimeException {

    public NotFoundExcepiton() {
    }

    public NotFoundExcepiton(String message) {
        super(message);
    }

    public NotFoundExcepiton(String message, Throwable cause) {
        super(message, cause);
    }
}
```



### 3.3 日志处理

**1、记录日志内容**

*  请求 url
*  访问者 ip
*  调用方法 classMethod
*  参数 args
*  返回内容

**2、记录日志类：**

```java
@Aspect
@Component
public class LogAspect {

    private final Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * 定义切面
     */
    @Pointcut("execution(* com.imcoding.web.*.*(..))")
    public void log() {
    }

    @Before("log()")
    public void doBefore(JoinPoint joinPoint) {
        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
        HttpServletRequest request = attributes.getRequest();
        String classMethod = joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName();
        ReqeustLog reqeustLog = new ReqeustLog(
                request.getRequestURL().toString(),
                request.getRemoteAddr(),
                classMethod,
                joinPoint.getArgs()
        );
        logger.info("Rquest  ----- {}",reqeustLog);
    }

    @After("log()")
    public void doAfter() {
        //logger.info("---------- doAfter 2 ----------");
    }

    @AfterReturning(returning = "result",pointcut = "log()")
    public void doAtfertRturning(Object result) {
        logger.info("Return ------ {}",result );
    }


    private class ReqeustLog {
        private String url;
        private String ip;
        private String classMethod;
        private Object[] args;

        public ReqeustLog(String url, String ip, String classMethod, Object[] args) {
            this.url = url;
            this.ip = ip;
            this.classMethod = classMethod;
            this.args = args;
        }

        @Override
        public String toString() {
            return "ReqeustLog{" +
                    "url='" + url + '\'' +
                    ", ip='" + ip + '\'' +
                    ", classMethod='" + classMethod + '\'' +
                    ", args=" + Arrays.toString(args) +
                    '}';
        }
    }

}
```



### 3.4 页面处理



**1、静态页面导入project**

**2、thymeleaf布局**

*  定义fragment
*  使用fragment布局

**3、错误页面美化**

4、设计与规范

### 4.1 实体设计

**实体类：**

*  博客 Blog
*  博客分类 Type
*  博客标签 Tag
*  博客评论 Comment
*  用户 User



**实体关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/87092095.jpg)

**评论类自关联关系：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/41296045.jpg)

**Blog类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/38390041.jpg)

**Type类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/22984471.jpg)

**Tag类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/70860077.jpg)

**Comment类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/77104424.jpg)



**User类：**

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/10367795.jpg)



### 4.2 应用分层

![](http://on91wk3hn.bkt.clouddn.com/17-10-14/64528736.jpg)

### 4.3 命名约定

**Service/DAO层命名约定：**

*  获取单个对象的方法用get做前缀。
*  获取多个对象的方法用list做前缀。
*  获取统计值的方法用count做前缀。
*  插入的方法用save(推荐)或insert做前缀。
*  删除的方法用remove(推荐)或delete做前缀。
*  修改的方法用update做前缀。




![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 5、后台管理功能实现

### 5.1 登录



**1、构建登录页面和后台管理首页**

**2、UserService和UserRepository**

**3、LoginController实现登录**

**4、MD5加密**

**5、登录拦截器**

### 5.2 分类管理



**1、分类管理页面**

**2、分类列表分页**

````javascript
{
  "content":[
    {"id":123,"title":"blog122","content":"this is blog content"},
    {"id":122,"title":"blog121","content":"this is blog content"},
    {"id":121,"title":"blog120","content":"this is blog content"},
    {"id":120,"title":"blog119","content":"this is blog content"},
    {"id":119,"title":"blog118","content":"this is blog content"},
    {"id":118,"title":"blog117","content":"this is blog content"},
    {"id":117,"title":"blog116","content":"this is blog content"},
    {"id":116,"title":"blog115","content":"this is blog content"},
    {"id":115,"title":"blog114","content":"this is blog content"},
    {"id":114,"title":"blog113","content":"this is blog content"},
    {"id":113,"title":"blog112","content":"this is blog content"},
    {"id":112,"title":"blog111","content":"this is blog content"},
    {"id":111,"title":"blog110","content":"this is blog content"},
    {"id":110,"title":"blog109","content":"this is blog content"},
    {"id":109,"title":"blog108","content":"this is blog content"}],
  "last":false,
  "totalPages":9,
  "totalElements":123,
  "size":15,
  "number":0,
  "first":true,
  "sort":[{
    "direction":"DESC",
    "property":"id",
    "ignoreCase":false,
    "nullHandling":"NATIVE",
    "ascending":false
  }],
  "numberOfElements":15
}
````



**3、分类新增、修改、删除**

### 5.3 标签管理

### 5.4 博客管理



**1、博客分页查询**

**2、博客新增**

**3、博客修改**

**4、博客删除**

## 6、前端展示功能实现

### 6.1 首页展示



**1、博客列表**

**2、top分类**

**3、top标签**

**4、最新博客推荐**

**5、博客详情**

**1、Markdown 转换 HTML**

*  [commonmark-java  https://github.com/atlassian/commonmark-java](https://github.com/atlassian/commonmark-java)
*  pom.xml引用commonmark和扩展插件

```xml
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-heading-anchor</artifactId>
   <version>0.10.0</version>
</dependency>
<dependency>
   <groupId>com.atlassian.commonmark</groupId>
   <artifactId>commonmark-ext-gfm-tables</artifactId>
   <version>0.10.0</version>
</dependency>
```



**2、评论功能**



*  评论信息提交与回复功能
*  评论信息列表展示功能
*  管理员回复评论功能


### 6.2 分类页

### 6.3 标签页

### 6.4 归档页

### 6.5 关于我', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='这个是关于springmvc描述的', viewcount=21, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Fri Sep 04 18:19:30 CST 2020, updatetime=Sun Sep 13 11:13:04 CST 2020, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=22, title='测试博客', content='sssss拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='原创', description='ssss', viewcount=0, isadmire=0, iscopyright=0, isrecommend=null, iscomment=1, issue=0, createtime=Sat Sep 05 09:49:55 CST 2020, updatetime=Sat Sep 05 09:49:55 CST 2020, userId=1, typeId=1, user=null, type=null, tagsId='null', comments=[], tags=[]}, Blog{id=21, title='java是什么', content='-  作为一个招聘网站**注册用户**，我想**查看最近3天发布的招聘信息**，以便于**了解最新的招聘信息**。
-  作为公司，可以张贴新工作。



个人博客系统的用户故事：

角色：**普通访客**，**管理员（我）**

*  访客，可以分页查看所有的博客
*  访客，可以快速查看博客数最多的6个分类
*  访客，可以查看所有的分类
*  访客，可以查看某个分类下的博客列表
*  访客，可以快速查看标记博客最多的10个标签
*  访客，可以查看所有的标签
*  访客，可以查看某个标签下的博客列表
*  访客，可以根据年度时间线查看博客列表
*  访客，可以快速查看最新的推荐博客
*  访客，可以用关键字全局搜索博客
*  访客，可以查看单个博客内容
*  访客，可以对博客内容进行评论
*  访客，可以赞赏博客内容
*  访客，可以微信扫码阅读博客内容
*  访客，可以在首页扫描公众号二维码关注我
*  我，可以用户名和密码登录后台管理
*  我，可以管理博客
   *  我，可以发布新博客
   *  我，可以对博客进行分类
   *  我，可以对博客打标签
   *  我，可以修改博客
   *  我，可以删除博客
   *  我，可以根据标题，分类，标签查询博客
*  我，可以管理博客分类
   *  我，可以新增一个分类
   *  我，可以修改一个分类
   *  我，可以删除一个分类
   *  我，可以根据分类名称查询分类
*  我，可以管理标签
   *  我，可以新增一个标签
   *  我，可以修改一个标签
   *  我，可以删除一个标签
   *  我，可以根据名称查询标签

### 1.2 功能规划

![](https://ws2.sinaimg.cn/large/006tKfTcgy1fk7m27hbn4j31ds0ycdnp.jpg)

## 2、页面设计与开发

### 2.1 设计

**页面规划：**

前端展示：首页、详情页、分类、标签、归档、关于我

后台管理：模板页

### 2.2 页面开发



[Semantic UI官网](https://semantic-ui.com/)

[Semantic UI中文官网](http://www.semantic-ui.cn/)

[WebStorm下载与破解](https://imcoding.me/blogs/5)

[背景图片资源](https://www.toptal.com/designers/subtlepatterns/)

### 2.3 插件集成拉', firstpicture='https://unsplash.it/800/450?image=1005', flag='转载', description='这个是一篇关于java的博客', viewcount=16, isadmire=0, iscopyright=0, isrecommend=null, iscomment=0, issue=0, createtime=Thu Sep 05 09:46:41 CST 2019, updatetime=Thu Sep 05 09:46:41 CST 2019, userId=1, typeId=2, user=null, type=null, tagsId='null', comments=[], tags=[]}]}(String), common/fragments :: newbloglist(String)
2020-09-15 18:58:27.799 DEBUG 18476 --- [http-nio-8080-exec-7] c.c.blog.mapper.LogMapper.insertLog      : <==    Updates: 1
